/*
* This file is part of Fetch (the Fact Extraction Tool CHain).
*
* Fetch is free software; you can redistribute it and/or modify it under the
* terms of the GNU General Public License as published by the Free Software
* Foundation; either version 2 of the License, or (at your option) any later
* version.
*
* Fetch is distributed in the hope that it will be useful, but WITHOUT ANY
* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
* details.
*
* You should have received a copy of the GNU General Public License along
* with Fetch; if not, write to the Free Software Foundation, Inc.,
* 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
*
* Copyright 2007 University of Antwerp
* Author(s):  Bart Van Rompaey <bart.vanrompaey2@ua.ac.be>
*/

/**
 * Compute DPTMI (number of production method invocations,
 * directly invoked from test command) for all test commands
 * in the system.
 *
 **/

// retrieve the test framework generic TestCase class
IsTestCase(y) := Class(y,"TestCase");
InheritsFromTestCase(x,y) := IsTestCase(y) & InheritsFrom(_,_,x,y);

// test cases directly inheriting from TestCase
DTestCase(x) := InheritsFromTestCase(x,_);
//PRINT DTestCase(x);
InheritsFromTestCase(x,y) := DTestCase(y) & InheritsFrom(_,_,x,y);
Closure(x,y) := TC(InheritsFromTestCase(x,y));

// test cases indirectly inheriting from TestCase
ITestCase(x) := Closure(x,_);
//PRINT ITestCase(x);
TestCase(x) := DTestCase(x) | ITestCase(x);
//PRINT TestCase(x);

// print test cases
FOR tc IN TestCase(x) {
	ClassName(cn) := Class(tc,cn);

	// retrieve the name of c as a class
	// will lead to a relation with 1 element
	FOR n IN ClassName(cn) {
		//PRINT "TestCase", "	", tc,"	'",n,"'",ENDL;
		PRINT "";
	}
}

TestMethod(x) := EX(y, TestCase(y) & MethodBelongsToClass(x,y));
TestCommand(x) := EX(mn, TestMethod(x) & Method(x,mn) & @"[.]test"(mn) & @"[()]"(mn));
TestSetup(x) := EX(mn, TestMethod(x) & Method(x,mn) & @"[.]setUp"(mn) & @"[()]"(mn));
ProductionMethod(x) := !TestMethod(x);
FOR tc IN TestCommand(x) {
	MethodName(mn) := Method(tc,mn);
	FOR n IN MethodName(mn) {
		//PRINT "TestCommand", "   ", tc, "   '", n, "'",ENDL;
		PRINT "";
	}
}

FOR tc IN TestSetup(x) {
	MethodName(mn) := Method(tc,mn);
	FOR n IN MethodName(mn) {
		//PRINT "TestSetup", "   ", tc, "   '", n, "'",ENDL;
		PRINT "";
	}
}

// prints production methods
//FOR tc IN ProductionMethod(x) {
//	MethodName(mn) := Method(tc,mn);
//	FOR n IN MethodName(mn) {
//		PRINT "ProductionMethod", "   ", tc, "   '", n, "'",ENDL;
//	}
//}


Stimulus(anInvocation) := EX(x,y, TestMethod(x) & ProductionMethod(y) & Invokes(anInvocation,x,y));
FOR zid IN Stimulus(z) {
	SrcMethod(x) := Invokes(zid,x,_);
	DstMethod(y) := Invokes(zid,_,y);
	FOR xid IN SrcMethod(x) {
		FOR yid IN DstMethod(y) {
			SrcMethodName(srcMn) := Method(xid, srcMn);
			DstMethodName(dstMn) := Method(yid, dstMn);
			//PRINT "Stimulates", "	", zid, "	", xid, "	", yid,  ENDL;
			PRINT "";
		}
	}
}




FOR tc IN TestCommand(x) {
	InvokedProductionMethod(y) := Invokes(_,tc,y);
	dptmi := #(InvokedProductionMethod(y));
	TestCommandName(tcN) := Method(tc,tcN);
	FOR x IN TestCommandName(tcN) {
		PRINT "DPTMI", "	", x, "	", dptmi,ENDL;
	}
}

