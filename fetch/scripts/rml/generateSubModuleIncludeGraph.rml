/*
* This file is part of Fetch (the Fact Extraction Tool CHain).
*
* Fetch is free software; you can redistribute it and/or modify it under the
* terms of the GNU General Public License as published by the Free Software
* Foundation; either version 2 of the License, or (at your option) any later
* version.
*
* Fetch is distributed in the hope that it will be useful, but WITHOUT ANY
* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
* details.
*
* You should have received a copy of the GNU General Public License along
* with Fetch; if not, write to the Free Software Foundation, Inc.,
* 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
*
* Copyright 2006,2007 University of Antwerp
* Author(s):  Bart Van Rompaey <bart.vanrompaey2@ua.ac.be>,
*                     Bart Du Bois <bart.dubois@ua.ac.be>
*/


/**
 * Generates a graph indicating include dependencies
 * between modules that are submodules of the given module.
 **/

RootModuleName := $1;

SubModule(x) := EX(rootModuleIndex, Module(rootModuleIndex,RootModuleName) & ModuleBelongsToModule(x,rootModuleIndex));

// Track all files which transitively belong to a submodule
ModuleFile(file,module) := FileBelongsToModule(file,module) & SubModule(module);
TransitiveModuleContainment(childModule, parentModule) := TC(ModuleBelongsToModule(childModule,parentModule));
ModuleFile(file,module) := ModuleFile(file,module) | EX(childModule, TransitiveModuleContainment(childModule,module) & FileBelongsToModule(file, childModule));

DirectedInclude(clientModule,serverModule,include) := SubModule(clientModule)
															& SubModule(serverModule)
															& EX(clientFile, ModuleFile(clientFile, clientModule)
																& EX(serverFile, ModuleFile(serverFile, serverModule)
																	& Include(include,clientFile, serverFile)
																)
															);

/**
 * First print the nodes.
 **/
PRINT "nodedef> name,label,style,color",ENDL;

FOR module IN SubModule(x) {
	ModuleName(name) := Module(module, name);
	FOR name IN ModuleName(x) {
		PRINT "n",module,",'",name,"',4,lightgray",ENDL;
	}
}

/**
 * Then print the edges.
 **/
PRINT "edgedef> node1,node2,directed,label,labelvisible,color,nrOfForwardIncludes INT,nrOfReverseIncludes INT",ENDL;

FOR clientModule IN SubModule(x) {
	ClientModuleName(x) := Module(clientModule,x);
	FOR clientName IN ClientModuleName(x) {
		FOR serverModule IN SubModule(x) {
			ServerModuleName(x) := Module(serverModule,x);
			FOR serverName IN ServerModuleName(x) {
				nrOfForwardIncludes := (#(DirectedInclude(clientModule,serverModule,include)));
				nrOfReverseIncludes := (#(DirectedInclude(serverModule,clientModule,include)));

				IF (nrOfForwardIncludes > 0) {
					PRINT "n",clientModule,",n",serverModule,",";

					IF ((clientModule != serverModule) & (nrOfReverseIncludes > 0)) {
						PRINT "FALSE,",nrOfReverseIncludes,"<->",nrOfForwardIncludes;
					}
					ELSE {
						PRINT "TRUE,",nrOfForwardIncludes;
					}
					PRINT ",TRUE,rawsienna,",nrOfForwardIncludes,",",nrOfReverseIncludes,ENDL;
				}
			}
		}
	}
}
