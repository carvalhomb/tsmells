/*
* This file is part of Fetch (the Fact Extraction Tool CHain).
*
* Fetch is free software; you can redistribute it and/or modify it under the
* terms of the GNU General Public License as published by the Free Software
* Foundation; either version 2 of the License, or (at your option) any later
* version.
*
* Fetch is distributed in the hope that it will be useful, but WITHOUT ANY
* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
* details.
*
* You should have received a copy of the GNU General Public License along
* with Fetch; if not, write to the Free Software Foundation, Inc.,
* 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
*
* Copyright 2007 University of Antwerp
* Author(s):  Bart Van Rompaey <bart.vanrompaey2@ua.ac.be>
*/

/**
 * Enlists several metrics for the functions and methods
 * in the model.
 **/

// print header
PRINT "entityId	Name	LOC	NOS	CC	FanIn	FanOut	MPC",ENDL;

InvokeableEntity(anEntity) := Method(anEntity,_) | Function(anEntity,_);

LOC(anEntity,aValue) := FALSE(anEntity,aValue);
MVG(anEntity,aValue) := FALSE(anEntity,aValue);
COM(anEntity,aValue) := FALSE(anEntity,aValue);

EntityWithMeasures(anEntity) := Measurement(_,anEntity,_,_);

FOR theEntityWithMeasures IN EntityWithMeasures(x) {
	LOC(anEntity,aValue) := (anEntity = theEntityWithMeasures) & Measurement(_,anEntity,"LOC",aValue);
	loc := SUM(LOC(theEntityWithMeasures,x));

	MVG(anEntity,aValue) := (anEntity = theEntityWithMeasures) & Measurement(_,anEntity,"CC",aValue);
	cc := SUM(MVG(theEntityWithMeasures,x));

	COM(anEntity,aValue) := (anEntity = theEntityWithMeasures) & Measurement(_,anEntity,"NOS",aValue);
	nos := SUM(COM(theEntityWithMeasures,x));

	fanIn := #(Invokes(_,anOtherEntity,theEntityWithMeasures));
	fanOut := #(Invokes(_,theEntityWithMeasures,anOtherEntity));
	mpc := #(Invokes(anInvocation,theEntityWithMeasures,anOtherEntity));

	// retrieve the name of m1 as a method
	// will lead to an empty relation if m1
	// is not a method
	MethodName(mn) := Method(theEntityWithMeasures,mn);
	FOR n IN MethodName(y) {
		PRINT theEntityWithMeasures, "	'", n,"'	",loc,"	",nos,"	",cc,"	",fanIn,"	",fanOut,"	",mpc,ENDL;
	}

	// retrieve the name of m1 as a function
	// will lead to an empty relation if m1
	// is not a function
	FunctionName(fn) := Function(theEntityWithMeasures,fn);
	FOR n IN FunctionName(y) {
		PRINT theEntityWithMeasures, "	'",n,"'	",loc,"	",nos,"	",cc,"	",fanIn,"	",fanOut,"	",mpc,ENDL;
	}
}
