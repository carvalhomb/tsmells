/**
 * This file is part of Fetch (the Fact Extraction Tool CHain).
 *
 * Fetch is free software; you can redistribute it and/or modify it under the 
 * terms of the GNU General Public License as published by the Free Software 
 * Foundation; either version 2 of the License, or (at your option) any later 
 * version.
 *
 * Fetch is distributed in the hope that it will be useful, but WITHOUT ANY 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
 * details.
 *
 * You should have received a copy of the GNU General Public License along 
 * with Fetch; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA 
 *
 * Copyright 2007 Bart Van Rompaey <bart.vanrompaey2@ua.ac.be>
 **/

// modified and extended for use with TSmells by <manuel.breugelmans@student.ua.ac.be>

No("0");
Yes("1");

/**
 * Assertions
 * @col : denotes if this assertion has a failure message
 * @col : assertion signature
 **/
CheckerSignature("0","org::junit::TestCase.assertEquals(boolean,boolean)");
CheckerSignature("0","org::junit::TestCase.assertEquals(byte,byte)");
CheckerSignature("0","org::junit::TestCase.assertEquals(char,char)");
CheckerSignature("1","org::junit::TestCase.assertEquals(double,double,double)"); // on purpose, for SN mistakes
CheckerSignature("1","org::junit::TestCase.assertEquals(float,float,float)"); // idem
CheckerSignature("0","org::junit::TestCase.assertEquals(int,int)");
CheckerSignature("0","org::junit::TestCase.assertEquals(long,long)");
CheckerSignature("0","org::junit::TestCase.assertEquals(java.lang.Object,java.lang.Object)");
CheckerSignature("0","org::junit::TestCase.assertEquals(short,short)");
CheckerSignature("0","org::junit::TestCase.assertEquals(java.lang.String,java.lang.String)");
CheckerSignature("0","org::junit::TestCase.assertFalse(boolean)");
CheckerSignature("0","org::junit::TestCase.assertNotNull(java.lang.Object)");
CheckerSignature("0","org::junit::TestCase.assertNotSame(java.lang.Object,java.lang.Object)");
CheckerSignature("0","org::junit::TestCase.assertNull(java.lang.Object)");
CheckerSignature("0","org::junit::TestCase.assertSame(java.lang.Object,java.lang.Object)");
CheckerSignature("0","org::junit::TestCase.assertTrue(boolean)");
CheckerSignature("0","org::junit::TestCase.fail()");

CheckerSignature("1","org::junit::TestCase.assertEquals(java.lang.String,boolean,boolean)");
CheckerSignature("1","org::junit::TestCase.assertEquals(java.lang.String,byte,byte)");
CheckerSignature("1","org::junit::TestCase.assertEquals(java.lang.String,char,char)");
CheckerSignature("1","org::junit::TestCase.assertEquals(java.lang.String,double,double,double)");
CheckerSignature("1","org::junit::TestCase.assertEquals(java.lang.String,float,float,float)");
CheckerSignature("1","org::junit::TestCase.assertEquals(java.lang.String,int,int)");
CheckerSignature("1","org::junit::TestCase.assertEquals(java.lang.String,long,long)");
CheckerSignature("1","org::junit::TestCase.assertEquals(java.lang.String,java.lang.Object,java.lang.Object)");
CheckerSignature("1","org::junit::TestCase.assertEquals(java.lang.String,short,short)");
CheckerSignature("1","org::junit::TestCase.assertEquals(java.lang.String,java.lang.String)");
CheckerSignature("1","org::junit::TestCase.assertEquals(java.lang.String,java.lang.String,java.lang.String)");
CheckerSignature("1","org::junit::TestCase.assertFalse(java.lang.String,boolean)");
CheckerSignature("1","org::junit::TestCase.assertNotNull(java.lang.String,java.lang.Object)");
CheckerSignature("1","org::junit::TestCase.assertNotSame(java.lang.String,java.lang.Object,java.lang.Object)");
CheckerSignature("1","org::junit::TestCase.assertNull(java.lang.String,java.lang.Object)");
CheckerSignature("1","org::junit::TestCase.assertSame(java.lang.String,java.lang.Object,java.lang.Object)");
CheckerSignature("1","org::junit::TestCase.fail(java.lang.String)");
CheckerSignature("1","org::junit::TestCase.assertTrue(java.lang.String,boolean)");

/**
 * Finds all test cases among the classes,
 * both directly as well as indirectly 
 * inheriting from TestCase
 * 
 **/

// retrieve the test framework generic TestCase class
IsTestCase(y) := Class(y,"org::junit::TestCase");

InheritsFromTestCase(x,y) := IsTestCase(y) & InheritsFrom(_,_,x,y);

// test cases directly inheriting from TestCase
DTestCase(x) := InheritsFromTestCase(x,_);
//PRINT DTestCase(x);
InheritsFromTestCase(x,y) := DTestCase(y) & InheritsFrom(_,_,x,y);
Closure(x,y) := TC(InheritsFromTestCase(x,y));

// test cases indirectly inheriting from TestCase
ITestCase(x) := Closure(x,_);
TestCaseId(x) := DTestCase(x) | ITestCase(x);

TestMethodId(x) := EX(y, TestCaseId(y) & MethodBelongsToClass(x,y));
TestCommandId(x) := EX(mn, TestMethodId(x) & Method(x,mn) & @"[.]test"(mn) & @"[()]"(mn));
TestSetupId(x) := EX(mn, TestMethodId(x) & Method(x,mn) & @"[.]setUp"(mn) & @"[()]"(mn));
TestTeardownId(x) := EX(mn, TestMethodId(x) & Method(x,mn) & @"[.]tearDown"(mn) & @"[()]"(mn));
TestHelperId(x) := TestMethodId(x) & !TestCommandId(x) & !TestSetupId(x) & !TestTeardownId(x);
TestChecker(x) := EX(y, Method(x, y) & CheckerSignature(_,y));
ProductionMethodId(x) := Method(x,_) & !TestMethodId(x) & !TestChecker(x);

// these are needed for backwards compatibility.
// prolly they'll vanish for good, one day
TestCase(x,y) := TestCaseId(x) & Class(x,y);
TestCommand(x,y) := TestCommandId(x) & Method(x,y);
TestSetup(x,y) := TestSetupId(x) & Method(x,y);
TestTeardown(x,y) := TestTeardownId(x) & Method(x,y);
TestHelper(x,y) := TestHelperId(x) & Method(x,y);

//PRINT ["TestCase"] TestCase(x,y);
//PRINT ["TestCommand"] TestCommand(x,y);
//PRINT ["TestSetup"] TestSetup(x,y);
//PRINT ["TestTeardown"] TestTeardown(x,y);
//PRINT ["TestHelper"] TestHelper(x,y);
//PRINT ["TestChecker"] TestChecker(x);

/**
 * contains a cleaned invoke relation. gets rid of the DefinitionForDeclaration step
 * @col id: invoke ID
 * @col x:  x caller
 * @col y:  y callee
 */
PureInvokes(id,x,y) := EX(u, DefinitionForDeclaration(u,x) & Invokes(id,u,y));

Stimulates(id,x,y) := PureInvokes(id,x,y) & TestMethodId(x) & ProductionMethodId(y);

/**
 * contains a cleaned accesses relation. gets rid of the DefinitionForDeclaration step
 * @col id: invoke ID
 * @col x:  x caller
 * @col y:  y attribute
 */
PureAccesses(id,x,y) := EX(u, DefinitionForDeclaration(u,x) & Accesses(id,u,y));


/**
 *  Predicate which denotes wheter an assertion has a failure message
 *  @col x: testchecker ID
 */
NoFailureMessage(x) := EX(y, TestChecker(x) & Method(x, y) & CheckerSignature("0",y));

/**
 * Checkers invoked in TestCommands/TestHelpers
 * @col z:  invocation ID
 * @col y:  testcommand/helper ID
 * @col x:  testchecker ID
 */
CheckerInvoke(z,y,x) := TestChecker(x) & (TestCommandId(y)|TestHelperId(y)) & PureInvokes(z,y,x);
