/**
 * This file is part of TSmells
 *
 * TSmells is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by the 
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version.
 *
 * TSmells is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
 * details.
 *
 * You should have received a copy of the GNU General Public License along 
 * with TSmells; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA 
 *
 * Copyright 2007 Manuel Breugelmans <manuel.breugelmans@student.ua.ac.be>
 */


/**
 * A test command or helper has AssertionRoulette if it
 * invokes a high number of descriptionless checker methods.
 * This treshold is configurable through the 
 * 'ASSERTION_ROULETTE_TRESHOLD' macro
 *
 * For a formal description see formspec.pdf
 **/


/**
 * holds test commands/helpers with message-less checker methods
 * @col id:  invocation ID
 * @col x:   test command/helper ID
 * @col y:   message-less assert ID
 */
NoDescAssert(id,x,y) := 
    NoFailureMessage(y) & 
    CheckerInvoke(id,x,y) & 
    (TestCommandId(x) | TestHelperId(x));

AssertionRouletteId("", "", ""); // without this crocopat borks

FOR tc IN NoDescAssert(_,x,_) {
    cnt := #(NoDescAssert(a,tc,b));
    tot := #(CheckerInvoke(a,tc,b));
    IF ( cnt >= ASSERTION_ROULETTE_TRESHOLD) {
        // got one, append it
        IF ( (cnt <= COUNT_MAX) & (tot <=COUNT_MAX)) {
            AssertionRouletteId(x, all, num) := 
                AssertionRouletteId(x,all,num) |
                (x = tc & 
                count(STRING(cnt), num) & 
                count(STRING(tot), all));
        } ELSE {
            // too high a number of assertions, log as 'alot'
            // wee bit clumsy but ok
            AssertionRouletteId(x, all, num) := 
                AssertionRouletteId(x,all,num) |
                (x = tc & count("alot", num) & count("alot", all));
        }
    }
}

RouletteType("0","TC"); // roulette in test command
RouletteType("1","TH"); // roulette in test helper

/**
 * Grab the command/helper name, source file linenumber and more
 **/
AssertionRoulette(type, rltNm, total, num, file, line) :=
    EX(rltId,
            AssertionRouletteId(rltId, total, num) &
            ((TestCommandId(rltId) & RouletteType("0", type)) |
             (TestHelperId(rltId)  & RouletteType("1", type))) &
            TestEntityInfo(rltId, rltNm, file, line)
      );

PRINT ["AssertionRoulette"] AssertionRoulette(a,b,c,d,e,f);
