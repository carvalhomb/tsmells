PRINT ["TestCase"] TestCase(x,y);
PRINT ["TestCommand"] TestCommand(x,y);
PRINT ["TestHelper"] TestHelper(x,y);

FOR tc IN TestChecker(x) {
    TcName(x) := Method(tc,x);
    FOR n IN TcName(x) {
        PRINT "TestChecker", tc, "  ", n, ENDL;
    }
}

PRINT ["CheckerInvoke"] CheckerInvoke(x,y,z);

PRINT ["Stimulates"] Stimulates(x,y,z);
Stim("==stimulates==>");

StimulInfo(tcnm, txt, stnm) := 
    EX(id, tcid, stimid,
        Stimulates(id, tcid, stimid) & 
        Method(tcid, tcnm) & Stim(txt) & 
        (Method(stimid, stnm)|Function(stimid,stnm)));
PRINT StimulInfo(x,y,z);

/*FOR id IN Stimulates(x,_,_) {
    FOR tc IN Stimulates(id,x,_) {
        TcName(tcn) := Method(tc,tcn);

        FOR tcn IN TcName(x) {
            FOR meth IN Stimulates(id,tc,x) {
                MthName(mnm) := Method(meth,mnm);
                IF (#(MthName(x)) = 0) {
                    MthName(y) := Function(meth, y);
                }

                FOR mnm IN MthName(x) {
                    PRINT tcn, " stimulates ", mnm, ENDL;
                }
            }
        }
    }
}*/

numCase := #(TestCase(x,y));
numComm := #(TestCommand(x,y));
numHelp := #(TestHelper(x,y));
numCheck := #(CheckerInvoke(x,y,z));
numStimu := #(Stimulates(u,v,w));

PRINT "<<<<<============================>>>>>", ENDL;
PRINT "#TestCases       ", numCase, ENDL;
PRINT "#TestCommands    ", numComm, ENDL;
PRINT "#TestCheckers    ", #(TestChecker(x)), ENDL;
PRINT "#CheckerInvokes  ", numCheck, ENDL;
PRINT "#TestHelpers     ", numHelp, ENDL;
PRINT "#TestSetup       ", #(TestSetup(x,y)), ENDL;
PRINT "#TestTeardown    ", #(TestTeardown(x,y)), ENDL;
PRINT "#Stimulates      ", numStimu, ENDL;
PRINT "#ProductionMtd   ", #(ProductionMethodId(x)), ENDL;
PRINT "#ProductionFunct ", #(ProductionFunctionId(x)), ENDL;
PRINT "<<<<<============================>>>>>", ENDL;

