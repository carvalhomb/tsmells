/**
 * This file is part of TSmells
 *
 * TSmells is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by the 
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version.
 *
 * TSmells is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
 * details.
 *
 * You should have received a copy of the GNU General Public License along 
 * with TSmells; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA 
 *
 * Copyright 2007 Manuel Breugelmans <manuel.breugelmans@student.ua.ac.be>
 */

/**
 * Indirect test is somewhat fuzzy described in litarature.
 * Simple heuristic: treshold on the number different classes
 * a TC invokes/accesses
 **/

// fake it implementation
//PRINT "IndirectTest;MyTest.testCommand();",treshold,";6", ENDL;

/**
 * Contains the different classes a test command accesses. 
 * Not counting itself, nor other Test Commands.
 *
 * @col tcidd: testcommand id
 * @col clazz: accessed class
 **/
diffClassAccess(tcidd, clazz) := 
    EX(y, id, TestCommandId(tcidd) & 
              PureAccesses(id,tcidd,y) & 
              AttributeBelongsToClass(y,clazz) & 
              !TestCaseId(clazz));

/**
 * Contains the different production classes a test command 
 * invokes a method from.
 * @col tcidd: test command id
 * @col clazz: invoked class
 **/
diffClassInvokes(tcidd, clazz) :=
    EX(y, id, TestCommandId(tcidd) &
              PureInvokes(id, tcidd, y) &
              ProductionMethodId(y) &
              MethodBelongsToClass(y, clazz));

//PRINT ["diffClassAccess"] diffClassAccess(x,y);
//PRINT ["diffClassInvokes"] diffClassInvokes(x,y);


FOR tcid IN TestCommandId(x) {
    //ninv := #(diffClassInvokes(tcid,z));
    //nacc := #(diffClassAccess(tcid, z));
    //ntot := ninv + nacc;
    //diffClassInvAcc(c) := diffClassInvokes(tcid, c) | diffClassAccess(tcid, c);
    ntot := #(diffClassInvokes(tcid, c) | diffClassAccess(tcid, c));
    IF ( ntot >= INDIRECT_TEST_TRESHOLD) {
        TCName(tcnmz) := Method(tcid,tcnmz);
        Defin(x) := DefinitionForDeclaration(x, tcid);
        FOR def IN Defin(x) {
            FileName(x) := EX(y, InvokableEntityBelongsToFile(def,y,_) & File(y,x));
            LineNr(x) := InvokableEntityBelongsToFile(def, _, x);
        }
        FOR file IN FileName(x)  { // singleton
        FOR line IN LineNr(x)    { // singleton
        FOR tcas IN TCName(x)    { // singleton
            PRINT "IndirectTest;", tcas, ";", INDIRECT_TEST_TRESHOLD, ";", 
                  ntot,";", file, ";", line, ENDL;
        }}}
    }
}
