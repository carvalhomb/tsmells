/**
 * This file is part of TSmells
 *
 * TSmells is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by the 
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version.
 *
 * TSmells is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
 * details.
 *
 * You should have received a copy of the GNU General Public License along 
 * with TSmells; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA 
 *
 * Copyright 2007 Manuel Breugelmans <manuel.breugelmans@student.ua.ac.be>
 */

/**
 * Indirect test is somewhat fuzzy described in litarature.
 * Simple heuristic: treshold on the number different classes
 * a TC invokes/accesses
 **/

// initialize the framework dependant test entities
include(INIT_TEST_ENTITIES)

treshold := ifdef(`INDIRECT_TEST_TRESHOLD', `INDIRECT_TEST_TRESHOLD', `5');

// fake it implementation
//PRINT "IndirectTest;MyTest.testCommand();",treshold,";6", ENDL;

/**
 * Contains the different classes a test command accesses. 
 * Not counting itself, nor other Test Commands.
 *
 * @col tcidd: testcommand id
 * @col clazz: accessed class
 **/
diffClassAccess(tcidd, clazz) := 
    EX(y, id, TestCommandId(tcidd) & 
              Accesses(id,tcidd,y) & 
              AttributeBelongsToClass(y,clazz) & 
              !TestCaseId(clazz));

/**
 * Contains the different production classes a test command 
 * invokes a method from.
 * @col tcidd: test command id
 * @col clazz: invoked class
 **/
diffClassInvokes(tcidd, clazz) :=
    EX(y, id, TestCommandId(tcidd) &
              PureInvokes(id, tcidd, y) &
              ProductionMethodId(y) &
              MethodBelongsToClass(y, clazz));


FOR tcid IN TestCommandId(x) {
	//ninv := #(diffClassInvokes(tcid,z));
    //nacc := #(diffClassAccess(tcid, z));
    //ntot := ninv + nacc;
    //diffClassInvAcc(c) := diffClassInvokes(tcid, c) | diffClassAccess(tcid, c);
    ntot := #(diffClassInvokes(tcid, c) | diffClassAccess(tcid, c));
 	IF ( ntot >= treshold) {
		TCName(tcnm) := Method(tcid,tcnm); // single element
		FOR tcnm IN TCName(x) {
			PRINT "IndirectTest;", tcnm, ";", treshold, ";", ntot, ENDL;
		}
	}
}
