/**
 * This file is part of TSmells
 *
 * TSmells is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by the 
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version.
 *
 * TSmells is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
 * details.
 *
 * You should have received a copy of the GNU General Public License along 
 * with TSmells; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA 
 *
 * Copyright 2007 Manuel Breugelmans <manuel.breugelmans@student.ua.ac.be>
 */


/**
 * Duplication in tests is nefast, introduce helpers or 
 * move to fixture.
 **/

/**
 * The invocations of a testmethod with
 * filename and linenumber.
 *
 * @col tcid:   invoker test method id
 * @col iid:    invocation id
 * @col invid:  invokee id
 * @col line:   invocation line number
 * @col tc:     qualified testmethod name
 * @col inv:    qualified invokee name
 * @col file:   filename
 **/
// NOTE assertion's are removed since sequences of them
// result in (loads of) false positives
ComInvoke(tcid, iid, invid, line, tcx, inv, file) := 
   EX(x, fid, def,
              TestMethodId(tcid) & 
              PureInvokes(iid, tcid, invid) & 
              InvocationLocation(iid, _, line) &
              DefinitionForDeclaration(def, tcid) &
              InvokableEntityBelongsToFile(def,fid, x) &
              Method(tcid,tcx) &
              (Method(invid, inv) | Function(invid, inv)) &
              File(fid, file) &
              !TestChecker(invid)
     );

EXEC "rm -rf tmp_duplic_code__";
PRINT ["ComInvoke"] ComInvoke(a_dc,b_dc,c_dc,d_dc,e_dc,f_dc,g_dc) TO "tmp_duplic_code__";

/**
 * The accesses of a testmethod, with
 * filename and linenumber.
 *
 * @col tcid:  accessor test method id
 * @col aid:   access id
 * @col attid: attribute type id (was attribute id)
 * @col line:  access line number
 * @col tc:    qualified testmethod name
 * @col att:   qualified attribute name
 * @col file:  filename
 **/
ComAccess(tcid_ca, aid, attid, line2, tc2, att, file2) := 
   EX(x, fid, attrid, def,
              TestMethodId(tcid_ca) & 
              PureAccesses(aid, tcid_ca, attrid) & 
              AccessLocation(aid, _, line2) &
              DefinitionForDeclaration(def, tcid_ca) &
              InvokableEntityBelongsToFile(def,fid, x) &
              Method(tcid_ca,tc2) &
              Attribute(attrid, att) &
              HasType(attrid, attid) &
              File(fid, file2)
     );

PRINT ["ComAccess"] ComAccess(a_dc,b_dc,c_dc,d_dc,e_dc,f_dc,g_dc) TO "tmp_duplic_code__";

// now execute a python script which computes the clones
EXEC "python DUPLICATED_CODE_PYGEN tmp_duplic_code__ DUPLICATED_CODE_TRESHOLD";
//EXEC "rm -rf tmp_duplic_code__";
