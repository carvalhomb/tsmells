/**
 * This file is part of TSmells
 *
 * TSmells is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by the 
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version.
 *
 * TSmells is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
 * details.
 *
 * You should have received a copy of the GNU General Public License along 
 * with TSmells; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA 
 *
 * Copyright 2007 Manuel Breugelmans <manuel.breugelmans@student.ua.ac.be>
 */

/**
 * Detection of 'toString' in test commands and helpers
 *
 * TestEntities: + initCppTestEntities.rml
 *               + initJavaTestEntities.rml
 * 
 **/

// fake it implementation
//PRINT "SensitiveEquality;MyTest.testCommand();1", ENDL;
//       ^^ testcase.testcommand(), total number of toStrings

//ToStringId(x):=Method(x,"java::lang::Object.toString()");
// TODO paremeterize this, eg blacklist
ToStringId(x):=EX(y,Method(x,y) & @"[.]toString()"(y));

// TODO transform this into an instant dump instead of looping.
// way faster
FOR tcid IN TestCommandId(x) {
    ToStringInvokes(y) := EX(x,PureInvokes(y,tcid,x) & ToStringId(x));
    ntstr := #(ToStringInvokes(y));
    IF ( ntstr > 0) {
        TCName(tcnmx) := Method(tcid,tcnmx);
        FileName(x) := EX(y, InvokableEntityBelongsToFile(tcid,y,_) & File(y,x));
        LineNr(x) := InvokableEntityBelongsToFile(tcid, _, x);
        FOR file IN FileName(x)  { // singleton
        FOR line IN LineNr(x)    { // singleton
        FOR tcom IN TCName(x)    { // singleton
            PRINT "SensitiveEquality	TC	", tcom, "	", ntstr, "	", file, "	", line, ENDL;
        }}}
    }
}

FOR thid IN TestHelperId(x) {
    ToStringInvokes(y) := EX(x,PureInvokes(y,thid,x) & ToStringId(x));
    ntstr := #(ToStringInvokes(y));
    IF ( ntstr > 0) {
        THName(thnmx) := Method(thid,thnmx); 
        FileName(x) := EX(y, InvokableEntityBelongsToFile(thid,y,_) & File(y,x));
        LineNr(x) := InvokableEntityBelongsToFile(thid, _, x);
        FOR file IN FileName(x)  { // singleton
        FOR line IN LineNr(x)    { // singleton
        FOR thel IN THName(x)    { // singleton
            PRINT "SensitiveEquality	TH	", thel, "	", ntstr, "	", file, "	", line, ENDL;
        }}}
    }
}
