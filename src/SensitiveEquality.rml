/**
 * This file is part of TSmells
 *
 * TSmells is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by the 
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version.
 *
 * TSmells is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
 * details.
 *
 * You should have received a copy of the GNU General Public License along 
 * with TSmells; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA 
 *
 * Copyright 2007 Manuel Breugelmans <manuel.breugelmans@student.ua.ac.be>
 */

/**
 * Detection of 'toString' in test commands and helpers
 *
 * TestEntities: + writeCppTestEntities.rml
 *               + writeJavaTestEntities.rml
 * 
 * eg: appendJavaTE.sh rsf/MyRsf.rsf  | \
 *			crocopat ${TSMELLS}/src/SensitiveEquality.rml
 *
 **/

// make sure all these relations exist to suppress crocopat warnings
TestCommand("-1","-2");
TestHelper("-3","-4");
Stimulates("-5", "-6");
ProductionMethod("-7", "-8");
Function("-9","-10");
TestChecker("-11","-12");
CheckerInvoke("-13","-14");

// fake it implementation
//PRINT "SensitiveEquality;MyTest.testCommand();1", ENDL;
//       ^^ testcase.testcommand(), total number of toStrings

//ToStringId(x):=Method(x,"java::lang::Object.toString()");
ToStringId(x):=EX(y,Method(x,y) & @"[.]toString()"(y));

FOR tcid IN TestCommandId(x) {
	ToStringInvokes(y) := EX(x,PureInvokes(y,tcid,x) & ToStringId(x));
	ntstr := #(ToStringInvokes(y));
	IF ( ntstr > 0) {
		TCName(tcnm) := Method(tcid,tcnm); // single element
		FOR tcnm IN TCName(x) {
			PRINT "SensitiveEquality;TC;", tcnm, ";", ntstr, ENDL;
		}
	}
}

FOR thid IN TestHelperId(x) {
	ToStringInvokes(y) := EX(x,PureInvokes(y,thid,x) & ToStringId(x));
	ntstr := #(ToStringInvokes(y));
	IF ( ntstr > 0) {
		THName(thnm) := Method(thid,thnm); // single element
		FOR thnm IN THName(x) {
			PRINT "SensitiveEquality;TH;", thnm, ";", ntstr, ENDL;
		}
	}
}
