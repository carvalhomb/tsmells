/**
 * This file is part of TSmells
 *
 * TSmells is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by the 
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version.
 *
 * TSmells is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
 * details.
 *
 * You should have received a copy of the GNU General Public License along 
 * with TSmells; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA 
 *
 * Copyright 2007 Manuel Breugelmans <manuel.breugelmans@student.ua.ac.be>
 */

EXEC "START_TIMER2";

/**
 * Some helper relations
 **/

/**
 * contains a cleaned invoke relation. gets rid of the DefinitionForDeclaration step
 * @col id: invoke ID
 * @col x:  x caller
 * @col y:  y callee
 */
// PureInvokes(id,x,y) := 
//     EX(u, 
//         DefinitionForDeclaration(u,x) & 
//         Invokes(id,u,y));
// PRINT ["PureInvokes"] PureInvokes(o,p,q);

PureInvokez(id,y,x) := 
    EX(u, 
        Invokes(id,u,y) &
        DefinitionForDeclaration(u,x));

define(`PureInvokes', `PureInvokez($1,$3,$2)')

/**
 * contains a cleaned accesses relation. gets rid of the DefinitionForDeclaration step
 * @col id: invoke ID
 * @col x:  x caller
 * @col y:  y attribute
 */
// PureAccesses(id,x,y) := 
//     EX(u, 
//         DefinitionForDeclaration(u,x) & 
//         Accesses(id,u,y));

PureAccessez(id,y,x) := 
    EX(u,
        Accesses(id,u,y) &
        DefinitionForDeclaration(u,x)
      );

define(`PureAccesses', `PureAccessez($1,$3,$2)')

EXEC "ECHO2 Pure{Invokes,Accesses} TIMER2";

Stimulates(id,x,y) := 
        PureInvokes(id,x,y) & 
        TestMethodId(x) &  
        (ProductionMethodId(y) | ProductionFunctionId(y));
// PRINT ["Stimulates"] Stimulates(o,p,q);


/**
 *  Predicate which denotes wheter an assertion has a failure message
 *  @col x: testchecker ID
 */
NoFailureMessage(x) := 
    EX(y,z, 
        TestChecker(x) & 
        (Function(x, y)|Method(x,y)) & 
        CheckerSignature(z,y) & No(z));

/**
 * Checkers invoked in TestCommands/TestHelpers
 * @col z:  invocation ID
 * @col y:  testcommand/helper ID
 * @col x:  testchecker ID
 */
CheckerInvoke(z,y,x) := 
        TestChecker(x) & 
        (TestCommandId(y)|TestHelperId(y)) & 
        PureInvokes(z,y,x);

// TestCheck(x,nm) := TestChecker(x) & Method(x, nm);
// PRINT ["TestChecker"] TestCheck(x,y) TO "checkers";
// PRINT "#CheckerInvoke ", #(CheckerInvoke(o,p,q)), ENDL TO "checkers";
// CheckerInvo(o,p) := 
//         EX(invId, cId, //declId,
//             CheckerInvoke(_, invId, cId) &
//            // DefinitionForDeclaration(invId, declId) &
//             Method(invId, o) &
//             Method(cId, p));
// PRINT ["CheckerInvoke"] CheckerInvo(o,p) TO "checkers";

EXEC "ECHO2 Evrything before TestEntityInfo computed TIMER2";

/**
 * Test Command & Helper information.
 * Prebuilt sinced used extensivly when dumping smell stats
 *
 * @col tid:  test command or helper id
 * @col name: fully qualified method name
 * @col file: sourcefile this method is defined in
 * @col line: starting linenumber of the method definition
 **/
// TestEntityInfo(tid, name, file, line) :=
//     EX(def, fid,
//             TestMethodId(tid) &
//             Method(tid, name) &
//             DefinitionForDeclaration(def, tid) &
//             InvokableEntityBelongsToFile(def, fid, line) &
//             File(fid, file)
//       );

TestEntityInfo(tid, name, file, line) :=
    EX(def, fid,
            TestMethodId(tid) &
            Method(tid, name) &
            DefinitionForDeclaration(def, tid) &
            File(fid, file) &
            InvokableEntityBelongsToFile(def, fid, line)
      );


EXEC "ECHO2 TestEntityInfo computed TIMER2";

/**
 * Extended test command, helper & fixture information
 * with the owner test case
 *
 * @col tid:  test command or helper id
 * @col name: qualified method name
 * @col file: sourcefile this method is defined in
 * @col line: starting linenumber of the method definition
 * @col tcid: owner testcase id
 * @col case: owner testcase fully qualified name
 * @col loc : lines of code
 **/
// since PMCCabe tends to forget a few methods, a default LOC is used ....
// default = 10 LOC
TestEntityInfoWithOwner(tid, name, file, line, tcid, case, loc) :=
    TestEntityInfo(tid, name, file, line) &
    MethodBelongsToClass(tid, tcid) &
    Class(tcid, case) &
    ( Measurement(_, tid, "LOC", loc) | 
      ( !Measurement(_,tid,"LOC", _) & 
        count("10", loc)));

EXEC "ECHO2 TestEntityInfoWithOwner TIMER2";

TestCaseDefinitionFile("",""); // without this -> crocopat: relYacc.y:232: int yyparse(): Assertion `gVariables.find(*yyvsp[-6].rel_String) == gVariables.end()' failed.

TestCaseDefinitionFile(tcid_gf, fid) :=
    EX(mtdid, def,
        TestCaseId(tcid_gf) &
        MethodBelongsToClass(mtdid, tcid_gf) &
        DefinitionForDeclaration(def, mtdid) &
        InvokableEntityBelongsToFile(def, fid, _));

/**
 * All helpers thid invoked directly from command tcid
 **/
ComHelpers(tcid, thid) :=
    TestCommandId(tcid) & TestHelperId(thid) & PureInvokes(_,tcid, thid);
TestHelperInvoke(thid1, thid2) :=
    TestHelperId(thid1) & PureInvokes(_, thid1, thid2) & TestHelperId(thid2);

/**
 * All helpers thid invoked from tcid, directly & indirectly
 * where tcid is a testcommand id
 **/
TransComHelper(tcid, thid) :=
    ComHelpers(tcid, thid) |
    EX(z, ComHelpers(tcid,z) & TC(TestHelperInvoke(z, thid)));

EXEC "ECHO2 The rest TIMER2";
