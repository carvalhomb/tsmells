/**
 * This file is part of TSmells
 *
 * TSmells is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by the 
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version.
 *
 * TSmells is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
 * details.
 *
 * You should have received a copy of the GNU General Public License along 
 * with TSmells; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA 
 *
 * Copyright 2007 Manuel Breugelmans <manuel.breugelmans@student.ua.ac.be>
 */

/**
 * Append xUnit framework checker methods!
 * No checker method defined = all tests marked as smelly ...
 *
 * TestEntities: + writeCppTestEntities.rml
 *               + writeJavaTestEntities.rml
 * 
 * eg: appendJavaTE.sh rsf/SingleTCNoAssert.rsf  | \
 *            crocopat ${TSMELLS}/src/AssertionLess.rml
 *
 **/

// fake it
//PRINT "MyTest.testCommand()", ENDL;

TestInvokes(x,y) := PureInvokes(_,x,y) & (TestCommandId(x) | TestHelperId(x));
TCTestInvokes(x,y) := TC(TestInvokes(x,y)); 

CheckerInvokeHelper(invid, tcid) := 
    EX(y, CheckerInvoke(invid, y, _) & TCTestInvokes(tcid,y) & TestHelperId(y));

//AssertionLess(tcnm, file, line) := 
//    EX(tcid, def, fid,
//            TestCommandId(tcid) & 
//            // are there zero asserts used, in self + helper invokee's ?
//            #(CheckerInvoke(x,tcid,y)) = 0 & #(CheckerInvokeHelper(x,tcid)) = 0 &
//                              ^^^ THIS DOESNT WORK. oddly, tcid stays unbound (free)
//            Method(tcid, tcnm) & DefinitionForDeclaration(def, tcid) & 
//            InvokableEntityBelongsToFile(def,fid, line) & File(fid,file));

AssertionLessId("0"); // without this line crocopat spews an assertion
// crocopat: relYacc.y:232: int yyparse(): Assertion `gVariables.find(*yyvsp[-6].rel_String) == gVariables.end()' failed.

FOR tc IN TestCommandId(x) {
    //PRINT tc, " ",  #(CheckerInvoke(x,tc,y)), " " , #(CheckerInvokeHelper(x,tc)), ENDL;;
    IF ((#(CheckerInvoke(x,tc,y)) = 0) & 
        (#(CheckerInvokeHelper(x,tc)) = 0)) {
        // assertionless testcommand detected
        AssertionLessId(x) := AssertionLessId(x) | x = tc;
    }
}

AssertionLess(tcnm, file, line) :=
    EX(tcid, def, fid,
            AssertionLessId(tcid) &
            Method(tcid, tcnm) & DefinitionForDeclaration(def, tcid) &
            InvokableEntityBelongsToFile(def, fid, line) & File(fid, file));

PRINT ["AssertionLess"] AssertionLess(x,y,z);

//  old, slow implementation
// FOR tc IN TestCommandId(x) {
//     // direct checker invokes in testcommand?
//     num := #(CheckerInvoke(x,tc,y));
//     IF ( num = 0 ) {
//         // indirect checker invokes through testhelpers?
//         AssertInHelper(x) := EX(y, CheckerInvoke(x,y,_) & TCTestInvokes(tc,y) & TestHelperId(y));
//         num2 := #(AssertInHelper(x));
//         IF ( num2 = 0 ) { // woops, no assertions!
//             CmdName(x) := Method(tc,x);
//             FileName(x) := EX(y, def, DefinitionForDeclaration(def, tc) & InvokableEntityBelongsToFile(def,y,_) & File(y,x));
//             LineNr(x) := InvokableEntityBelongsToFile(tc, _, x);
//             FOR f IN FileName(x) {
//             FOR l IN LineNr(x)   {
//             FOR i IN CmdName(x)  {
//                 PRINT "AssertionLess;", i, ";", f, ";", l,  ENDL;
//             }}}
//         }
//     }
// }
