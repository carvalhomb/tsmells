/**
 * This file is part of TSmells
 *
 * TSmells is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by the 
 * Free Software Foundation; either version 2 of the License, or (at your 
 * option) any later version.
 *
 * TSmells is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
 * details.
 *
 * You should have received a copy of the GNU General Public License along 
 * with TSmells; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA 
 *
 * Copyright 2007 Manuel Breugelmans <manuel.breugelmans@student.ua.ac.be>
 */


/**
 * Some helper relations
 **/

/**
 * contains a cleaned invoke relation. gets rid of the DefinitionForDeclaration step
 * @col id: invoke ID
 * @col x:  x caller
 * @col y:  y callee
 */
PureInvokes(id,x,y) := 
    EX(u, 
        DefinitionForDeclaration(u,x) & 
        Invokes(id,u,y));
// PRINT ["PureInvokes"] PureInvokes(o,p,q);

Stimulates(id,x,y) := 
        PureInvokes(id,x,y) & 
        TestMethodId(x) &  
        (ProductionMethodId(y) | ProductionFunctionId(y));
// PRINT ["Stimulates"] Stimulates(o,p,q);


/**
 *  Predicate which denotes wheter an assertion has a failure message
 *  @col x: testchecker ID
 */
NoFailureMessage(x) := 
    EX(y,z, 
        TestChecker(x) & 
        (Function(x, y)|Method(x,y)) & 
        CheckerSignature(z,y) & No(z));

/**
 * Checkers invoked in TestCommands/TestHelpers
 * @col z:  invocation ID
 * @col y:  testcommand/helper ID
 * @col x:  testchecker ID
 */
CheckerInvoke(z,y,x) := 
        TestChecker(x) & 
        (TestCommandId(y)|TestHelperId(y)) & 
        PureInvokes(z,y,x);
// PRINT "#CheckerInvoke ", #(CheckerInvoke(o,p,q)), ENDL;
// PRINT ["CheckerInvoke"] CheckerInvoke(o,p,q);

/**
 * contains a cleaned accesses relation. gets rid of the DefinitionForDeclaration step
 * @col id: invoke ID
 * @col x:  x caller
 * @col y:  y attribute
 */
PureAccesses(id,x,y) := 
    EX(u, 
        DefinitionForDeclaration(u,x) & 
        Accesses(id,u,y));


/**
 * Test Command & Helper information.
 * Prebuilt sinced used extensivly when dumping smell stats
 *
 * @col tid:  test command or helper id
 * @col name: fully qualified method name
 * @col file: sourcefile this method is defined in
 * @col line: starting linenumber of the method definition
 **/
TestEntityInfo(tid, name, file, line) :=
    EX(def, fid,
            TestMethodId(tid) &
            Method(tid, name) &
            DefinitionForDeclaration(def, tid) &
            InvokableEntityBelongsToFile(def, fid, line) &
            File(fid, file)
      );

/**
 * Extended test command, helper & fixture information
 * with the owner test case
 *
 * @col tid:  test command or helper id
 * @col name: qualified method name
 * @col file: sourcefile this method is defined in
 * @col line: starting linenumber of the method definition
 * @col tcid: owner testcase id
 * @col case: owner testcase fully qualified name
 **/
TestEntityInfoWithOwner(tid, name, file, line, tcid, case) :=
    TestEntityInfo(tid, name, file, line) &
    MethodBelongsToClass(tid, tcid) &
    Class(tcid, case);

/**
 * All helpers thid invoked directly from command tcid
 **/
ComHelpers(tcid, thid) :=
    TestCommandId(tcid) & TestHelperId(thid) & PureInvokes(_,tcid, thid);
TestHelperInvoke(thid1, thid2) :=
    TestHelperId(thid1) & PureInvokes(_, thid1, thid2) & TestHelperId(thid2);

/**
 * All helpers thid invoked from tcid, directly & indirectly
 * where tcid is a testcommand id
 **/
TransComHelper(tcid, thid) :=
    ComHelpers(tcid, thid) |
    EX(z, ComHelpers(tcid,z) & TC(TestHelperInvoke(z, thid)));
