/**
 * This file is part of Fetch
 *
 * Fetch is free software; you can redistribute it and/or modify it under the 
 * terms of the GNU General Public License as published by the Free Software 
 * Foundation; either version 2 of the License, or (at your option) any later 
 * version.
 *
 * Fetch is distributed in the hope that it will be useful, but WITHOUT ANY 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
 * details.
 *
 * You should have received a copy of the GNU General Public License along 
 * with Fetch; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA 
 *
 * Copyright 2007 Bart Van Rompaey <bart.vanrompaey2@ua.ac.be>
 *
 * Extensivly modified by:
 *                Manuel Breugelmans <manuel.breugelmans@student.ua.ac.be>
 **/


/**
 * Finds all test cases among the classes,
 * both directly as well as indirectly 
 * inheriting from TestCase
 * 
 **/
// retrieve the test framework generic TestCase class
IsTestCase(y) := 
        Class(y,"CppUnit::TestCase");
InheritsFromTestCase(x,y) := 
        IsTestCase(y) & 
        InheritsFrom(_,_,x,y);

// test cases directly inheriting from TestCase
DTestCase(x) := 
        InheritsFromTestCase(x,_);
InheritsFromTestCase(x,y) := 
        DTestCase(y) & 
        InheritsFrom(_,_,x,y);
Closure(x,y) := 
        TC(InheritsFromTestCase(x,y));

// test cases indirectly inheriting from TestCase
ITestCase(x) := 
        Closure(x,_);
TestCaseId(x) := 
        (DTestCase(x) | ITestCase(x)) & 
        !EX(cln, Class(x, cln) & @"^CppUnit::"(cln)); // exclude framework classes

TestMethodId(x) := 
    EX(y, 
        TestCaseId(y) & 
        MethodBelongsToClass(x,y));

// this is temporary, to remove CPPUNIT_TEST and 
// CPPUNIT_TEST_SUITE as methods
CppUnitMacro(x) := 
    EX(mn,
        TestMethodId(x) &
        Method(x, mn) & 
        @"CPPUNIT_TEST"(mn));

TestConstructor(x) :=
   EX(mn,
       TestMethodId(x) &
       Method(x, mn) &
       @"^.*(::)?(.*)\.\2[(].*[)]$"(mn));

TestDestructor(x) :=
   EX(mn,
       TestMethodId(x) &
       Method(x, mn) &
       @"^.*(::)?(.*)\.~\2[(][)]$"(mn));

CppUnitSuiteMethod(x) := 
    EX(mn,
        TestMethodId(x) &
        Method(x, mn) & 
        @"\.suite[(][)]$"(mn));

TestCommandId(x) := 
    EX(mn, 
        TestMethodId(x) & 
        Method(x,mn) & 
        @"[.]test.*[(][)]$"(mn));
TestSetupId(x) := 
    EX(mn, 
        TestMethodId(x) & 
        Method(x,mn) & 
        @"[.]setUp[(][)]$"(mn));
TestTeardownId(x) := 
    EX(mn,
        TestMethodId(x) & 
        Method(x,mn) & 
        @"[.]tearDown[(][)]$"(mn));
TestHelperId(x) := 
        TestMethodId(x) & 
        !TestCommandId(x) & 
        !TestSetupId(x) & 
        !TestTeardownId(x) &
        !CppUnitMacro(x) &
        !TestConstructor(x) &
        !TestDestructor(x) &
        !CppUnitSuiteMethod(x);

Yes("1");
No("0");

/**
 * Assertions
 * @col : denotes if this assertion has a failure message
 * @col : assertion signature
 **/
CheckerSignature("1","CPPUNIT_ASSERT_MESSAGE(std::string,bool)");
CheckerSignature("0","CPPUNIT_ASSERT_DOUBLES_EQUAL(double,double,double)");
CheckerSignature("0","CPPUNIT_ASSERT_EQUAL(T,T)");
CheckerSignature("1","CPPUNIT_ASSERT_EQUAL_MESSAGE(string,T,T)");
CheckerSignature("1","CPPUNIT_FAIL(std::string)");
CheckerSignature("0","CPPUNIT_ASSERT(bool)");


TestChecker(x) := 
    EX(y, 
        Function(x, y) & 
        CheckerSignature(_,y));
ProductionMethodId(x) := 
        Method(x,_) & 
        !TestMethodId(x);
ProductionFunctionId(x) := 
        Function(x,_) & 
        !TestChecker(x); // how to distinguish between 'test-helper-functions'?

// these are needed for backwards compatibility.
// prolly they'll vanish for good, one day
TestCase(x,y) := 
        TestCaseId(x) & 
        Class(x,y);
TestCommand(x,y) := 
        TestCommandId(x) & 
        Method(x,y);
TestSetup(x,y) := 
        TestSetupId(x) & 
        Method(x,y);
TestTeardown(x,y) := 
        TestTeardownId(x) & 
        Method(x,y);
TestHelper(x,y) := 
        TestHelperId(x) & 
        Method(x,y);

// fix to have a definition for declaration for all functions.
DefintionForDeclaration(x,y) := DefinitionForDeclaration(x,y) |
                                (Function(x,_) & !EX(z, DefinitionForDeclaration(z,x)) & x=y);

