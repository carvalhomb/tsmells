#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from master import master

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0.1'
__CHEETAH_versionTuple__ = (2, 0, 1, 'final', 0)
__CHEETAH_genTime__ = 1203703713.0505199
__CHEETAH_genTimestamp__ = 'Fri Feb 22 19:08:33 2008'
__CHEETAH_src__ = 'index.tmpl'
__CHEETAH_srcLastModified__ = 'Mon Feb 11 11:30:39 2008'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class index(master):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        master.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def body(self, **KWS):



        ## CHEETAH: generated from #block body at line 15, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        #  Search
        write('''<center><form method="POST">
\t<input type="hidden" name="go" value="1" />
\t<select name="suite">
''')
        for suite in VFFSL(SL,"suites",True): # generated from line 21, col 3
            write('''\t\t\t<option value="''')
            _v = VFFSL(SL,"suite",True) # '$suite' on line 22, col 19
            if _v is not None: write(_filter(_v, rawExpr='$suite')) # from line 22, col 19.
            write('''">''')
            _v = VFFSL(SL,"suite",True) # '$suite' on line 22, col 27
            if _v is not None: write(_filter(_v, rawExpr='$suite')) # from line 22, col 27.
            write('''</option>
''')
        write(''' \t</select>
\t<input align="center" type="submit" value="RUN" />
</form></center>

''')
        if (not VFFSL(SL,"results",True)): # generated from line 28, col 1
            write('''Tests not run yet
''')
        write('''
''')
        if VFFSL(SL,"results",True): # generated from line 32, col 1
            if VFFSL(SL,"stats",True)[0] == VFFSL(SL,"stats",True)[1] + VFFSL(SL,"stats",True)[4]: # generated from line 33, col 2
                color = "green"
            else: # generated from line 35, col 2
                color = "red"
            write('''
<table align="center" border="1"><tr><td width=400 height=20 bgcolor="''')
            _v = VFFSL(SL,"color",True) # '$color' on line 39, col 71
            if _v is not None: write(_filter(_v, rawExpr='$color')) # from line 39, col 71.
            write('''"></td></tr></table><br>
<center>Time elapsed: ''')
            _v = VFFSL(SL,"secElapsed",True) # '${secElapsed}' on line 40, col 23
            if _v is not None: write(_filter(_v, rawExpr='${secElapsed}')) # from line 40, col 23.
            write('''s ''')
            _v = VFFSL(SL,"usecElapsed",True) # '${usecElapsed}' on line 40, col 38
            if _v is not None: write(_filter(_v, rawExpr='${usecElapsed}')) # from line 40, col 38.
            write('''  </center>
<center>Total: ''')
            _v = VFFSL(SL,"stats",True)[0] # '$stats[0]' on line 41, col 16
            if _v is not None: write(_filter(_v, rawExpr='$stats[0]')) # from line 41, col 16.
            write(''', pass: ''')
            _v = VFFSL(SL,"stats",True)[1] # '$stats[1]' on line 41, col 33
            if _v is not None: write(_filter(_v, rawExpr='$stats[1]')) # from line 41, col 33.
            write(''', fail: ''')
            _v = VFFSL(SL,"stats",True)[2] # '$stats[2]' on line 41, col 50
            if _v is not None: write(_filter(_v, rawExpr='$stats[2]')) # from line 41, col 50.
            write(''', error: ''')
            _v = VFFSL(SL,"stats",True)[3] # '$stats[3]' on line 41, col 68
            if _v is not None: write(_filter(_v, rawExpr='$stats[3]')) # from line 41, col 68.
            write(''', tdd: ''')
            _v = VFFSL(SL,"stats",True)[4] # '$stats[4]' on line 41, col 84
            if _v is not None: write(_filter(_v, rawExpr='$stats[4]')) # from line 41, col 84.
            write('''</center>
<table align="center" width="400" border="1">
''')
            #  Header
            write('''\t<tr>
\t\t<th>test</th>
\t\t<th width="5">result</th>
\t</tr>
''')
            for smell in VFFSL(SL,"results",True): # generated from line 48, col 2
                write('''\t<tr>
\t\t<td align="center" colspan="2"><b>''')
                _v = VFFSL(SL,"smell",True)[0] # '$smell[0]' on line 50, col 37
                if _v is not None: write(_filter(_v, rawExpr='$smell[0]')) # from line 50, col 37.
                write('''</b> cpp</td>
    </tr>
''')
                for test  in VFFSL(SL,"smell",True)[1]: # generated from line 52, col 2
                    write('''\t<tr>
\t\t<td>+ <a href="''')
                    _v = VFFSL(SL,"test.name",True) # '${test.name}' on line 54, col 18
                    if _v is not None: write(_filter(_v, rawExpr='${test.name}')) # from line 54, col 18.
                    write('''cpp">''')
                    _v = VFFSL(SL,"test.name",True) # '$test.name' on line 54, col 35
                    if _v is not None: write(_filter(_v, rawExpr='$test.name')) # from line 54, col 35.
                    write('''</a></td>
\t\t<td width="5" bgcolor="''')
                    _v = VFFSL(SL,"test.color",True) # '$test.color' on line 55, col 26
                    if _v is not None: write(_filter(_v, rawExpr='$test.color')) # from line 55, col 26.
                    write('''"></td>
    </tr>
''')
                write('''\t<tr>
\t\t<td align="center" colspan="2"><b>''')
                _v = VFFSL(SL,"smell",True)[0] # '$smell[0]' on line 59, col 37
                if _v is not None: write(_filter(_v, rawExpr='$smell[0]')) # from line 59, col 37.
                write('''</b> java</td>
\t</tr>
''')
                for test  in VFFSL(SL,"smell",True)[2]: # generated from line 61, col 2
                    write('''\t<tr>
\t\t<td>+ <a href="''')
                    _v = VFFSL(SL,"test.name",True) # '${test.name}' on line 63, col 18
                    if _v is not None: write(_filter(_v, rawExpr='${test.name}')) # from line 63, col 18.
                    write('''java">''')
                    _v = VFFSL(SL,"test.name",True) # '$test.name' on line 63, col 36
                    if _v is not None: write(_filter(_v, rawExpr='$test.name')) # from line 63, col 36.
                    write('''</a></td>
\t\t<td width="5" bgcolor="''')
                    _v = VFFSL(SL,"test.color",True) # '$test.color' on line 64, col 26
                    if _v is not None: write(_filter(_v, rawExpr='$test.color')) # from line 64, col 26.
                    write('''"></td>
    </tr>
''')
            write('''</table>

''')
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        #  Index page
        write('''
''')
        #  Manuel Breugelmans <manuel.breugelmans@student.ua.ac.be>
        write('''

''')
        #  Default attributes
        write('''
''')
        self.body(trans=trans)
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    results = None

    stats = None

    color = None

    suites = None

    secElapsed = None

    usecElapsed = None

    _mainCheetahMethod_for_index= 'writeBody'

## END CLASS DEFINITION

if not hasattr(index, '_initCheetahAttributes'):
    templateAPIClass = getattr(index, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(index)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=index()).run()


