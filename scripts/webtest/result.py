#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from master import master

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0.1'
__CHEETAH_versionTuple__ = (2, 0, 1, 'final', 0)
__CHEETAH_genTime__ = 1204645204.5543971
__CHEETAH_genTimestamp__ = 'Tue Mar  4 16:40:04 2008'
__CHEETAH_src__ = 'result.tmpl'
__CHEETAH_srcLastModified__ = 'Sun Feb 17 19:52:06 2008'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class result(master):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        master.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def body(self, **KWS):



        ## CHEETAH: generated from #block body at line 9, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        if VFFSL(SL,"result",True) == None: # generated from line 11, col 1
            write('''\tunknown test or not run yet
''')
        else: # generated from line 13, col 1
            write('''
''')
            #  Display test name
            write('''<h2>''')
            _v = VFFSL(SL,"result.name",True) # '$result.name' on line 16, col 5
            if _v is not None: write(_filter(_v, rawExpr='$result.name')) # from line 16, col 5.
            write('''</h2>

<b>command</b>
<table bgcolor=''')
            _v = VFFSL(SL,"color",True) # '$color' on line 19, col 16
            if _v is not None: write(_filter(_v, rawExpr='$color')) # from line 19, col 16.
            write(''' width=''')
            _v = VFFSL(SL,"width",True) # '$width' on line 19, col 29
            if _v is not None: write(_filter(_v, rawExpr='$width')) # from line 19, col 29.
            write('''><tr><td>''')
            _v = VFFSL(SL,"result.cmd",True) # '$result.cmd' on line 19, col 44
            if _v is not None: write(_filter(_v, rawExpr='$result.cmd')) # from line 19, col 44.
            write('''</td></tr></table>
<br>
<b>expected</b>
<table bgcolor=''')
            _v = VFFSL(SL,"color",True) # '$color' on line 22, col 16
            if _v is not None: write(_filter(_v, rawExpr='$color')) # from line 22, col 16.
            write(''' width=''')
            _v = VFFSL(SL,"width",True) # '$width' on line 22, col 29
            if _v is not None: write(_filter(_v, rawExpr='$width')) # from line 22, col 29.
            write('''><tr><td>''')
            _v = VFFSL(SL,"result.exp",True) # '$result.exp' on line 22, col 44
            if _v is not None: write(_filter(_v, rawExpr='$result.exp')) # from line 22, col 44.
            write('''</td></tr></table>
<br>
<b>got</b>
<table bgcolor=''')
            _v = VFFSL(SL,"color",True) # '$color' on line 25, col 16
            if _v is not None: write(_filter(_v, rawExpr='$color')) # from line 25, col 16.
            write(''' width=''')
            _v = VFFSL(SL,"width",True) # '$width' on line 25, col 29
            if _v is not None: write(_filter(_v, rawExpr='$width')) # from line 25, col 29.
            write('''><tr><td>''')
            _v = VFFSL(SL,"result.got",True) # '$result.got' on line 25, col 44
            if _v is not None: write(_filter(_v, rawExpr='$result.got')) # from line 25, col 44.
            write('''</td></tr></table>
<br>
<b>stderr</b>
<table bgcolor=''')
            _v = VFFSL(SL,"color",True) # '$color' on line 28, col 16
            if _v is not None: write(_filter(_v, rawExpr='$color')) # from line 28, col 16.
            write(''' width=''')
            _v = VFFSL(SL,"width",True) # '$width' on line 28, col 29
            if _v is not None: write(_filter(_v, rawExpr='$width')) # from line 28, col 29.
            write('''><tr><td>''')
            _v = VFFSL(SL,"result.err",True) # '$result.err' on line 28, col 44
            if _v is not None: write(_filter(_v, rawExpr='$result.err')) # from line 28, col 44.
            write('''</td></tr></table>
<br>
<br><b>what</b>
<table bgcolor=''')
            _v = VFFSL(SL,"color",True) # '$color' on line 31, col 16
            if _v is not None: write(_filter(_v, rawExpr='$color')) # from line 31, col 16.
            write(''' width=''')
            _v = VFFSL(SL,"width",True) # '$width' on line 31, col 29
            if _v is not None: write(_filter(_v, rawExpr='$width')) # from line 31, col 29.
            write('''><tr><td>''')
            _v = VFFSL(SL,"result.what",True) # '$result.what' on line 31, col 44
            if _v is not None: write(_filter(_v, rawExpr='$result.what')) # from line 31, col 44.
            write('''</td></tr></table>
<br>
<b>testdata</b><br>
''')
            for src in VFFSL(SL,"result.sources",True): # generated from line 34, col 1
                write('''\t''')
                _v = VFFSL(SL,"src",True)[0] # '$src[0]' on line 35, col 2
                if _v is not None: write(_filter(_v, rawExpr='$src[0]')) # from line 35, col 2.
                write('''
\t<table bgcolor=''')
                _v = VFFSL(SL,"color",True) # '$color' on line 36, col 17
                if _v is not None: write(_filter(_v, rawExpr='$color')) # from line 36, col 17.
                write(''' width=''')
                _v = VFFSL(SL,"width",True) # '$width' on line 36, col 30
                if _v is not None: write(_filter(_v, rawExpr='$width')) # from line 36, col 30.
                write('''><tr><td>''')
                _v = VFFSL(SL,"src",True)[1] # '$src[1]' on line 36, col 45
                if _v is not None: write(_filter(_v, rawExpr='$src[1]')) # from line 36, col 45.
                write('''</td></tr></table>
\t<br>
''')
            write('''
''')
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        #  Result page
        write('''


''')
        self.body(trans=trans)
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    result = None

    color = "#666699"

    width = "600"

    _mainCheetahMethod_for_result= 'writeBody'

## END CLASS DEFINITION

if not hasattr(result, '_initCheetahAttributes'):
    templateAPIClass = getattr(result, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(result)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=result()).run()


