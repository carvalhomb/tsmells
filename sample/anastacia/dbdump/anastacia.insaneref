TestCase.java:2:	static void     assertEquals(boolean expected, boolean actual){}
TestCase.java:3:	static void     assertEquals(byte expected, byte actual){}
TestCase.java:4:	static void     assertEquals(char expected, char actual){}
TestCase.java:5:	static void     assertEquals(double expected, double actual, double delta){}
TestCase.java:6:	static void     assertEquals(float expected, float actual, float delta){}
TestCase.java:7:	static void     assertEquals(int expected, int actual){}
TestCase.java:8:	static void     assertEquals(long expected, long actual){}
TestCase.java:9:	static void     assertEquals(java.lang.Object expected, java.lang.Object actual){}
TestCase.java:10:	static void     assertEquals(short expected, short actual){}
TestCase.java:11:	static void     assertEquals(java.lang.String message, boolean expected, boolean actual){}
TestCase.java:12:	static void     assertEquals(java.lang.String message, byte expected, byte actual){}
TestCase.java:13:	static void     assertEquals(java.lang.String message, char expected, char actual){}
TestCase.java:14:	static void     assertEquals(java.lang.String message, double expected, double actual, double delta){}
TestCase.java:15:	static void     assertEquals(java.lang.String message, float expected, float actual, float delta){}
TestCase.java:16:	static void     assertEquals(java.lang.String message, int expected, int actual){}
TestCase.java:17:	static void     assertEquals(java.lang.String message, long expected, long actual){}
TestCase.java:18:	static void     assertEquals(java.lang.String message, java.lang.Object expected, java.lang.Object actual){}
TestCase.java:19:	static void     assertEquals(java.lang.String message, short expected, short actual){}
TestCase.java:20:	static void     assertEquals(java.lang.String expected, java.lang.String actual){}
TestCase.java:21:	static void     assertEquals(java.lang.String message, java.lang.String expected, java.lang.String actual){}
TestCase.java:22:	static void     assertFalse(boolean condition){}
TestCase.java:23:	static void     assertFalse(java.lang.String message, boolean condition){}
TestCase.java:24:	static void     assertNotNull(java.lang.Object object){}
TestCase.java:25:	static void     assertNotNull(java.lang.String message, java.lang.Object object){}
TestCase.java:26:	static void     assertNotSame(java.lang.Object expected, java.lang.Object actual){}
TestCase.java:27:	static void     assertNotSame(java.lang.String message, java.lang.Object expected, java.lang.Object actual){}
TestCase.java:28:	static void     assertNull(java.lang.Object object){}
TestCase.java:29:	static void     assertNull(java.lang.String message, java.lang.Object object){}
TestCase.java:30:	static void     assertSame(java.lang.Object expected, java.lang.Object actual){}
TestCase.java:31:	static void     assertSame(java.lang.String message, java.lang.Object expected, java.lang.Object actual){}
TestCase.java:32:	static void     assertTrue(boolean condition){}
TestCase.java:33:	static void     assertTrue(java.lang.String message, boolean condition){}
TestCase.java:34:	static void     fail(){}
TestCase.java:35:	static void     fail(java.lang.String message){}
TestCase.java:36:	private static void     failNotEquals(java.lang.String message, java.lang.Object expected, java.lang.Object 	actual){}
TestCase.java:37:	private static void     failNotSame(java.lang.String message, java.lang.Object expected, java.lang.Object 	actual){}
TestCase.java:38:	private static void     failSame(java.lang.String message){}
TestCase.java:39:	static java.lang.String       format(java.lang.String message, java.lang.Object expected, java.lang.Object actual) {}
gui/Preferences.java:57:	public Preferences(AProtocol p) {
gui/Preferences.java:61:		new JFrame(             );
gui/Preferences.java:62:		setSize(300, 200);
gui/Preferences.java:63:		setLocation(200,200);
gui/Preferences.java:65:		panePreferences = new JPanel();
gui/Preferences.java:66:		paneError = new JPanel();
gui/Preferences.java:68:		addPreferencesWidgets();
gui/Preferences.java:74:	private void addPreferencesWidgets() {
gui/Preferences.java:75:		labelServer = new JLabel(        );
gui/Preferences.java:76:		labelPort = new JLabel(      );
gui/Preferences.java:77:		labelLogin = new JLabel(       );
gui/Preferences.java:78:		labelPassword = new JLabel(          );
gui/Preferences.java:79:		labelError = new JLabel(  );
gui/Preferences.java:81:		textServer = new JTextField(fModel.getServer());
gui/Preferences.java:82:		textPort = new JTextField(String.valueOf(fModel.getPort()));
gui/Preferences.java:83:		textLogin = new JTextField(fModel.getLoginName());
gui/Preferences.java:84:		textPassword = new JPasswordField();
gui/Preferences.java:86:		buttonOk = new JButton(    );
gui/Preferences.java:88:		buttonOk.setActionCommand(    );
gui/Preferences.java:89:		buttonOk.addActionListener(this);
gui/Preferences.java:91:		panePreferences.setBorder(BorderFactory.createEmptyBorder(
gui/Preferences.java:97:        panePreferences.setLayout(new GridLayout(0, 2));
gui/Preferences.java:99:		panePreferences.add(labelServer);
gui/Preferences.java:100:		panePreferences.add(textServer);
gui/Preferences.java:101:		panePreferences.add(labelPort);
gui/Preferences.java:102:		panePreferences.add(textPort);
gui/Preferences.java:103:		panePreferences.add(labelLogin);
gui/Preferences.java:104:		panePreferences.add(textLogin);
gui/Preferences.java:105:		panePreferences.add(labelPassword);
gui/Preferences.java:106:		panePreferences.add(textPassword);
gui/Preferences.java:107:		panePreferences.add(buttonOk);
gui/Preferences.java:109:		paneError.add(labelError);
gui/Preferences.java:111:		getContentPane().add(panePreferences, BorderLayout.CENTER);
gui/Preferences.java:112:		getContentPane().add(paneError, BorderLayout.SOUTH);
gui/Preferences.java:113:		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);	                          
gui/Preferences.java:114:		pack();
gui/Preferences.java:115:		setVisible(false);	
gui/Preferences.java:118:	public boolean prefsFilledIn() {
gui/Preferences.java:122:	public void setPrefsFilledIn(boolean prefsFilledIn) {
gui/Preferences.java:129:	public void actionPerformed(ActionEvent e) {
gui/Preferences.java:132:		if(e.getActionCommand().equals(    )) {
gui/Preferences.java:133:			if(textServer.getText().equals(  )||textPort.getText().equals(  )
gui/Preferences.java:134:				||textLogin.getText().equals(  )||textPassword.getPassword().equals(  )) {
gui/Preferences.java:135:					labelError.setText(                         );
gui/Preferences.java:136:					System.out.println(                        );
gui/Preferences.java:140:				fModel.setServer((String)textServer.getText());
gui/Preferences.java:141:				fModel.setPort((int)(Double.parseDouble(textPort.getText())));
gui/Preferences.java:142:				fModel.setLoginName((String)textLogin.getText());
gui/Preferences.java:144:				if(fModel instanceof ICQProtocol) {
gui/Preferences.java:145:					fModel.setEncPasswd(Utils.ICQEncryptPass(String.valueOf(textPassword.getPassword())));
gui/Preferences.java:147:				else if(fModel instanceof MSNProtocol) {
gui/Preferences.java:148:					fModel.setEncPasswd(String.valueOf(textPassword.getPassword()));
gui/Preferences.java:150:				else if(fModel instanceof YahooProtocol) {
gui/Preferences.java:151:					fModel.setEncPasswd(String.valueOf(textPassword.getPassword()));
gui/Preferences.java:154:					System.out.println(                                                     );
gui/Preferences.java:156:				labelError.setText(  );
gui/Preferences.java:158:				setVisible(false);
gui/CustomCellRenderer.java:45:		public CustomCellRenderer(String htmlText, String login) {
gui/CustomCellRenderer.java:46:			super(htmlText);
gui/CustomCellRenderer.java:47:			this.setToolTipText(login);
gui/CustomCellRenderer.java:50:		private String insertEmoticons(String text) {
gui/CustomCellRenderer.java:51:		StringTokenizer st = new StringTokenizer(text);
gui/CustomCellRenderer.java:52:   		Vector tokens = new Vector();
gui/CustomCellRenderer.java:54:   		while (st.hasMoreTokens()) {
gui/CustomCellRenderer.java:55:    		tokens.add(st.nextToken());
gui/CustomCellRenderer.java:58:   		for (int i = 0; i < tokens.size(); ++i) {
gui/CustomCellRenderer.java:59:   			String s = (String)tokens.elementAt(i);
gui/CustomCellRenderer.java:61:			String emoticon = new EmoticonsAndSounds().getEmoticon(s);
gui/CustomCellRenderer.java:63:   			if (emoticon != null) {
gui/CustomCellRenderer.java:65:   				tokens.removeElementAt(i);
gui/CustomCellRenderer.java:66:   				tokens.insertElementAt(emoticon, i);
gui/CustomCellRenderer.java:70:   		StringBuffer sBuf = new StringBuffer();
gui/CustomCellRenderer.java:71:   		for (int i = 0; i < tokens.size(); ++i) {
gui/CustomCellRenderer.java:72:   			sBuf.append((String)tokens.elementAt(i));
gui/CustomCellRenderer.java:73:   			sBuf.append(   );
gui/CustomCellRenderer.java:76:   		return sBuf.toString();
gui/CustomCellRenderer.java:81:        public Component getTableCellRendererComponent(JTable table, Object value,
gui/CustomCellRenderer.java:84:            if (isSelected) {
gui/CustomCellRenderer.java:88:            if (hasFocus) {
gui/CustomCellRenderer.java:92:            String login = (String)table.getValueAt(rowIndex, vColIndex-1);
gui/CustomCellRenderer.java:96:    		String htmlText =                           + this.insertEmoticons(value.toString()) +                 ;
gui/CustomCellRenderer.java:97:    		setText(htmlText);
gui/CustomCellRenderer.java:100:			return new CustomCellRenderer(htmlText, login);
gui/CustomCellRenderer.java:104:        public void validate() {}
gui/CustomCellRenderer.java:105:        public void revalidate() {}
gui/CustomCellRenderer.java:106:        protected void firePropertyChange(String propertyName, Object oldValue, Object newValue) {}
gui/CustomCellRenderer.java:107:        public void firePropertyChange(String propertyName, boolean oldValue, boolean newValue) {}
gui/TableSorter.java:44:    Vector          sortingColumns = new Vector();
gui/TableSorter.java:48:    public TableSorter() {
gui/TableSorter.java:52:    public TableSorter(TableModel model) {
gui/TableSorter.java:53:        setModel(model);
gui/TableSorter.java:56:    public void setModel(TableModel model) {
gui/TableSorter.java:57:        super.setModel(model); 
gui/TableSorter.java:58:        reallocateIndexes(); 
gui/TableSorter.java:61:    public int compareRowsByColumn(int row1, int row2, int column) {
gui/TableSorter.java:62:        Class type = model.getColumnClass(column);
gui/TableSorter.java:67:        Object o1 = data.getValueAt(row1, column);
gui/TableSorter.java:68:        Object o2 = data.getValueAt(row2, column); 
gui/TableSorter.java:71:        if (o1 == null && o2 == null) {
gui/TableSorter.java:73:        } else if (o1 == null) {                                      
gui/TableSorter.java:75:        } else if (o2 == null) { 
gui/TableSorter.java:88:        if (type.getSuperclass() == java.lang.Number.class) {
gui/TableSorter.java:89:            Number n1 = (Number)data.getValueAt(row1, column);
gui/TableSorter.java:90:            double d1 = n1.doubleValue();
gui/TableSorter.java:91:            Number n2 = (Number)data.getValueAt(row2, column);
gui/TableSorter.java:92:            double d2 = n2.doubleValue();
gui/TableSorter.java:94:            if (d1 < d2) {
gui/TableSorter.java:96:            } else if (d1 > d2) {
gui/TableSorter.java:101:        } else if (type == java.util.Date.class) {
gui/TableSorter.java:102:            Date d1 = (Date)data.getValueAt(row1, column);
gui/TableSorter.java:103:            long n1 = d1.getTime();
gui/TableSorter.java:104:            Date d2 = (Date)data.getValueAt(row2, column);
gui/TableSorter.java:105:            long n2 = d2.getTime();
gui/TableSorter.java:107:            if (n1 < n2) {
gui/TableSorter.java:109:            } else if (n1 > n2) {
gui/TableSorter.java:114:        } else if (type == String.class) {
gui/TableSorter.java:115:            String s1 = (String)data.getValueAt(row1, column);
gui/TableSorter.java:116:            String s2    = (String)data.getValueAt(row2, column);
gui/TableSorter.java:117:            int result = s1.compareTo(s2);
gui/TableSorter.java:119:            if (result < 0) {
gui/TableSorter.java:121:            } else if (result > 0) {
gui/TableSorter.java:126:        } else if (type == Boolean.class) {
gui/TableSorter.java:127:            Boolean bool1 = (Boolean)data.getValueAt(row1, column);
gui/TableSorter.java:128:            boolean b1 = bool1.booleanValue();
gui/TableSorter.java:129:            Boolean bool2 = (Boolean)data.getValueAt(row2, column);
gui/TableSorter.java:130:            boolean b2 = bool2.booleanValue();
gui/TableSorter.java:132:            if (b1 == b2) {
gui/TableSorter.java:134:            } else if (b1) {                       
gui/TableSorter.java:140:            Object v1 = data.getValueAt(row1, column);
gui/TableSorter.java:141:            String s1 = v1.toString();
gui/TableSorter.java:142:            Object v2 = data.getValueAt(row2, column);
gui/TableSorter.java:143:            String s2 = v2.toString();
gui/TableSorter.java:144:            int result = s1.compareTo(s2);
gui/TableSorter.java:146:            if (result < 0) {
gui/TableSorter.java:148:            } else if (result > 0) {
gui/TableSorter.java:156:    public int compare(int row1, int row2) {
gui/TableSorter.java:158:        for (int level = 0; level < sortingColumns.size(); level++) {
gui/TableSorter.java:159:            Integer column = (Integer)sortingColumns.elementAt(level);
gui/TableSorter.java:160:            int result = compareRowsByColumn(row1, row2, column.intValue());
gui/TableSorter.java:161:            if (result != 0) {
gui/TableSorter.java:168:    public void reallocateIndexes() {
gui/TableSorter.java:169:        int rowCount = model.getRowCount();
gui/TableSorter.java:176:        for (int row = 0; row < rowCount; row++) {
gui/TableSorter.java:181:    public void tableChanged(TableModelEvent e) {
gui/TableSorter.java:183:        reallocateIndexes();
gui/TableSorter.java:185:        super.tableChanged(e);
gui/TableSorter.java:188:    public void checkModel() {
gui/TableSorter.java:189:        if (indexes.length != model.getRowCount()) {
gui/TableSorter.java:190:            System.err.println(                                           );
gui/TableSorter.java:194:    public void sort(Object sender) {
gui/TableSorter.java:195:        checkModel();
gui/TableSorter.java:200:        shuttlesort((int[])indexes.clone(), indexes, 0, indexes.length);
gui/TableSorter.java:204:    public void n2sort() {
gui/TableSorter.java:205:        for (int i = 0; i < getRowCount(); i++) {
gui/TableSorter.java:206:            for (int j = i+1; j < getRowCount(); j++) {
gui/TableSorter.java:207:                if (compare(indexes[i], indexes[j]) == -1) {
gui/TableSorter.java:208:                    swap(i, j);
gui/TableSorter.java:221:    public void shuttlesort(int from[], int to[], int low, int high) {
gui/TableSorter.java:222:        if (high - low < 2) {
gui/TableSorter.java:225:        int middle = (low + high)/2;
gui/TableSorter.java:226:        shuttlesort(to, from, low, middle);
gui/TableSorter.java:227:        shuttlesort(to, from, middle, high);
gui/TableSorter.java:247:        if (high - low >= 4 && compare(from[middle-1], from[middle]) <= 0) {
gui/TableSorter.java:248:            for (int i = low; i < high; i++) {
gui/TableSorter.java:256:        for (int i = low; i < high; i++) {
gui/TableSorter.java:257:            if (q >= high || (p < middle && compare(from[p], from[q]) <= 0)) {
gui/TableSorter.java:266:    public void swap(int i, int j) {
gui/TableSorter.java:275:    public Object getValueAt(int aRow, int aColumn) {
gui/TableSorter.java:276:        checkModel();
gui/TableSorter.java:277:        return model.getValueAt(indexes[aRow], aColumn);
gui/TableSorter.java:280:    public void setValueAt(Object aValue, int aRow, int aColumn) {
gui/TableSorter.java:281:        checkModel();
gui/TableSorter.java:282:        model.setValueAt(aValue, indexes[aRow], aColumn);
gui/TableSorter.java:285:    public void sortByColumn(int column) {
gui/TableSorter.java:286:        sortByColumn(column, true);
gui/TableSorter.java:289:    public void sortByColumn(int column, boolean ascending) {
gui/TableSorter.java:291:        sortingColumns.removeAllElements();
gui/TableSorter.java:292:        sortingColumns.addElement(new Integer(column));
gui/TableSorter.java:293:        sort(this);
gui/TableSorter.java:294:        super.tableChanged(new TableModelEvent(this)); 
gui/TableSorter.java:300:    public void addMouseListenerToHeaderInTable(JTable table) { 
gui/TableSorter.java:303:        tableView.setColumnSelectionAllowed(false); 
gui/TableSorter.java:304:        MouseAdapter listMouseListener = new MouseAdapter() {
gui/TableSorter.java:305:            public void mouseClicked(MouseEvent e) {
gui/TableSorter.java:306:                TableColumnModel columnModel = tableView.getColumnModel();
gui/TableSorter.java:307:                int viewColumn = columnModel.getColumnIndexAtX(e.getX()); 
gui/TableSorter.java:308:                int column = tableView.convertColumnIndexToModel(viewColumn); 
gui/TableSorter.java:309:                if (e.getClickCount() == 1 && column != -1) {
gui/TableSorter.java:315:                    sorter.sortByColumn(column, ascending); 
gui/TableSorter.java:320:        JTableHeader th = tableView.getTableHeader(); 
gui/TableSorter.java:321:        th.addMouseListener(listMouseListener); 
gui/TableMap.java:43:    public TableModel getModel() {
gui/TableMap.java:47:    public void setModel(TableModel model) {
gui/TableMap.java:49:        model.addTableModelListener(this); 
gui/TableMap.java:55:    public Object getValueAt(int aRow, int aColumn) {
gui/TableMap.java:56:        return model.getValueAt(aRow, aColumn); 
gui/TableMap.java:59:    public void setValueAt(Object aValue, int aRow, int aColumn) {
gui/TableMap.java:60:        model.setValueAt(aValue, aRow, aColumn); 
gui/TableMap.java:63:    public int getRowCount() {
gui/TableMap.java:64:        return (model == null) ? 0 : model.getRowCount(); 
gui/TableMap.java:67:    public int getColumnCount() {
gui/TableMap.java:68:        return (model == null) ? 0 : model.getColumnCount(); 
gui/TableMap.java:71:    public String getColumnName(int aColumn) {
gui/TableMap.java:76:    public Class getColumnClass(int aColumn) {
gui/TableMap.java:77:    	return model.getColumnClass(aColumn); 
gui/TableMap.java:80:    public boolean isCellEditable(int row, int column) { 
gui/TableMap.java:81:         return model.isCellEditable(row, column); 
gui/TableMap.java:87:    public void tableChanged(TableModelEvent e) {
gui/TableMap.java:88:        fireTableChanged(e);
gui/View.java:99:	public View(Protocols aManager) {
gui/View.java:101:			UIManager.setLookAndFeel( UIManager.getSystemLookAndFeelClassName() );
gui/View.java:102:		} catch (Exception e) { }
gui/View.java:104:		icon[0] = new ImageIcon(                          );
gui/View.java:105:		icon[1]	= new ImageIcon(                        );
gui/View.java:106:		icon[2] = new ImageIcon(                      );
gui/View.java:107:		icon[3]	= new ImageIcon(                           );
gui/View.java:108:		icon[4] = new ImageIcon(                          );
gui/View.java:109:		icon[5] = new ImageIcon(                          );
gui/View.java:110:		icon[6] = new ImageIcon(                          );
gui/View.java:111:		icon[7] = new ImageIcon(                          );
gui/View.java:112:		icon[8] = new ImageIcon(                           );
gui/View.java:113:		icon[9] = new ImageIcon(                       );
gui/View.java:114:		icon[10] = new ImageIcon(                       );
gui/View.java:115:		icon[11] = new ImageIcon(                         );
gui/View.java:116:		icon[12] = new ImageIcon(                                );
gui/View.java:120:		mess = new JFrame(           );
gui/View.java:121:		mess.setIconImage(icon[3].getImage());
gui/View.java:124:		mess.setSize(new Dimension(170, 400));
gui/View.java:125:		mess.setLocation(300,300);
gui/View.java:127:		paneMess = new JPanel();
gui/View.java:128:		boxList = new Vector();
gui/View.java:129:		ICQPrefs = new Preferences(aManager.getProtocol(0));
gui/View.java:130:		MSNPrefs = new Preferences(aManager.getProtocol(1));
gui/View.java:131:		YahooPrefs = new Preferences(aManager.getProtocol(2));
gui/View.java:132:		ICQAddUser = new AddBuddy(aManager.getProtocol(0));
gui/View.java:133:		MSNAddUser = new AddBuddy(aManager.getProtocol(1));
gui/View.java:134:		YahooAddUser = new AddBuddy(aManager.getProtocol(2));
gui/View.java:136:		mess.setSize(new Dimension(200, 400));
gui/View.java:137:		addMessWidgets();
gui/View.java:140:	public void addMessWidgets() {
gui/View.java:141:		menuBar = new JMenuBar();
gui/View.java:144:		MSNmenu = new JMenu(     );
gui/View.java:145:		menuBar.add(MSNmenu);
gui/View.java:146:		ICQmenu = new JMenu(     );
gui/View.java:147:		menuBar.add(ICQmenu);
gui/View.java:148:		Yahoomenu = new JMenu(       );
gui/View.java:149:		menuBar.add(Yahoomenu);
gui/View.java:150:		menuHelp = new JMenu(      );
gui/View.java:151:		menuBar.add(menuHelp);
gui/View.java:152:		menuQuit = new JMenu(      );
gui/View.java:153:		JMenuItem quit = new JMenuItem(      );
gui/View.java:154:		quit.setActionCommand(      );
gui/View.java:155:		quit.addActionListener(this);
gui/View.java:156:		menuQuit.add(quit);
gui/View.java:157:		menuBar.add(menuQuit);
gui/View.java:158:		ICQMenuChangeStatus = new JMenu(               );
gui/View.java:159:		MSNMenuChangeStatus = new JMenu(               );
gui/View.java:160:		YahooMenuChangeStatus = new JMenu(               );
gui/View.java:163:		ICQItemAddUser = new JMenuItem(              );
gui/View.java:164:		ICQItemLogin = new JMenuItem(       );
gui/View.java:165:		ICQItemQuit = new JMenuItem(        );
gui/View.java:167:		ICQItemOnline = new JMenuItem(        );
gui/View.java:168:		ICQItemAway = new JMenuItem(      );
gui/View.java:169:		ICQItemNA = new JMenuItem(     );
gui/View.java:170:		ICQItemDND = new JMenuItem(     );
gui/View.java:172:		MSNItemAddUser = new JMenuItem(              );
gui/View.java:173:		MSNItemLogin = new JMenuItem(       );
gui/View.java:174:		MSNItemQuit = new JMenuItem(        );
gui/View.java:176:		MSNItemOnline = new JMenuItem(        );
gui/View.java:177:		MSNItemAway = new JMenuItem(      );
gui/View.java:178:		MSNItemBusy = new JMenuItem(      );
gui/View.java:179:		MSNItemBRB = new JMenuItem(               );
gui/View.java:180:		MSNItemPhone = new JMenuItem(              );
gui/View.java:181:		MSNItemLunch = new JMenuItem(              );
gui/View.java:183:		YahooItemAddUser = new JMenuItem(              );
gui/View.java:184:		YahooItemLogin = new JMenuItem(       );
gui/View.java:185:		YahooItemQuit = new JMenuItem(        );
gui/View.java:187:		YahooItemOnline = new JMenuItem(        );
gui/View.java:190:		ICQmenu.add(ICQMenuChangeStatus);
gui/View.java:191:		ICQmenu.add(ICQItemAddUser);
gui/View.java:192:		ICQmenu.add(ICQItemLogin);
gui/View.java:193:		ICQmenu.add(ICQItemQuit);
gui/View.java:195:		ICQMenuChangeStatus.add(ICQItemOnline);
gui/View.java:196:		ICQMenuChangeStatus.add(ICQItemAway);
gui/View.java:197:		ICQMenuChangeStatus.add(ICQItemNA);
gui/View.java:198:		ICQMenuChangeStatus.add(ICQItemDND);
gui/View.java:200:		MSNmenu.add(MSNMenuChangeStatus);
gui/View.java:201:		MSNmenu.add(MSNItemAddUser);
gui/View.java:202:		MSNmenu.add(MSNItemLogin);
gui/View.java:203:		MSNmenu.add(MSNItemQuit);
gui/View.java:205:		MSNMenuChangeStatus.add(MSNItemOnline);
gui/View.java:206:		MSNMenuChangeStatus.add(MSNItemAway);
gui/View.java:207:		MSNMenuChangeStatus.add(MSNItemBusy);
gui/View.java:208:		MSNMenuChangeStatus.add(MSNItemBRB);
gui/View.java:209:		MSNMenuChangeStatus.add(MSNItemPhone);
gui/View.java:210:		MSNMenuChangeStatus.add(MSNItemLunch);
gui/View.java:212:		Yahoomenu.add(YahooMenuChangeStatus);
gui/View.java:213:		Yahoomenu.add(YahooItemAddUser);
gui/View.java:214:		Yahoomenu.add(YahooItemLogin);
gui/View.java:215:		Yahoomenu.add(YahooItemQuit);
gui/View.java:217:		YahooMenuChangeStatus.add(YahooItemOnline);
gui/View.java:220:		itemAbout = new JMenuItem(       );
gui/View.java:221:		itemDumpOn = new JMenuItem(         );
gui/View.java:222:		itemDumpOff = new JMenuItem(          );		
gui/View.java:224:		menuHelp.add(itemAbout);
gui/View.java:225:		menuHelp.add(itemDumpOn);
gui/View.java:226:		menuHelp.add(itemDumpOff);
gui/View.java:228:		ICQItemOnline.setActionCommand(                 );
gui/View.java:229:		ICQItemAway.setActionCommand(               );
gui/View.java:230:		ICQItemNA.setActionCommand(             );
gui/View.java:231:		ICQItemDND.setActionCommand(              );
gui/View.java:232:		ICQItemAddUser.setActionCommand(            );
gui/View.java:233:		ICQItemLogin.setActionCommand(          );
gui/View.java:234:		ICQItemQuit.setActionCommand(         );
gui/View.java:236:		ICQItemOnline.addActionListener(this);
gui/View.java:237:		ICQItemAway.addActionListener(this);
gui/View.java:238:		ICQItemNA.addActionListener(this);
gui/View.java:239:		ICQItemDND.addActionListener(this);
gui/View.java:240:		ICQItemAddUser.addActionListener(this);
gui/View.java:241:		ICQItemLogin.addActionListener(this);
gui/View.java:242:		ICQItemQuit.addActionListener(this);
gui/View.java:244:		MSNItemAddUser.setActionCommand(            );
gui/View.java:245:		MSNItemOnline.setActionCommand(                 );
gui/View.java:246:		MSNItemAway.setActionCommand(               );
gui/View.java:247:		MSNItemBRB.setActionCommand(              );
gui/View.java:248:		MSNItemBusy.setActionCommand(               );
gui/View.java:249:		MSNItemPhone.setActionCommand(                );
gui/View.java:250:		MSNItemLunch.setActionCommand(                );
gui/View.java:251:		MSNItemLogin.setActionCommand(          );
gui/View.java:252:		MSNItemQuit.setActionCommand(         );
gui/View.java:254:		MSNItemAddUser.addActionListener(this);
gui/View.java:255:		MSNItemOnline.addActionListener(this);
gui/View.java:256:		MSNItemAway.addActionListener(this);
gui/View.java:257:		MSNItemLunch.addActionListener(this);
gui/View.java:258:		MSNItemBusy.addActionListener(this);
gui/View.java:259:		MSNItemBRB.addActionListener(this);
gui/View.java:260:		MSNItemPhone.addActionListener(this);
gui/View.java:261:		MSNItemLogin.addActionListener(this);
gui/View.java:262:		MSNItemQuit.addActionListener(this);
gui/View.java:264:		YahooItemAddUser.setActionCommand(              );
gui/View.java:265:		YahooItemOnline.setActionCommand(                   );
gui/View.java:266:		YahooItemLogin.setActionCommand(            );
gui/View.java:267:		YahooItemQuit.setActionCommand(           );
gui/View.java:269:		YahooItemAddUser.addActionListener(this);
gui/View.java:270:		YahooItemOnline.addActionListener(this);
gui/View.java:271:		YahooItemLogin.addActionListener(this);
gui/View.java:272:		YahooItemQuit.addActionListener(this);
gui/View.java:276:		itemAbout.setActionCommand(       );
gui/View.java:277:		itemAbout.addActionListener(this);
gui/View.java:278:		itemDumpOn.setActionCommand(         );
gui/View.java:279:		itemDumpOff.setActionCommand(          );
gui/View.java:280:		itemDumpOn.addActionListener(this);
gui/View.java:281:		itemDumpOff.addActionListener(this);
gui/View.java:283:		paneMess.setLayout(new BorderLayout());
gui/View.java:285:		mess.setJMenuBar( menuBar );	
gui/View.java:288:		mess.getContentPane().add(paneMess);
gui/View.java:290:		contactModel = new ContactTableModel(icon);
gui/View.java:292:		contactTable = new JTable(          contactModel);
gui/View.java:296:		contactTable.setRowHeight(25);
gui/View.java:297:		contactTable.setShowHorizontalLines(false);
gui/View.java:298:		contactTable.setShowVerticalLines(false);
gui/View.java:299:		contactTable.setSelectionBackground(contactTable.getBackground());
gui/View.java:300:		contactTable.setSelectionForeground(contactTable.getForeground());
gui/View.java:303:		for(int i = 0; i < icon.length; i++) {
gui/View.java:304:			icon[i].setImageObserver(contactTable);
gui/View.java:307:		TableColumnModel columnModel = contactTable.getColumnModel();
gui/View.java:308:		TableColumn column = columnModel.getColumn(0);
gui/View.java:310:		column.setWidth(35);
gui/View.java:311:		column.setMaxWidth(35);
gui/View.java:312:		column.setMinWidth(35);
gui/View.java:313:		column.setResizable(false);
gui/View.java:315:		column = columnModel.getColumn(1);
gui/View.java:317:		column.setMaxWidth(-1);
gui/View.java:318:		column.setMinWidth(-1);
gui/View.java:319:		column.setPreferredWidth(-1);
gui/View.java:320:		column.setResizable(false);
gui/View.java:322:		column = columnModel.getColumn(2);
gui/View.java:323:		TableColumnModel tcm = contactTable.getColumnModel();
gui/View.java:324:		column = tcm.getColumn (2);
gui/View.java:325:		TableCellRenderer renderer = new CustomCellRenderer(  ,   );
gui/View.java:326:		column.setCellRenderer (renderer);
gui/View.java:328:		column.setWidth(90);
gui/View.java:334:		scrollPane = new JScrollPane(contactTable);
gui/View.java:335:		paneMess.add(scrollPane, BorderLayout.CENTER);
gui/View.java:337:		MouseListener ml = new MouseAdapter() {
gui/View.java:338:    		public void mouseClicked(MouseEvent e) {		                               
gui/View.java:342:        			int row = contactTable.rowAtPoint(e.getPoint());
gui/View.java:346:						MessageBox mb = getMessageBox((String)contactModel.getValueAt(row, 1));
gui/View.java:347:						if(mb != null) {
gui/View.java:348:							mb.setVisible(true);
gui/View.java:352:							AProtocol ap = model.getProtocolContainingContact((String)contactModel.getValueAt(row, 1));
gui/View.java:353:							if (ap instanceof MSNProtocol) {		                                                     
gui/View.java:355:									ap.sendMessage( (String)contactModel.getValueAt(row, 1), null);
gui/View.java:356:								} catch (Exception err) {
gui/View.java:360:							mb = new MessageBox(model.getProtocolContainingContact((String)contactModel.getValueAt(row, 1)), (String)contactModel.getValueAt(row, 1), (String)contactModel.getValueAt(row, 2));				
gui/View.java:362:							boxList.add(mb);
gui/View.java:365:        			catch(UnknownContactException ex) {
gui/View.java:372:    	contactTable.addMouseListener(ml);
gui/View.java:375:		mess.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
gui/View.java:379:		mess.validate();
gui/View.java:380:		mess.setVisible(true);
gui/View.java:383:	private MessageBox getMessageBox(String uin) {
gui/View.java:385:		for(int i = 0; i < boxList.size(); i++) {
gui/View.java:386:			if(((MessageBox)boxList.elementAt(i)).getLogin().equals(uin)) {
gui/View.java:387:				return (MessageBox)boxList.elementAt(i);
gui/View.java:395:	public void updateContacts() {
gui/View.java:398:		for(int i = 0; i < model.getContactList().size(); i++) {
gui/View.java:399:			AContact contact = (AContact)model.getContactList().elementAt(i);
gui/View.java:401:			contactModel.updateContact(contact);
gui/View.java:405:	public void showMSNByeMessage(String sender) {
gui/View.java:406:		MessageBox mb = getMessageBox(sender);
gui/View.java:407:		mb.showByeMessage(sender);
gui/View.java:411:	public void showMSNTypingMessage(String sender) {
gui/View.java:412:		MessageBox mb = getMessageBox(sender);
gui/View.java:413:		if(mb != null) {
gui/View.java:414:			mb.setVisible(true);
gui/View.java:418:				AProtocol ap = model.getProtocolContainingContact(sender);
gui/View.java:419:				AContact a = ap.getContact(sender);
gui/View.java:420:				mb = new MessageBox(ap, sender, a.getNick());
gui/View.java:421:				boxList.add(mb);
gui/View.java:422:				mb.showTypingMessage(sender);
gui/View.java:424:			catch(UnknownContactException e) {
gui/View.java:429:		mb.showTypingMessage(sender);	
gui/View.java:432:	public void showMSNMessage(String s) {
gui/View.java:435:		int index = msg.indexOf(   );
gui/View.java:436:		String sender = msg.substring(0, index);
gui/View.java:437:		msg = msg.substring(index + 1);
gui/View.java:439:		MessageBox mb = getMessageBox(sender);
gui/View.java:442:			if(mb != null) {
gui/View.java:443:				mb.setVisible(true);
gui/View.java:447:					AProtocol ap = model.getProtocolContainingContact(sender);
gui/View.java:448:					AContact a = ap.getContact(sender);
gui/View.java:449:					mb = new MessageBox(ap, sender, a.getNick());
gui/View.java:450:					boxList.add(mb);		
gui/View.java:452:			mb.showMessage(msg);
gui/View.java:454:		catch(UnknownContactException e) {
gui/View.java:459:	public void showDialog(String msg) {		
gui/View.java:460:		JLabel jl = new JLabel(         + msg +          , new ImageIcon(     + File.separator +              + File.separator +           ), JLabel.CENTER);
gui/View.java:461:		JPanel jp = new JPanel();
gui/View.java:462:		jp.add(jl);
gui/View.java:463:		JFrame frame = new JFrame(              );
gui/View.java:464:	    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
gui/View.java:465:	    frame.getContentPane().add(jp);
gui/View.java:466:	    frame.setSize(250, 50);
gui/View.java:467:	    frame.show();
gui/View.java:470:	public void showMessage(String s) {
gui/View.java:475:		while(s.charAt(i) !=    ) {
gui/View.java:476:			login += s.charAt(i);
gui/View.java:480:		msg = s.substring(i+1);
gui/View.java:484:			MessageBox mb = getMessageBox(login);
gui/View.java:485:			if(mb != null) {	
gui/View.java:486:				mb.setVisible(true);
gui/View.java:489:				AProtocol ap = model.getProtocolContainingContact(login);
gui/View.java:490:				AContact a = ap.getContact(login);
gui/View.java:491:				mb = new MessageBox(ap, login, a.getNick());
gui/View.java:492:				boxList.add(mb);		
gui/View.java:494:			mb.showMessage(msg);
gui/View.java:496:		catch(UnknownContactException e) {
gui/View.java:501:	public void msnLogOff() {
gui/View.java:502:		ICQProtocol icqprotocol = (ICQProtocol)model.getProtocol(0);
gui/View.java:503:		MSNProtocol msnprotocol = (MSNProtocol)model.getProtocol(1);
gui/View.java:504:		YahooProtocol yprotocol = (YahooProtocol)model.getProtocol(2);
gui/View.java:505:		Vector icqcontacts = icqprotocol.getContactList();
gui/View.java:506:		Vector ycontacts = yprotocol.getContactList();
gui/View.java:507:		contactModel.clear();
gui/View.java:510:		if (icqcontacts != null) {
gui/View.java:511:			for (int i = 0; i < icqcontacts.size(); ++i) {
gui/View.java:512:				contactModel.updateContact((AContact)icqcontacts.elementAt(i));
gui/View.java:516:		if (ycontacts != null) {
gui/View.java:517:			for (int i = 0; i < ycontacts.size(); ++i) {
gui/View.java:518:				contactModel.updateContact((AContact)ycontacts.elementAt(i));
gui/View.java:522:		msnprotocol.shutdown();
gui/View.java:523:		if (fMSNThread != null) { 
gui/View.java:524:			fMSNThread.interrupt();
gui/View.java:525:			model.refreshProtocol(1);
gui/View.java:526:			mess.validate();
gui/View.java:528:		MSNPrefs.setPrefsFilledIn(false);
gui/View.java:536:    public void actionPerformed(ActionEvent e) {
gui/View.java:537:    	if(e.getActionCommand().equals(         )) {
gui/View.java:546:			ICQProtocol icqprotocol = (ICQProtocol)model.getProtocol(0);
gui/View.java:547:			MSNProtocol msnprotocol = (MSNProtocol)model.getProtocol(1);
gui/View.java:548:			YahooProtocol yprotocol = (YahooProtocol)model.getProtocol(2);
gui/View.java:549:			Vector msncontacts = msnprotocol.getContactList();
gui/View.java:550:			Vector ycontacts = yprotocol.getContactList();
gui/View.java:551:			contactModel.clear();
gui/View.java:554:			if (msncontacts != null) {
gui/View.java:555:				for (int i = 0; i < msncontacts.size(); ++i) {
gui/View.java:556:					contactModel.updateContact((AContact)msncontacts.elementAt(i));
gui/View.java:560:			if (ycontacts != null) {
gui/View.java:561:				for (int i = 0; i < ycontacts.size(); ++i) {
gui/View.java:562:					contactModel.updateContact((AContact)ycontacts.elementAt(i));
gui/View.java:566:			icqprotocol.shutdown();
gui/View.java:567:			if (fICQThread != null) {
gui/View.java:568:				fICQThread.interrupt();
gui/View.java:569:				model.refreshProtocol(0);
gui/View.java:570:				mess.validate();
gui/View.java:573:		else if(e.getActionCommand().equals(          )) {
gui/View.java:574:			ICQPrefs = new Preferences((ICQProtocol)model.getProtocol(0));
gui/View.java:575:			ICQPrefs.setVisible(true);			
gui/View.java:577:			fICQThread = new Thread() {
gui/View.java:578:				public void run() {
gui/View.java:580:						while (! ICQPrefs.prefsFilledIn()) {
gui/View.java:581:							sleep(100);
gui/View.java:584:   						((ICQProtocol)model.getProtocol(0)).login();
gui/View.java:586:					catch(ICQException e) {
gui/View.java:587:						JOptionPane.showMessageDialog(mess, e.getMessage());
gui/View.java:589:					catch (InterruptedException e) {
gui/View.java:595:				fICQThread.start();
gui/View.java:597:		else if(e.getActionCommand().equals(                 )) {
gui/View.java:599:				((ICQProtocol)model.getProtocol(0)).changeStatus(        );	
gui/View.java:601:			catch(ICQException ie) {
gui/View.java:602:				JOptionPane.showMessageDialog(mess, ie.getMessage());
gui/View.java:605:			mess.setIconImage(icon[0].getImage());
gui/View.java:607:		else if(e.getActionCommand().equals(               )) {
gui/View.java:609:				((ICQProtocol)model.getProtocol(0)).changeStatus(      );
gui/View.java:611:			catch(ICQException ie) {
gui/View.java:612:				JOptionPane.showMessageDialog(mess, ie.getMessage());
gui/View.java:616:			mess.setIconImage(icon[1].getImage());	
gui/View.java:618:		else if(e.getActionCommand().equals(             )) {
gui/View.java:620:				((ICQProtocol)model.getProtocol(0)).changeStatus(    );
gui/View.java:622:			catch(ICQException ie) {
gui/View.java:623:				JOptionPane.showMessageDialog(mess, ie.getMessage());
gui/View.java:627:			mess.setIconImage(icon[2].getImage());		
gui/View.java:629:		else if(e.getActionCommand().equals(              )) {
gui/View.java:631:				((ICQProtocol)model.getProtocol(0)).changeStatus(     );	
gui/View.java:633:			catch(ICQException ie) {
gui/View.java:634:				JOptionPane.showMessageDialog(mess, ie.getMessage());
gui/View.java:637:		else if(e.getActionCommand().equals(               )) {
gui/View.java:638:			((ICQProtocol)model.getProtocol(0)).getContactListFromServer();
gui/View.java:640:		else if(e.getActionCommand().equals(             )) {
gui/View.java:642:				((ICQProtocol)model.getProtocol(0)).retrieveContactList();
gui/View.java:644:			catch(ICQException ie) {
gui/View.java:645:				JOptionPane.showMessageDialog(mess, ie.getMessage());
gui/View.java:648:		else if(e.getActionCommand().equals(            )) {
gui/View.java:649:			ICQAddUser.setVisible(true);
gui/View.java:651:		else if(e.getActionCommand().equals(         )) {
gui/View.java:653:			this.msnLogOff();
gui/View.java:655:		else if(e.getActionCommand().equals(          )) {
gui/View.java:656:			MSNPrefs = new Preferences((MSNProtocol)model.getProtocol(1));
gui/View.java:657:			MSNPrefs.setVisible(true);
gui/View.java:659:			fMSNThread = new Thread() {
gui/View.java:660:   					public void run() {
gui/View.java:662:							while (! MSNPrefs.prefsFilledIn()) {
gui/View.java:663:								sleep(100);
gui/View.java:666:       						((MSNProtocol)model.getProtocol(1)).login();
gui/View.java:668:							while (! ((MSNProtocol)model.getProtocol(1)).contactListRetrieved()) {
gui/View.java:669:								sleep(100);
gui/View.java:673:							((MSNProtocol)model.getProtocol(1)).getContactList();
gui/View.java:674:							updateContacts();
gui/View.java:675:							MSNPrefs.setPrefsFilledIn(false);
gui/View.java:677:   						catch(MSNException e) {
gui/View.java:678:							JOptionPane.showMessageDialog(mess, e.getMessage());
gui/View.java:680:   						catch (Exception e) {
gui/View.java:686:			fMSNThread.start();
gui/View.java:688:		else if(e.getActionCommand().equals(            )) {
gui/View.java:689:			MSNAddUser.setVisible(true);
gui/View.java:691:			updateContacts();
gui/View.java:698:		else if(e.getActionCommand().equals(                 )) {
gui/View.java:699:			if (((MSNProtocol)model.getProtocol(1)).contactListRetrieved()) {
gui/View.java:700:				((MSNProtocol)model.getProtocol(1)).changeStatus(     );
gui/View.java:703:		else if(e.getActionCommand().equals(               )) {
gui/View.java:704:			if (((MSNProtocol)model.getProtocol(1)).contactListRetrieved()) {
gui/View.java:705:				((MSNProtocol)model.getProtocol(1)).changeStatus(     );
gui/View.java:708:		else if(e.getActionCommand().equals(               )) {
gui/View.java:709:			if (((MSNProtocol)model.getProtocol(1)).contactListRetrieved()) {
gui/View.java:710:				((MSNProtocol)model.getProtocol(1)).changeStatus(     );
gui/View.java:713:		else if(e.getActionCommand().equals(              )) {
gui/View.java:714:			if (((MSNProtocol)model.getProtocol(1)).contactListRetrieved()) {
gui/View.java:715:				((MSNProtocol)model.getProtocol(1)).changeStatus(     );
gui/View.java:718:		else if(e.getActionCommand().equals(                )) {
gui/View.java:719:			if (((MSNProtocol)model.getProtocol(1)).contactListRetrieved()) {
gui/View.java:720:				((MSNProtocol)model.getProtocol(1)).changeStatus(     );
gui/View.java:723:		else if(e.getActionCommand().equals(                )) {
gui/View.java:724:			if (((MSNProtocol)model.getProtocol(1)).contactListRetrieved()) {
gui/View.java:725:				((MSNProtocol)model.getProtocol(1)).changeStatus(     );
gui/View.java:731:		else if(e.getActionCommand().equals(           )) {
gui/View.java:733:			ICQProtocol icqprotocol = (ICQProtocol)model.getProtocol(0);
gui/View.java:734:			MSNProtocol msnprotocol = (MSNProtocol)model.getProtocol(1);
gui/View.java:735:			YahooProtocol yprotocol = (YahooProtocol)model.getProtocol(2);
gui/View.java:736:			Vector msncontacts = msnprotocol.getContactList();
gui/View.java:737:			Vector icqcontacts = icqprotocol.getContactList();
gui/View.java:738:			contactModel.clear();
gui/View.java:741:			if (msncontacts != null) {
gui/View.java:742:				for (int i = 0; i < msncontacts.size(); ++i) {
gui/View.java:743:					contactModel.updateContact((AContact)msncontacts.elementAt(i));
gui/View.java:747:			if (icqcontacts != null) {
gui/View.java:748:				for (int i = 0; i < icqcontacts.size(); ++i) {
gui/View.java:749:					contactModel.updateContact((AContact)icqcontacts.elementAt(i));
gui/View.java:753:			yprotocol.shutdown();
gui/View.java:754:			if (fYahooThread != null) {
gui/View.java:755:				fYahooThread.interrupt();
gui/View.java:756:				model.refreshProtocol(2);
gui/View.java:757:				mess.validate();
gui/View.java:760:		else if(e.getActionCommand().equals(            )) {
gui/View.java:761:			YahooPrefs = new Preferences((YahooProtocol)model.getProtocol(2));
gui/View.java:762:			YahooPrefs.setVisible(true);		
gui/View.java:764:			fYahooThread = new Thread() {
gui/View.java:765:   					public void run() {
gui/View.java:767:							while (! YahooPrefs.prefsFilledIn()) {
gui/View.java:768:								sleep(100);
gui/View.java:771:       						((YahooProtocol)model.getProtocol(2)).login();
gui/View.java:773:   						catch(YahooException e) {
gui/View.java:774:   							JOptionPane.showMessageDialog(mess, e.getMessage());
gui/View.java:775:   						} catch (InterruptedException e) {
gui/View.java:781:			fYahooThread.start();
gui/View.java:783:		else if(e.getActionCommand().equals(              )) {
gui/View.java:786:		else if(e.getActionCommand().equals(                   )) {
gui/View.java:789:		else if(e.getActionCommand().equals(               )) {
gui/View.java:792:		else if(e.getActionCommand().equals(       )) {
gui/View.java:793:			JOptionPane.showMessageDialog(mess,                +
gui/View.java:796:		else if(e.getActionCommand().equals(         )) {
gui/View.java:797:			if (fDumpListener != null) {
gui/View.java:798:				System.out.println(         );
gui/View.java:799:				fDumpListener.dumpTriggered();
gui/View.java:802:		else if(e.getActionCommand().equals(          )) {
gui/View.java:803:			if (fDumpListener != null) {
gui/View.java:804:				System.out.println(          );
gui/View.java:805:				fDumpListener.dumpUnTriggered();
gui/View.java:808:		else if(e.getActionCommand().equals(      )) {
gui/View.java:809:			System.exit(0);	
gui/View.java:813:	public void removeDumpListener() {
gui/View.java:817:	public void setDumpListener(DumpListener dumpListener) {
gui/View.java:821:	public DumpListener getListener() {
gui/EmoticonsAndSounds.java:44:	public EmoticonsAndSounds() {
gui/EmoticonsAndSounds.java:45:		fEmoticonMap = new HashMap();
gui/EmoticonsAndSounds.java:46:		fSoundMap = new HashMap();
gui/EmoticonsAndSounds.java:52:		fEmoticonMap.put(     , ep +         );			fSoundMap.put(     , sp +           );
gui/EmoticonsAndSounds.java:53:		fEmoticonMap.put(     , ep +           );		fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:54:		fEmoticonMap.put(     , ep +              );		fSoundMap.put(     , sp +              );
gui/EmoticonsAndSounds.java:55:		fEmoticonMap.put(     , ep +           );			fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:56:		fEmoticonMap.put(     ,ep +          ); 			fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:57:		fEmoticonMap.put(     , ep +          );			fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:58:		fEmoticonMap.put(    , ep +           );			fSoundMap.put(    , sp +              );
gui/EmoticonsAndSounds.java:59:		fEmoticonMap.put(     , ep +               );		fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:60:		fEmoticonMap.put(     , ep +               );	fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:61:		fEmoticonMap.put(     , ep +            );		fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:62:		fEmoticonMap.put(    , ep +            );		fSoundMap.put(    , null);
gui/EmoticonsAndSounds.java:63:		fEmoticonMap.put(    , ep +                );	fSoundMap.put(    , sp +            );
gui/EmoticonsAndSounds.java:64:		fEmoticonMap.put(     , ep +                 );fSoundMap.put(     , sp +            );
gui/EmoticonsAndSounds.java:65:		fEmoticonMap.put(    , ep +                  );fSoundMap.put(    , sp +           );
gui/EmoticonsAndSounds.java:66:		fEmoticonMap.put(     , ep +          );		fSoundMap.put(     , sp +           );
gui/EmoticonsAndSounds.java:67:		fEmoticonMap.put(    , ep +                 );	fSoundMap.put(    , null);
gui/EmoticonsAndSounds.java:68:		fEmoticonMap.put(     , ep +             ); fSoundMap.put(     , sp +                );
gui/EmoticonsAndSounds.java:69:		fEmoticonMap.put(    , ep +           );			fSoundMap.put(    , null);
gui/EmoticonsAndSounds.java:70:		fEmoticonMap.put(     , ep +              );	fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:71:		fEmoticonMap.put(    , ep +          );				fSoundMap.put(    , null);
gui/EmoticonsAndSounds.java:72:		fEmoticonMap.put(     , ep +           ); 			fSoundMap.put(     , sp +          );
gui/EmoticonsAndSounds.java:73:		fEmoticonMap.put(    , ep +                ); fSoundMap.put(    , null);
gui/EmoticonsAndSounds.java:74:		fEmoticonMap.put(     , ep +                );fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:75:		fEmoticonMap.put(    , ep +                );	fSoundMap.put(    , null);
gui/EmoticonsAndSounds.java:76:		fEmoticonMap.put(     , ep +          );			fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:77:		fEmoticonMap.put(     , ep +             );		fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:78:		fEmoticonMap.put(      , ep +              );		fSoundMap.put(      , null);
gui/EmoticonsAndSounds.java:79:		fEmoticonMap.put(     , ep +              );		fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:80:		fEmoticonMap.put(     , ep +          );			fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:81:		fEmoticonMap.put(    , ep +          );		fSoundMap.put(    , sp +               );
gui/EmoticonsAndSounds.java:82:		fEmoticonMap.put(     , ep +           );	fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:83:		fEmoticonMap.put(     , ep +            );			fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:84:		fEmoticonMap.put(     , ep +           );		fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:85:		fEmoticonMap.put(     , ep +          ); fSoundMap.put(     , sp +              );	
gui/EmoticonsAndSounds.java:86:		fEmoticonMap.put(     , ep +                   ); fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:87:		fEmoticonMap.put(     , ep +             ); fSoundMap.put(     , sp +                  );
gui/EmoticonsAndSounds.java:88:		fEmoticonMap.put(     , ep +          ); fSoundMap.put(     , sp +              );
gui/EmoticonsAndSounds.java:89:		fEmoticonMap.put(     , ep +            ); fSoundMap.put(     , sp +            );
gui/EmoticonsAndSounds.java:90:		fEmoticonMap.put(     , ep +             ); fSoundMap.put(     , sp +              );
gui/EmoticonsAndSounds.java:91:		fEmoticonMap.put(      , ep +         ); fSoundMap.put(      , sp +           );
gui/EmoticonsAndSounds.java:92:		fEmoticonMap.put(         , ep +                 ); fSoundMap.put(         , sp +                );	
gui/EmoticonsAndSounds.java:93:		fEmoticonMap.put(         , ep +            ); fSoundMap.put(         , null);		
gui/EmoticonsAndSounds.java:94:		fEmoticonMap.put(         , ep +            ); fSoundMap.put(         , null);	
gui/EmoticonsAndSounds.java:95:		fEmoticonMap.put(     , ep +               ); fSoundMap.put(     , sp +           );	
gui/EmoticonsAndSounds.java:96:		fEmoticonMap.put(     , ep +            ); fSoundMap.put(     , sp +           );
gui/EmoticonsAndSounds.java:97:		fEmoticonMap.put(        , ep +           ); fSoundMap.put(        , sp +           );
gui/EmoticonsAndSounds.java:98:		fEmoticonMap.put(     , ep +           ); fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:99:		fEmoticonMap.put(     , ep +                   ); fSoundMap.put(     , null);		
gui/EmoticonsAndSounds.java:100:		fEmoticonMap.put(       , ep +          ); fSoundMap.put(       , sp +          );
gui/EmoticonsAndSounds.java:101:		fEmoticonMap.put(     , ep +            ); fSoundMap.put(     , sp +            );
gui/EmoticonsAndSounds.java:102:		fEmoticonMap.put(     , ep +              ); fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:103:		fEmoticonMap.put(     , ep +           ); fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:104:		fEmoticonMap.put(        , ep +              ); fSoundMap.put(        , null);
gui/EmoticonsAndSounds.java:105:		fEmoticonMap.put(     , ep +          ); fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:106:		fEmoticonMap.put(     , ep +           ); fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:107:		fEmoticonMap.put(     , ep +                  ); fSoundMap.put(     , null);
gui/EmoticonsAndSounds.java:108:		fEmoticonMap.put(        , ep +           ); fSoundMap.put(        , null);
gui/EmoticonsAndSounds.java:109:		fEmoticonMap.put(        , ep +            ); fSoundMap.put(        , null);
gui/EmoticonsAndSounds.java:110:		fEmoticonMap.put(           , ep +              ); fSoundMap.put(           , null);
gui/EmoticonsAndSounds.java:111:		fEmoticonMap.put(          , ep +             ); fSoundMap.put(          , null);
gui/EmoticonsAndSounds.java:112:		fEmoticonMap.put(       , ep +          ); fSoundMap.put(       , null);
gui/EmoticonsAndSounds.java:113:		fEmoticonMap.put(           , ep +             ); fSoundMap.put(          , null);
gui/EmoticonsAndSounds.java:114:		fEmoticonMap.put(         , ep +                ); fSoundMap.put(         , null);
gui/EmoticonsAndSounds.java:115:		fEmoticonMap.put(         , ep +             ); fSoundMap.put(         , null);
gui/EmoticonsAndSounds.java:116:		fEmoticonMap.put(          , ep +               ); fSoundMap.put(          , null);
gui/EmoticonsAndSounds.java:117:		fEmoticonMap.put(         , ep +                ); fSoundMap.put(         , null);
gui/EmoticonsAndSounds.java:125:	public String getEmoticon(String s) {
gui/EmoticonsAndSounds.java:126:		return (String)fEmoticonMap.get(s.toUpperCase()); 
gui/EmoticonsAndSounds.java:134:	public String getSound(String s) {
gui/EmoticonsAndSounds.java:135:		return (String)fSoundMap.get(s.toUpperCase());
gui/EmoticonsAndSounds.java:142:	public Collection getAllEmoticons() {
gui/EmoticonsAndSounds.java:143:		return fEmoticonMap.values(); 
gui/EmoticonsAndSounds.java:150:	public Set getAllEmoticonKeys() {
gui/EmoticonsAndSounds.java:151:		return fEmoticonMap.keySet();
gui/MessGui.java:55:	public MessGui() {
gui/MessGui.java:56:		fICQData = new DataBuffer();
gui/MessGui.java:57:		fYahooData = new DataBuffer();
gui/MessGui.java:59:		fMSNData = new DataBuffer();
gui/MessGui.java:62:		fManager = new Protocols();
gui/MessGui.java:64:		ICQProtocol icq = new ICQProtocol(fICQData,                , 5190);
gui/MessGui.java:65:		fManager.addProtocol(icq);
gui/MessGui.java:67:		MSNProtocol msn = new MSNProtocol(fMSNData,                       , 1863);                     
gui/MessGui.java:68:		fManager.addProtocol(msn);
gui/MessGui.java:70:		YahooProtocol yahoo = new YahooProtocol(fYahooData,                 , 5050 );                       
gui/MessGui.java:71:		fManager.addProtocol(yahoo);
gui/MessGui.java:73:		theView = new View(fManager);
gui/MessGui.java:74:		theView.setDumpListener(this);
gui/MessGui.java:78:		fUpdate = new UpdateUser(fICQData, fMSNData);
gui/MessGui.java:79:		fUpdate.start();
gui/MessGui.java:80:		this.setPriority(MIN_PRIORITY);
gui/MessGui.java:81:		this.start();
gui/MessGui.java:85:	public void dumpTriggered() {
gui/MessGui.java:89:	public void dumpUnTriggered() {
gui/MessGui.java:109:		public UpdateUser(DataBuffer icq,           DataBuffer msn) {
gui/MessGui.java:117:		public void run() {
gui/MessGui.java:118:			while(true) {
gui/MessGui.java:120:				if(fICQData.ExistsUserData()) {
gui/MessGui.java:123:					output = fICQData.getToUser();
gui/MessGui.java:124:					if((output.charAt(0) ==    )&&(output.charAt(1) ==    )&&
gui/MessGui.java:125:						(output.charAt(2) ==    )&&(output.charAt(3) ==    )) {
gui/MessGui.java:126:						String s = output.substring(4);
gui/MessGui.java:127:						theView.showMessage(s);
gui/MessGui.java:130:				if(fICQData.ExistsDump()) {
gui/MessGui.java:131:					String output = fICQData.getDump();
gui/MessGui.java:132:					if(output.equals(         )) {
gui/MessGui.java:133:						theView.updateContacts();
gui/MessGui.java:135:					if(fDump) {
gui/MessGui.java:136:						System.out.println(output);
gui/MessGui.java:140:				if (fMSNData.ExistsUserData()) {
gui/MessGui.java:141:					String s = fMSNData.getToUser();
gui/MessGui.java:142:					if (! s.equals(  )) {
gui/MessGui.java:143:						if (s.substring(0,3).equals(     )) {
gui/MessGui.java:144:							theView.showMSNMessage(s.substring(4));
gui/MessGui.java:145:						} else if (s.substring(0,3).equals(     )) {
gui/MessGui.java:146:							theView.showMSNByeMessage(s.substring(4));
gui/MessGui.java:147:						} else if (s.substring(0,3).equals(     )) {
gui/MessGui.java:148:							theView.showMSNTypingMessage(s.substring(4));
gui/MessGui.java:149:						} else if (s.substring(0,3).equals(     )) {		                          
gui/MessGui.java:150:							theView.showDialog(s.substring(4));
gui/MessGui.java:151:						} else if (s.substring(0,3).equals(     )) {	                    
gui/MessGui.java:152:							theView.showDialog(s.substring(4));
gui/MessGui.java:154:							theView.showDialog(s);
gui/MessGui.java:159:				if (fMSNData.ExistsDump()) {
gui/MessGui.java:160:					String s = fMSNData.getDump();
gui/MessGui.java:161:					if(s.equals(         )) {
gui/MessGui.java:162:						theView.updateContacts();
gui/MessGui.java:164:					if (fDump) {
gui/MessGui.java:165:						if (! s.equals(  )) {
gui/MessGui.java:166:							System.out.println(s);
gui/MessGui.java:170:				if(fYahooData.ExistsUserData()) {
gui/MessGui.java:173:					output = fYahooData.getToUser();
gui/MessGui.java:174:					if((output.charAt(0) ==    )&&(output.charAt(1) ==    )&&
gui/MessGui.java:175:						(output.charAt(2) ==    )&&(output.charAt(3) ==    )) {
gui/MessGui.java:176:						String s = output.substring(4);
gui/MessGui.java:177:						theView.showMessage(s);
gui/MessGui.java:180:				if(fYahooData.ExistsDump()) {
gui/MessGui.java:182:					String output = fYahooData.getDump();
gui/MessGui.java:183:					if(output.equals(         )) {
gui/MessGui.java:185:						theView.updateContacts();
gui/MessGui.java:187:					if(fDump) {
gui/MessGui.java:188:						System.out.println(output);
gui/MessGui.java:192:					sleep(200);
gui/MessGui.java:194:				catch(InterruptedException e) {
gui/MessGui.java:202:	public void setListener(DumpListener dumpListener) {
gui/MessGui.java:206:	public DumpListener getListener() {
gui/MessGui.java:214:	public static void main(String[] args) {
gui/MessGui.java:215:		MessGui c = new MessGui();
gui/ImageIconRenderer.java:42:	public ImageIconRenderer(TableCellRenderer renderer) {
gui/ImageIconRenderer.java:49:	public Component getTableCellRendererComponent(
gui/ImageIconRenderer.java:57:		if(value instanceof Component) return (Component)value;
gui/ImageIconRenderer.java:58:		return fDefaultRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
gui/ContactTableModel.java:55:	public ContactTableModel(ImageIcon[] icon) {
gui/ContactTableModel.java:57:		data = new Vector();
gui/ContactTableModel.java:63:	public int getRowCount() {
gui/ContactTableModel.java:70:	public int getColumnCount() {
gui/ContactTableModel.java:77:	public String getColumnName(int aColumn) {
gui/ContactTableModel.java:84:	public Class getColumnClass(int columnIndex) {
gui/ContactTableModel.java:85:		if(columnIndex == 0) {
gui/ContactTableModel.java:97:	public AContact getContact(int row) {
gui/ContactTableModel.java:98:		return (AContact)data.elementAt(row);
gui/ContactTableModel.java:104:	public boolean deleteContact(String loginname) {
gui/ContactTableModel.java:105:		for(int i = 0; i < getRowCount(); i++) {
gui/ContactTableModel.java:106:			AContact aContact = (AContact)data.elementAt(i);
gui/ContactTableModel.java:107:			if(aContact.getLogin().equals(loginname)) {
gui/ContactTableModel.java:108:				data.removeElementAt(i);
gui/ContactTableModel.java:110:				fireTableRowsDeleted(i, i);		
gui/ContactTableModel.java:122:	public Object getValueAt(int row, int column) {
gui/ContactTableModel.java:124:			AContact aContact = (AContact)data.elementAt(row);
gui/ContactTableModel.java:128:			switch (column) {
gui/ContactTableModel.java:130:					if(aContact.getStatus().endsWith(         )) {
gui/ContactTableModel.java:133:					else if(aContact.getStatus().endsWith(          )) {
gui/ContactTableModel.java:136:					else if(aContact.getStatus().equals(      )) {
gui/ContactTableModel.java:139:					else if(aContact.getStatus().equals(     )) {
gui/ContactTableModel.java:142:					else if(aContact.getStatus().equals(     )) {
gui/ContactTableModel.java:145:					else if(aContact.getStatus().equals(     )) {
gui/ContactTableModel.java:148:					else if(aContact.getStatus().equals(     )) {
gui/ContactTableModel.java:151:					else if(aContact.getStatus().equals(     )) {
gui/ContactTableModel.java:154:					else if(aContact.getStatus().equals(     )) {
gui/ContactTableModel.java:157:					else if(aContact.getStatus().equals(     )) {
gui/ContactTableModel.java:160:					else if(aContact.getStatus().equals(     )) {
gui/ContactTableModel.java:163:					else if(aContact.getStatus().equals(     )) {
gui/ContactTableModel.java:166:					else if(aContact.getStatus().endsWith(     )) {
gui/ContactTableModel.java:169:					else if(aContact.getStatus().endsWith(          )) {
gui/ContactTableModel.java:172:					else if(aContact.getStatus().endsWith(        )) {
gui/ContactTableModel.java:175:					else if(aContact.getStatus().endsWith(         )) {
gui/ContactTableModel.java:179:						System.out.println(                   + aContact.getStatus());
gui/ContactTableModel.java:185:					login = aContact.getLogin();
gui/ContactTableModel.java:188:					nick = aContact.getNick();
gui/ContactTableModel.java:192:		catch (Exception e) {
gui/ContactTableModel.java:201:	public void updateContact(AContact aContact) {
gui/ContactTableModel.java:202:		String loginname = aContact.getLogin();
gui/ContactTableModel.java:209:		while(!found && (i < nextEmptyRow)) {
gui/ContactTableModel.java:210:			m = (AContact)data.elementAt(i);
gui/ContactTableModel.java:212:			if(m.getLogin().equals(loginname)) {
gui/ContactTableModel.java:221:		if(found) {                     
gui/ContactTableModel.java:222:			data.setElementAt(aContact, index);
gui/ContactTableModel.java:225:			if(numRows <= nextEmptyRow) {
gui/ContactTableModel.java:231:			data.addElement(aContact);
gui/ContactTableModel.java:236:		if(addedRow) {
gui/ContactTableModel.java:237:			fireTableRowsInserted(index, index);
gui/ContactTableModel.java:240:			fireTableRowsUpdated(index, index);
gui/ContactTableModel.java:247:	public void clear() {
gui/ContactTableModel.java:251:		data.removeAllElements();
gui/ContactTableModel.java:254:		if(oldNumRows > START_NUM_ROWS) {
gui/ContactTableModel.java:255:			fireTableRowsUpdated(START_NUM_ROWS, oldNumRows - 1);
gui/ContactTableModel.java:257:		fireTableRowsUpdated(0, START_NUM_ROWS - 1);
gui/MessageBox.java:60:	public MessageBox(AProtocol p, String login, String nick) {
gui/MessageBox.java:61:		super(nick);
gui/MessageBox.java:67:		new JFrame(fNick);
gui/MessageBox.java:68:		setSize(300, 200);
gui/MessageBox.java:69:		setLocation(300,200);
gui/MessageBox.java:71:		paneMessBox = new JPanel();
gui/MessageBox.java:73:		addMessageBoxWidgets();
gui/MessageBox.java:79:	private void addMessageBoxWidgets() {
gui/MessageBox.java:81:		paneMessBox.setBorder(BorderFactory.createEmptyBorder(
gui/MessageBox.java:87:		paneMessBox.setLayout(new BoxLayout(paneMessBox, BoxLayout.Y_AXIS));
gui/MessageBox.java:90:		areaLog = new EditorPane(fNick);
gui/MessageBox.java:91:		areaLog.setEditable(false);
gui/MessageBox.java:93:		areaScrollPane1 = new JScrollPane(areaLog);
gui/MessageBox.java:94:        areaScrollPane1.setPreferredSize(new Dimension(400, 250));
gui/MessageBox.java:95:        areaScrollPane1.setBorder(
gui/MessageBox.java:96:            BorderFactory.createCompoundBorder(
gui/MessageBox.java:97:                BorderFactory.createCompoundBorder(
gui/MessageBox.java:98:                                BorderFactory.createTitledBorder(                  ),
gui/MessageBox.java:99:                                BorderFactory.createEmptyBorder(5,5,5,5)),
gui/MessageBox.java:100:							   areaScrollPane1.getBorder()));
gui/MessageBox.java:102:		boxMessage = new JTextArea();
gui/MessageBox.java:103:		boxMessage.setLineWrap(true);
gui/MessageBox.java:104:		boxMessage.setRows(4);
gui/MessageBox.java:105:		boxMessage.setWrapStyleWord(true);
gui/MessageBox.java:106:		JScrollPane boxScrollPane1 = new JScrollPane(boxMessage);
gui/MessageBox.java:107:        boxScrollPane1.setPreferredSize(new Dimension(100, 100));
gui/MessageBox.java:108:        boxScrollPane1.setBorder(
gui/MessageBox.java:109:            BorderFactory.createCompoundBorder(                               
gui/MessageBox.java:110:                                BorderFactory.createEmptyBorder(5,5,5,5),
gui/MessageBox.java:111:							   boxScrollPane1.getBorder()));
gui/MessageBox.java:112:		boxMessage.registerKeyboardAction(new ActionListener() {
gui/MessageBox.java:113:			public void actionPerformed(ActionEvent e) {
gui/MessageBox.java:114:				if(boxMessage.getText().equals(  )) {
gui/MessageBox.java:118:					areaLog.append(         , (String)boxMessage.getText());
gui/MessageBox.java:121:						fModel.sendMessage(fLogin, (String)boxMessage.getText());
gui/MessageBox.java:123:					catch(ICQException ie) {
gui/MessageBox.java:124:						ie.printStackTrace();
gui/MessageBox.java:126:					catch (ProtocolException err) {
gui/MessageBox.java:127:						System.out.println(err.getMessage());
gui/MessageBox.java:129:					catch (Exception ex) {
gui/MessageBox.java:130:						ex.printStackTrace();	
gui/MessageBox.java:133:					boxMessage.setText(  );
gui/MessageBox.java:136:		},KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0),JComponent.WHEN_FOCUSED);
gui/MessageBox.java:140:		buttonSend = new JButton(      );
gui/MessageBox.java:141:		buttonClose = new JButton(       );
gui/MessageBox.java:142:		buttonEmoticon = new JButton();
gui/MessageBox.java:143:		buttonEmoticon.setIcon(new ImageIcon(     + File.separator +              + File.separator +             + File.separator +         ));
gui/MessageBox.java:145:		buttonSend.setActionCommand(      );
gui/MessageBox.java:146:		buttonClose.setActionCommand(       );
gui/MessageBox.java:147:		buttonEmoticon.setActionCommand(   );
gui/MessageBox.java:148:		buttonSend.addActionListener(this);
gui/MessageBox.java:149:		buttonClose.addActionListener(this);
gui/MessageBox.java:150:		buttonEmoticon.addActionListener(this);
gui/MessageBox.java:152:		paneMessBox.add(areaScrollPane1);
gui/MessageBox.java:153:		paneMessBox.add(boxScrollPane1);
gui/MessageBox.java:154:		JPanel pane2 = new JPanel(new GridLayout(1,3));
gui/MessageBox.java:158:		pane2.add(buttonSend);
gui/MessageBox.java:159:		pane2.add(buttonClose);
gui/MessageBox.java:160:		pane2.add(buttonEmoticon);
gui/MessageBox.java:162:		paneMessBox.add(pane2);
gui/MessageBox.java:163:		getContentPane().add(paneMessBox);
gui/MessageBox.java:164:		setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
gui/MessageBox.java:165:		pack();
gui/MessageBox.java:166:		setVisible(true);
gui/MessageBox.java:168:		addWindowListener(new java.awt.event.WindowAdapter() {
gui/MessageBox.java:169:       		public void windowClosing(java.awt.event.WindowEvent evt) {
gui/MessageBox.java:170:            	exitForm(evt);
gui/MessageBox.java:179:	public void showMessage(String msg) {
gui/MessageBox.java:180:		areaScrollPane1.getVerticalScrollBar().setValue(areaScrollPane1.getVerticalScrollBar().getMaximum());
gui/MessageBox.java:181:		areaLog.append(fNick +        , msg);
gui/MessageBox.java:182:		areaScrollPane1.getVerticalScrollBar().setValue(areaScrollPane1.getVerticalScrollBar().getMaximum());
gui/MessageBox.java:185:		this.setTitle(fNick);
gui/MessageBox.java:188:	public void showByeMessage(String contact) {
gui/MessageBox.java:189:		this.setTitle(fNick +                       );
gui/MessageBox.java:192:	public void showTypingMessage(String contact) {
gui/MessageBox.java:193:		this.setTitle(fNick +            );
gui/MessageBox.java:200:	public String getLogin() {
gui/MessageBox.java:204:	private void exitForm(java.awt.event.WindowEvent evt) {                          
gui/MessageBox.java:205:        setVisible(false);
gui/MessageBox.java:206:		if (fModel instanceof MSNProtocol) {
gui/MessageBox.java:207:			MSNProtocol msn = (MSNProtocol)fModel;
gui/MessageBox.java:208:			msn.sendByeMessage(fLogin);
gui/MessageBox.java:210:		areaLog.close();
gui/MessageBox.java:216:	public void actionPerformed(ActionEvent e) {
gui/MessageBox.java:217:		if(e.getActionCommand().equals(   )) {
gui/MessageBox.java:218:			Point p = buttonEmoticon.getLocation();
gui/MessageBox.java:219:			if (es == null) {
gui/MessageBox.java:220:				es = new EmoticonSelector((int)p.getX(), (int)p.getY(), boxMessage);
gui/MessageBox.java:222:				es.setVisible(true);
gui/MessageBox.java:225:		if(e.getActionCommand().equals(       )) {
gui/MessageBox.java:226:			setVisible(false);
gui/MessageBox.java:227:			if (fModel instanceof MSNProtocol) {
gui/MessageBox.java:228:				MSNProtocol msn = (MSNProtocol)fModel;
gui/MessageBox.java:229:				msn.sendByeMessage(fLogin);
gui/MessageBox.java:231:			areaLog.close();
gui/MessageBox.java:233:		if(e.getActionCommand().equals(      )) {
gui/MessageBox.java:234:			if(boxMessage.getText().equals(  )) {
gui/MessageBox.java:238:				areaLog.append(         , (String)boxMessage.getText());
gui/MessageBox.java:241:					fModel.sendMessage(fLogin, (String)boxMessage.getText());
gui/MessageBox.java:243:				catch(ICQException ie) {
gui/MessageBox.java:244:					JOptionPane.showMessageDialog(this, ie.getMessage());
gui/MessageBox.java:246:				catch (ProtocolException err) {
gui/MessageBox.java:247:					System.out.println(err.getMessage());
gui/MessageBox.java:249:				boxMessage.setText(  );
gui/EditorPane.java:56:        public EditorPane(String contact) {             
gui/EditorPane.java:58:                        timezone = System.getProperties().getProperty(               );
gui/EditorPane.java:59:                        fCalendar =  new GregorianCalendar(TimeZone.getTimeZone(timezone));
gui/EditorPane.java:61:                        f = new File(contact +     + fCalendar.get(Calendar.DAY_OF_MONTH) 
gui/EditorPane.java:62:                                + months[Calendar.MONTH] + fCalendar.get(Calendar.YEAR) +     + fCalendar.get(Calendar.HOUR_OF_DAY)
gui/EditorPane.java:63:                                +     + fCalendar.get(Calendar.MINUTE) +        );
gui/EditorPane.java:65:                        boolean succes =  f.createNewFile();
gui/EditorPane.java:67:                        if (!succes) {
gui/EditorPane.java:68:                                f.delete();
gui/EditorPane.java:69:                                f.createNewFile();
gui/EditorPane.java:72:                        writePermission = f.canWrite();
gui/EditorPane.java:73:                        fFile = new RandomAccessFile(f,     );
gui/EditorPane.java:74:                        fFile.setLength(0);
gui/EditorPane.java:75:                        if (writePermission) {
gui/EditorPane.java:77:                               fFile.writeBytes(                              );
gui/EditorPane.java:79:                        fURL = f.toURL();
gui/EditorPane.java:80:                        this.setPage(fURL);
gui/EditorPane.java:81:                        this.setEditable(false);
gui/EditorPane.java:82:                        this.setDoubleBuffered(true);
gui/EditorPane.java:83:                        this.setContentType(           );
gui/EditorPane.java:84:                        fEmoticonsAndSounds = new EmoticonsAndSounds();
gui/EditorPane.java:85:                } catch (Exception e) {
gui/EditorPane.java:86:                System.err.println(e.getMessage()); e.printStackTrace();
gui/EditorPane.java:94:        private void playSound(String soundToPlay) {
gui/EditorPane.java:95:                if (soundToPlay != null) {
gui/EditorPane.java:97:                final String sound = fEmoticonsAndSounds.getSound(soundToPlay);
gui/EditorPane.java:99:                        if (sound != null) {                            
gui/EditorPane.java:100:                                (new Thread() {
gui/EditorPane.java:101:                                        public void run() {
gui/EditorPane.java:102:                                                SimpleAudioPlayer ap = new SimpleAudioPlayer();
gui/EditorPane.java:103:                                                ap.play(sound);
gui/EditorPane.java:105:                                }).start();
gui/EditorPane.java:114:        private String insertEmoticons(String text) {
gui/EditorPane.java:115:                StringTokenizer st = new StringTokenizer(text);
gui/EditorPane.java:116:                Vector tokens = new Vector();
gui/EditorPane.java:119:                while (st.hasMoreTokens()) {
gui/EditorPane.java:120:                tokens.add(st.nextToken());
gui/EditorPane.java:123:                for (int i = 0; i < tokens.size(); ++i) {
gui/EditorPane.java:124:                        String s = (String)tokens.elementAt(i);
gui/EditorPane.java:126:                        String emoticon = fEmoticonsAndSounds.getEmoticon(s);
gui/EditorPane.java:128:                        if (emoticon != null) {
gui/EditorPane.java:131:                                tokens.removeElementAt(i);
gui/EditorPane.java:132:                                tokens.insertElementAt(emoticon, i);
gui/EditorPane.java:136:                StringBuffer sBuf = new StringBuffer();
gui/EditorPane.java:137:                for (int i = 0; i < tokens.size(); ++i) {
gui/EditorPane.java:138:                        sBuf.append((String)tokens.elementAt(i));
gui/EditorPane.java:139:                        sBuf.append(   );
gui/EditorPane.java:142:                this.playSound(soundToPlay);
gui/EditorPane.java:143:                return sBuf.toString();
gui/EditorPane.java:152:        private void insertHTML(JEditorPane editor, String html, int location) throws IOException {
gui/EditorPane.java:154:                        HTMLEditorKit kit = (HTMLEditorKit) editor.getEditorKit();
gui/EditorPane.java:155:                        Document doc = editor.getDocument();
gui/EditorPane.java:156:                        StringReader reader = new StringReader(html);
gui/EditorPane.java:157:                        kit.read(reader, doc, location);
gui/EditorPane.java:158:                } catch (BadLocationException e) {
gui/EditorPane.java:167:        public void append(String who, String text) {
gui/EditorPane.java:171:                        Document doc = getDocument();
gui/EditorPane.java:173:						text = text.replaceAll(    ,         );
gui/EditorPane.java:174:                        text = this.insertEmoticons(text);
gui/EditorPane.java:177:                        fFile.setLength(fFile.length() - s.getBytes().length);
gui/EditorPane.java:179:                        fCalendar =  new GregorianCalendar(TimeZone.getTimeZone(timezone));
gui/EditorPane.java:180:                        int hour = fCalendar.get(Calendar.HOUR_OF_DAY);
gui/EditorPane.java:181:                        int min = fCalendar.get(Calendar.MINUTE);
gui/EditorPane.java:183:                        StringBuffer sBuf = new StringBuffer();
gui/EditorPane.java:184:                        if (who.equals(         )) {
gui/EditorPane.java:189:                        sBuf.append(                           + color +        );
gui/EditorPane.java:191:                        if (hour < 10) {
gui/EditorPane.java:192:                                sBuf.append(   );
gui/EditorPane.java:194:                        sBuf.append(hour);
gui/EditorPane.java:195:                        sBuf.append(   );
gui/EditorPane.java:196:                        if (min < 10) {
gui/EditorPane.java:197:                                sBuf.append(   );
gui/EditorPane.java:199:                        sBuf.append(min);
gui/EditorPane.java:201:                        sBuf.append(    );
gui/EditorPane.java:202:                        sBuf.append(this.insertEmoticons(who));
gui/EditorPane.java:203:                        sBuf.append(                    );
gui/EditorPane.java:204:                        sBuf.append(               + color +     + text);
gui/EditorPane.java:205:                        sBuf.append(               );
gui/EditorPane.java:206:                       	sBuf.append(                );
gui/EditorPane.java:208:                        text = sBuf.toString();
gui/EditorPane.java:209:                        if (writePermission) fFile.writeBytes(text);
gui/EditorPane.java:210:                        this.insertHTML(this, text, doc.getLength());
gui/EditorPane.java:211:                        setCaretPosition(doc.getLength());
gui/EditorPane.java:213:                } catch (IOException e) {
gui/EditorPane.java:214:                        System.out.println(e.getMessage());
gui/EditorPane.java:218:        public void close() {
gui/DumpListener.java:33:	public void dumpTriggered();
gui/DumpListener.java:34:	public void dumpUnTriggered();
gui/EmoticonSelector.java:62:	public EmoticonSelector(int x, int y, JTextArea ja) {
gui/EmoticonSelector.java:63:		new JFrame(           );
gui/EmoticonSelector.java:64:		fJPanel = new JPanel();
gui/EmoticonSelector.java:65:		fJPanel.setLayout(new GridLayout(7,9));
gui/EmoticonSelector.java:66:		fJPanel.setBackground(Color.WHITE);
gui/EmoticonSelector.java:69:		this.setLocation(0,0);
gui/EmoticonSelector.java:70:		fEmoticonsAndSounds = new EmoticonsAndSounds();
gui/EmoticonSelector.java:71:		this.addEmoticons();
gui/EmoticonSelector.java:72:		this.getContentPane().add(fJPanel);
gui/EmoticonSelector.java:73:		this.pack();
gui/EmoticonSelector.java:74:		this.setVisible(true);
gui/EmoticonSelector.java:77:	public void addEmoticons() {
gui/EmoticonSelector.java:78:		fC = fEmoticonsAndSounds.getAllEmoticons();
gui/EmoticonSelector.java:79:		oa = fC.toArray();
gui/EmoticonSelector.java:80:		fS =  fEmoticonsAndSounds.getAllEmoticonKeys();
gui/EmoticonSelector.java:81:		oa2 = fS.toArray();
gui/EmoticonSelector.java:83:		for (i = 0; i < oa.length; ++i) {
gui/EmoticonSelector.java:84:			ImageIcon imgIcon = new ImageIcon((oa[i]).toString());
gui/EmoticonSelector.java:85:			JLabel jl = new JLabel(imgIcon);
gui/EmoticonSelector.java:86:			jl.setPreferredSize(new Dimension(30,22));
gui/EmoticonSelector.java:88:			MouseListener ml = new MouseAdapter() {
gui/EmoticonSelector.java:91:				public void mouseClicked(MouseEvent e) {
gui/EmoticonSelector.java:92:					fMessageBox.append(    + (oa2[j]).toString().toUpperCase() +    );
gui/EmoticonSelector.java:95:			jl.addMouseListener(ml);
gui/EmoticonSelector.java:96:			fJPanel.add(jl);
gui/EmoticonSelector.java:103:	public void mouseClicked(MouseEvent e) {
gui/EmoticonSelector.java:109:	public void mousePressed(MouseEvent e) {
gui/EmoticonSelector.java:115:	public void mouseReleased(MouseEvent e) {
gui/EmoticonSelector.java:121:	public void mouseEntered(MouseEvent e) {
gui/EmoticonSelector.java:127:	public void mouseExited(MouseEvent e) {
gui/SimpleAudioPlayer.java:94:	public void play(String arg)
gui/SimpleAudioPlayer.java:98:		File	soundFile = new File(strFilename);
gui/SimpleAudioPlayer.java:106:			audioInputStream = AudioSystem.getAudioInputStream(soundFile);
gui/SimpleAudioPlayer.java:108:		catch (Exception e)
gui/SimpleAudioPlayer.java:115:			e.printStackTrace();
gui/SimpleAudioPlayer.java:129:		AudioFormat	audioFormat = audioInputStream.getFormat();
gui/SimpleAudioPlayer.java:151:		DataLine.Info	info = new DataLine.Info(SourceDataLine.class,
gui/SimpleAudioPlayer.java:155:			line = (SourceDataLine) AudioSystem.getLine(info);
gui/SimpleAudioPlayer.java:161:			line.open(audioFormat);
gui/SimpleAudioPlayer.java:163:		catch (LineUnavailableException e)
gui/SimpleAudioPlayer.java:169:		catch (Exception e)
gui/SimpleAudioPlayer.java:180:		line.start();
gui/SimpleAudioPlayer.java:194:		while (nBytesRead != -1)
gui/SimpleAudioPlayer.java:198:				nBytesRead = audioInputStream.read(abData, 0, abData.length);
gui/SimpleAudioPlayer.java:200:			catch (IOException e)
gui/SimpleAudioPlayer.java:202:				e.printStackTrace();
gui/SimpleAudioPlayer.java:204:			if (nBytesRead >= 0)
gui/SimpleAudioPlayer.java:206:				int	nBytesWritten = line.write(abData, 0, nBytesRead);
gui/SimpleAudioPlayer.java:219:		line.drain();
gui/SimpleAudioPlayer.java:224:		line.close();
gui/AddBuddy.java:46:	public AddBuddy(AProtocol p) {
gui/AddBuddy.java:50:		new JFrame(           );
gui/AddBuddy.java:51:		setSize(300, 200);
gui/AddBuddy.java:52:		setLocation(200,200);
gui/AddBuddy.java:54:		panePreferences = new JPanel();
gui/AddBuddy.java:55:		paneError = new JPanel();
gui/AddBuddy.java:57:		addBuddyWidgets();
gui/AddBuddy.java:60:	private void addBuddyWidgets() {
gui/AddBuddy.java:61:		labelLogin = new JLabel(       );
gui/AddBuddy.java:62:		labelNick = new JLabel(          );
gui/AddBuddy.java:63:		labelError = new JLabel(  );
gui/AddBuddy.java:65:		textLogin = new JTextField();
gui/AddBuddy.java:66:		textNick = new JTextField();
gui/AddBuddy.java:68:		buttonOk = new JButton(    );
gui/AddBuddy.java:70:		buttonOk.setActionCommand(    );
gui/AddBuddy.java:71:		buttonOk.addActionListener(this);
gui/AddBuddy.java:73:		panePreferences.setBorder(BorderFactory.createEmptyBorder(
gui/AddBuddy.java:79:        panePreferences.setLayout(new GridLayout(0, 2));
gui/AddBuddy.java:81:		panePreferences.add(labelLogin);
gui/AddBuddy.java:82:		panePreferences.add(textLogin);
gui/AddBuddy.java:83:		panePreferences.add(labelNick);
gui/AddBuddy.java:84:		panePreferences.add(textNick);
gui/AddBuddy.java:85:		panePreferences.add(buttonOk);
gui/AddBuddy.java:87:		paneError.add(labelError);
gui/AddBuddy.java:89:		getContentPane().add(panePreferences, BorderLayout.CENTER);
gui/AddBuddy.java:90:		getContentPane().add(paneError, BorderLayout.SOUTH);
gui/AddBuddy.java:91:		setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
gui/AddBuddy.java:92:		pack();
gui/AddBuddy.java:93:		setVisible(false);	
gui/AddBuddy.java:96:	public void actionPerformed(ActionEvent e) {
gui/AddBuddy.java:97:		if(e.getActionCommand().equals(    )) {
gui/AddBuddy.java:98:			if(textLogin.getText().equals(  )||textNick.getText().equals(  )) {
gui/AddBuddy.java:99:					labelError.setText(                         );
gui/AddBuddy.java:100:					System.out.println(                        );
gui/AddBuddy.java:103:				fModel.addContact(textLogin.getText(), textNick.getText());
gui/AddBuddy.java:104:				labelError.setText(  );
gui/AddBuddy.java:105:				setVisible(false);
testmessenger/ICQ/ICQSRV_FAMILIES2PacketTest.java:44:	public ICQSRV_FAMILIES2PacketTest(String arg0) {
testmessenger/ICQ/ICQSRV_FAMILIES2PacketTest.java:45:		super(arg0);
testmessenger/ICQ/ICQSRV_FAMILIES2PacketTest.java:51:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQSRV_FAMILIES2PacketTest.java:52:		super.setUp();
testmessenger/ICQ/ICQSRV_FAMILIES2PacketTest.java:55:	public static Test suite() {
testmessenger/ICQ/ICQSRV_FAMILIES2PacketTest.java:56:		return new TestSuite(ICQSRV_FAMILIES2PacketTest.class);
testmessenger/ICQ/ICQSRV_FAMILIES2PacketTest.java:62:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQSRV_FAMILIES2PacketTest.java:63:		super.tearDown();
testmessenger/ICQ/ICQSRV_FAMILIES2PacketTest.java:66:	public void testICQSRV_FAMILIES2Packet() {
testmessenger/ICQ/ICQSRV_FAMILIES2PacketTest.java:69:	public static void main (String[] args) {
testmessenger/ICQ/ICQSRV_FAMILIES2PacketTest.java:70:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:46:	public ICQCLI_SETICBMPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:47:		super(arg0);
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:53:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:54:		super.setUp();
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:60:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:61:		super.tearDown();
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:64:	public static Test suite() {
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:65:		return new TestSuite(ICQCLI_SETICBMPacketTest.class);
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:68:	public void testICQCLI_SETICBMPacket() {
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:69:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:70:		ICQCLI_SETICBMPacket p = new ICQCLI_SETICBMPacket(v);
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:73:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:74:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:75:		ICQCLI_SETICBMPacket p = new ICQCLI_SETICBMPacket(v);
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:77:		assertTrue(p.getKindOfPacket().equals(             ));
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:80:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:81:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:82:		ICQCLI_SETICBMPacket p = new ICQCLI_SETICBMPacket(v);
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:84:		assertTrue(p.getContentHex().substring(8).equals(                                                          ));
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:87:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:88:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:89:		ICQCLI_SETICBMPacket p = new ICQCLI_SETICBMPacket(v);
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:91:		assertTrue(p.getLength() == 32);
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:94:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_SETICBMPacketTest.java:95:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:47:	public ICQCLI_REQLOCATIONPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:48:		super(arg0);
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:54:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:55:		super.setUp();
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:61:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:62:		super.tearDown();
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:65:	public static Test suite() {
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:66:		return new TestSuite(ICQCLI_REQLOCATIONPacketTest.class);
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:69:	public void testICQCLI_REQLOCATIONPacket() {
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:70:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:72:		ICQCLI_REQLOCATIONPacket p = new ICQCLI_REQLOCATIONPacket(v);	
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:75:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:76:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:78:		ICQCLI_REQLOCATIONPacket p = new ICQCLI_REQLOCATIONPacket(v);	
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:80:		assertTrue(p.getContentHex().substring(8).equals(                          ));
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:83:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:84:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:86:		ICQCLI_REQLOCATIONPacket p = new ICQCLI_REQLOCATIONPacket(v);	
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:87:		assertTrue(p.getLength() == 16);
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:90:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_REQLOCATIONPacketTest.java:91:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:45:	public ICQSRV_RATESPacketTest(String arg0) {
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:46:		super(arg0);
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:52:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:53:		super.setUp();
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:59:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:60:		super.tearDown();
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:63:	public static Test suite() {
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:64:		return new TestSuite(ICQSRV_RATESPacketTest.class);
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:67:	public void testICQSRV_RATESPacket() {
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:68:		ICQSRV_RATESPacket rp = new ICQSRV_RATESPacket
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:71:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:72:		ICQSRV_RATESPacket rp = new ICQSRV_RATESPacket
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:73:		assertTrue(rp.getKindOfPacket().equals(           ));
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:76:	public void testGetContentHex() {
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:77:		ICQSRV_RATESPacket rp = new ICQSRV_RATESPacket(                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    );
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:78:		assertTrue(rp.getContentHex().equals
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:81:	public void testGetLength() {
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:82:		ICQSRV_RATESPacket rp = new ICQSRV_RATESPacket(                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    );
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:83:		assertTrue(rp.getLength() == 833);
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:86:	public static void main (String[] args) {
testmessenger/ICQ/ICQSRV_RATESPacketTest.java:87:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:46:	public ICQCLI_ACKRATESPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:47:		super(arg0);
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:50:	public static Test suite() {
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:51:		return new TestSuite(ICQCLI_ACKRATESPacketTest.class);
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:57:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:58:		super.setUp();
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:64:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:65:		super.tearDown();
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:68:	public void testICQCLI_ACKRATESPacket() {
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:69:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:71:		ICQCLI_ACKRATESPacket p = new ICQCLI_ACKRATESPacket(v);
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:75:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:76:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:78:		ICQCLI_ACKRATESPacket p = new ICQCLI_ACKRATESPacket(v);
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:80:		assertTrue(p.getKindOfPacket().equals(              ));
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:83:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:84:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:86:		ICQCLI_ACKRATESPacket p = new ICQCLI_ACKRATESPacket(v);
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:87:		assertTrue(p.getContentHex().substring(8).equals(                                              ));
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:90:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:91:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:93:		ICQCLI_ACKRATESPacket p = new ICQCLI_ACKRATESPacket(v);
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:95:		assertTrue(p.getLength() == 26);
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:98:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_ACKRATESPacketTest.java:99:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:47:	public ICQCLI_REQLISTSPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:48:		super(arg0);
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:54:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:55:		super.setUp();
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:61:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:62:		super.tearDown();
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:65:	public static Test suite() {
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:66:		return new TestSuite(ICQCLI_REQLISTSPacketTest.class);
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:69:	public void testICQCLI_REQLISTSPacket() {
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:70:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:72:		ICQCLI_REQLISTSPacket p = new ICQCLI_REQLISTSPacket(v);	
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:75:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:76:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:78:		ICQCLI_REQLISTSPacket p = new ICQCLI_REQLISTSPacket(v);	
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:79:		assertTrue(p.getKindOfPacket().equals(              ));
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:82:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:83:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:85:		ICQCLI_REQLISTSPacket p = new ICQCLI_REQLISTSPacket(v);	
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:87:		assertTrue(p.getContentHex().substring(8).equals(                          ));
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:90:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:91:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:93:		ICQCLI_REQLISTSPacket p = new ICQCLI_REQLISTSPacket(v);	
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:94:		assertTrue(p.getLength() == 16);
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:97:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_REQLISTSPacketTest.java:98:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:47:	public ICQCLI_IDENTPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:48:		super(arg0);
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:54:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:55:		super.setUp();
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:61:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:62:		super.tearDown();
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:65:	public static Test suite() {
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:66:		return new TestSuite(ICQCLI_IDENTPacketTest.class);
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:69:	public void testICQCLI_IDENTPacket() {
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:70:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:71:		v.addElement(Utils.UIN(           ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:72:     		v.addElement(Utils.ICQEncryptPass(          ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:73:     		v.addElement(                                  
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:77:		ICQCLI_IDENTPacket p = new ICQCLI_IDENTPacket(v);
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:79:		Vector w = new Vector();
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:80:		w.addElement(Utils.UIN(           ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:81:     		w.addElement(Utils.ICQEncryptPass(          ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:82:     		w.addElement(                                  
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:86:		ICQCLI_IDENTPacket q = new ICQCLI_IDENTPacket(w);
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:89:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:90:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:91:		v.addElement(Utils.UIN(           ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:92:     		v.addElement(Utils.ICQEncryptPass(          ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:93:     		v.addElement(                                  
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:97:		ICQCLI_IDENTPacket p = new ICQCLI_IDENTPacket(v);
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:99:		assertTrue(p.getKindOfPacket().equals(           ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:101:		Vector w = new Vector();
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:102:		w.addElement(Utils.UIN(           ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:103:     	w.addElement(Utils.ICQEncryptPass(          ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:104:     	w.addElement(                                  
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:108:		ICQCLI_IDENTPacket q = new ICQCLI_IDENTPacket(w);
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:109:		assertTrue(q.getKindOfPacket().equals(           ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:112:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:113:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:114:		v.addElement(Utils.UIN(           ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:115:     		v.addElement(Utils.ICQEncryptPass(          ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:116:     		v.addElement(                                  
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:120:		ICQCLI_IDENTPacket p = new ICQCLI_IDENTPacket(v);
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:122:		assertTrue(p.getContentHex().substring(8).equals(                                                                                                                                                                                                                                                                                  ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:124:		Vector w = new Vector();
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:125:		w.addElement(Utils.UIN(           ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:126:     	w.addElement(Utils.ICQEncryptPass(          ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:127:     	w.addElement(                                  
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:131:		ICQCLI_IDENTPacket q = new ICQCLI_IDENTPacket(w);
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:132:		assertTrue(q.getContentHex().substring(8).equals(                                                                                                                                                                                                                                                                                  ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:135:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:136:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:137:		v.addElement(Utils.UIN(           ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:138:     		v.addElement(Utils.ICQEncryptPass(          ));
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:139:     		v.addElement(                                  
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:143:		ICQCLI_IDENTPacket p = new ICQCLI_IDENTPacket(v);
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:145:		assertTrue(p.getLength() == 140);
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:148:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_IDENTPacketTest.java:149:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:46:	public ICQCLI_ADDCONTACTPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:47:		super(arg0);
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:50:	public static Test suite() {
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:51:		return new TestSuite(ICQCLI_ADDCONTACTPacketTest.class);
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:57:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:58:		super.setUp();
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:64:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:65:		super.tearDown();
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:68:	public void testICQCLI_ADDCONTACTPacket() {
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:69:		Vector uins = new Vector();
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:71:		ICQCLI_ADDCONTACTPacket p = new ICQCLI_ADDCONTACTPacket(uins);		
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:74:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:75:		Vector uins = new Vector();
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:77:		ICQCLI_ADDCONTACTPacket p = new ICQCLI_ADDCONTACTPacket(uins);		
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:79:		assertTrue(p.getKindOfPacket().equals(                ));
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:82:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:86:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:90:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_ADDCONTACTPacketTest.java:91:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:46:	public ICQCLI_COOKIEPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:47:		super(arg0);
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:53:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:54:		super.setUp();
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:60:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:61:		super.tearDown();
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:64:	public static Test suite() {
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:65:		return new TestSuite(ICQCLI_COOKIEPacketTest.class);
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:68:	public void testICQCLI_COOKIEPacket() {
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:69:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:71:		v.addElement
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:72:		ICQCLI_COOKIEPacket p = new ICQCLI_COOKIEPacket(v);
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:75:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:76:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:78:		v.addElement
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:80:		ICQCLI_COOKIEPacket p = new ICQCLI_COOKIEPacket(v);
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:81:		assertTrue(p.getKindOfPacket().equals(            ));
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:84:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:85:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:87:		v.addElement
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:89:		ICQCLI_COOKIEPacket p = new ICQCLI_COOKIEPacket(v);
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:90:		assertTrue(p.getContentHex().substring(8).equals
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:94:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:95:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:97:		v.addElement
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:99:		ICQCLI_COOKIEPacket p = new ICQCLI_COOKIEPacket(v);
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:101:		assertTrue(p.getLength() == 270);
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:104:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_COOKIEPacketTest.java:105:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQSRV_FAMILIESPacketTest.java:44:	public ICQSRV_FAMILIESPacketTest(String arg0) {
testmessenger/ICQ/ICQSRV_FAMILIESPacketTest.java:45:		super(arg0);
testmessenger/ICQ/ICQSRV_FAMILIESPacketTest.java:48:	public static Test suite() {
testmessenger/ICQ/ICQSRV_FAMILIESPacketTest.java:49:		return new TestSuite(ICQSRV_FAMILIESPacketTest.class);
testmessenger/ICQ/ICQSRV_FAMILIESPacketTest.java:55:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQSRV_FAMILIESPacketTest.java:56:		super.setUp();
testmessenger/ICQ/ICQSRV_FAMILIESPacketTest.java:62:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQSRV_FAMILIESPacketTest.java:63:		super.tearDown();
testmessenger/ICQ/ICQSRV_FAMILIESPacketTest.java:66:	public void testICQSRV_FAMILIESPacket() {
testmessenger/ICQ/ICQSRV_FAMILIESPacketTest.java:69:	public static void main (String[] args) {
testmessenger/ICQ/ICQSRV_FAMILIESPacketTest.java:70:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:46:	public ICQCLI_REQROSTERPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:47:		super(arg0);
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:53:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:54:		super.setUp();
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:60:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:61:		super.tearDown();
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:64:	public static Test suite() {
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:65:		return new TestSuite(ICQCLI_REQROSTERPacketTest.class);
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:68:	public void testICQCLI_REQROSTERPacket() {
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:69:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:71:		ICQCLI_REQROSTERPacket p = new ICQCLI_REQROSTERPacket(v);	
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:74:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:75:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:77:		ICQCLI_REQROSTERPacket p = new ICQCLI_REQROSTERPacket(v);	
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:80:		assertTrue(p.getContentHex().substring(8).equals(                          ));
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:83:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:84:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:86:		ICQCLI_REQROSTERPacket p = new ICQCLI_REQROSTERPacket(v);	
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:87:		assertTrue(p.getLength() == 16);
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:90:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_REQROSTERPacketTest.java:91:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_CONTACTTest.java:41:	protected void setUp() {
testmessenger/ICQ/ICQCLI_CONTACTTest.java:45:	public static Test suite() {
testmessenger/ICQ/ICQCLI_CONTACTTest.java:69:		return new TestSuite(ICQCLI_CONTACTTest.class);
testmessenger/ICQ/ICQCLI_CONTACTTest.java:71:	public void testGetUIN() {
testmessenger/ICQ/ICQCLI_CONTACTTest.java:75:	public void testGetNick() {
testmessenger/ICQ/ICQCLI_CONTACTTest.java:79:	public void testGetIP() {
testmessenger/ICQ/ICQCLI_CONTACTTest.java:83:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_CONTACTTest.java:84:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQProtocolTest.java:44:	public ICQProtocolTest(String arg0) {
testmessenger/ICQ/ICQProtocolTest.java:45:		super(arg0);
testmessenger/ICQ/ICQProtocolTest.java:48:	public static Test suite() {
testmessenger/ICQ/ICQProtocolTest.java:49:		return new TestSuite(ICQProtocolTest.class);
testmessenger/ICQ/ICQProtocolTest.java:55:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQProtocolTest.java:56:		super.setUp();
testmessenger/ICQ/ICQProtocolTest.java:62:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQProtocolTest.java:63:		super.tearDown();
testmessenger/ICQ/ICQProtocolTest.java:66:	public void testSendPacket() {
testmessenger/ICQ/ICQProtocolTest.java:72:	public void testICQProtocolDataBuffer() {
testmessenger/ICQ/ICQProtocolTest.java:78:	public void testICQProtocolStringString() {
testmessenger/ICQ/ICQProtocolTest.java:81:	public void testGetUIN() {
testmessenger/ICQ/ICQProtocolTest.java:84:	public void testIsConnected() {
testmessenger/ICQ/ICQProtocolTest.java:87:	public void testGetNumberOfContacts() {
testmessenger/ICQ/ICQProtocolTest.java:93:	public void testAddContactICQContact() {
testmessenger/ICQ/ICQProtocolTest.java:99:	public void testLoginStringStringStringI() {
testmessenger/ICQ/ICQProtocolTest.java:105:	public void testLoginStringI() {
testmessenger/ICQ/ICQProtocolTest.java:108:	public void testSendMessage() {
testmessenger/ICQ/ICQProtocolTest.java:111:	public void testChangeStatus() {
testmessenger/ICQ/ICQProtocolTest.java:114:	public void testGetContactListFromServer() {
testmessenger/ICQ/ICQProtocolTest.java:117:	public void testGetContactList() {
testmessenger/ICQ/ICQProtocolTest.java:123:	public void testAddContactString() {
testmessenger/ICQ/ICQProtocolTest.java:126:	public void testLogout() {
testmessenger/ICQ/ICQProtocolTest.java:129:	public void testShutdown() {
testmessenger/ICQ/ICQProtocolTest.java:132:	public void testAnalyzePacket() {
testmessenger/ICQ/ICQProtocolTest.java:135:	public void testConnect() {
testmessenger/ICQ/ICQProtocolTest.java:138:	public void testDisconnect() {
testmessenger/ICQ/ICQProtocolTest.java:141:	public void testGetServer() {
testmessenger/ICQ/ICQProtocolTest.java:144:	public static void main (String[] args) {
testmessenger/ICQ/ICQProtocolTest.java:145:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:45:	public ICQCLI_REQICBMPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:46:		super(arg0);
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:52:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:53:		super.setUp();
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:59:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:60:		super.tearDown();
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:63:	public static Test suite() {
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:64:		return new TestSuite(ICQCLI_REQICBMPacketTest.class);
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:67:	public void testICQCLI_REQICBMPacket() {
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:68:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:70:		ICQCLI_REQICBMPacket p = new ICQCLI_REQICBMPacket(v);	
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:73:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:74:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:76:		ICQCLI_REQICBMPacket p = new ICQCLI_REQICBMPacket(v);	
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:77:		assertTrue(p.getKindOfPacket().equals(             ));
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:80:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:81:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:83:		ICQCLI_REQICBMPacket p = new ICQCLI_REQICBMPacket(v);	
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:85:		assertTrue(p.getContentHex().substring(8).equals(                          ));
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:88:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:89:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:91:		ICQCLI_REQICBMPacket p = new ICQCLI_REQICBMPacket(v);	
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:92:		assertTrue(p.getLength() == 16);
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:95:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_REQICBMPacketTest.java:96:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQSRV_HELLOPacketTest.java:43:	public ICQSRV_HELLOPacketTest(String arg0) {
testmessenger/ICQ/ICQSRV_HELLOPacketTest.java:44:		super(arg0);
testmessenger/ICQ/ICQSRV_HELLOPacketTest.java:47:	public static Test suite() {
testmessenger/ICQ/ICQSRV_HELLOPacketTest.java:48:		return new TestSuite(ICQSRV_HELLOPacketTest.class);
testmessenger/ICQ/ICQSRV_HELLOPacketTest.java:54:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQSRV_HELLOPacketTest.java:55:		super.setUp();
testmessenger/ICQ/ICQSRV_HELLOPacketTest.java:61:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQSRV_HELLOPacketTest.java:62:		super.tearDown();
testmessenger/ICQ/ICQSRV_HELLOPacketTest.java:65:	public void testICQSRV_HELLOPacket() {
testmessenger/ICQ/ICQSRV_HELLOPacketTest.java:69:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQSRV_HELLOPacketTest.java:72:	public void testGetContentHex() {
testmessenger/ICQ/ICQSRV_HELLOPacketTest.java:75:	public void testGetLength() {
testmessenger/ICQ/ICQSRV_HELLOPacketTest.java:78:	public static void main (String[] args) {
testmessenger/ICQ/ICQSRV_HELLOPacketTest.java:79:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:46:	public ICQCLI_SENDMSGV1PacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:47:		super(arg0);
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:53:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:54:		super.setUp();
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:60:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:61:		super.tearDown();
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:64:	public static Test suite() {
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:65:		return new TestSuite(ICQCLI_SENDMSGV1PacketTest.class);
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:68:	public void testICQCLI_SENDMSGV1Packet() {
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:69:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:70:		v.addElement(Utils.UIN(           ));
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:71:		v.addElement(Utils.HexFromString(      ));
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:72:		ICQCLI_SENDMSGV1Packet p = new ICQCLI_SENDMSGV1Packet(v);
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:75:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:76:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:77:		v.addElement(Utils.UIN(           ));
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:78:		v.addElement(Utils.HexFromString(      ));
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:79:		ICQCLI_SENDMSGV1Packet p = new ICQCLI_SENDMSGV1Packet(v);
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:81:		assertTrue(p.getKindOfPacket().equals(               ));
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:84:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:85:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:86:		v.addElement(Utils.UIN(           ));
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:87:		v.addElement(Utils.HexFromString(      ));
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:88:		ICQCLI_SENDMSGV1Packet p = new ICQCLI_SENDMSGV1Packet(v);
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:94:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:95:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:96:		v.addElement(Utils.UIN(           ));
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:97:		v.addElement(Utils.HexFromString(      ));
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:98:		ICQCLI_SENDMSGV1Packet p = new ICQCLI_SENDMSGV1Packet(v);
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:104:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_SENDMSGV1PacketTest.java:105:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQSRV_COOKIEPacketTest.java:54:	public ICQSRV_COOKIEPacketTest(String arg0) {
testmessenger/ICQ/ICQSRV_COOKIEPacketTest.java:55:		super(arg0);
testmessenger/ICQ/ICQSRV_COOKIEPacketTest.java:58:	public void testICQSRV_FAMILIES2Packet() {
testmessenger/ICQ/ICQSRV_COOKIEPacketTest.java:71:		ICQSRV_COOKIEPacket p = new ICQSRV_COOKIEPacket(fCookiePacketHexString);
testmessenger/ICQ/ICQSRV_COOKIEPacketTest.java:73:		assertTrue(p.getCookie().equals(cookie));
testmessenger/ICQ/ICQSRV_COOKIEPacketTest.java:74:		assertTrue(p.getIp().equals(              ));
testmessenger/ICQ/ICQSRV_COOKIEPacketTest.java:75:		assertTrue(p.getPort() == 5190);
testmessenger/ICQ/ICQSRV_COOKIEPacketTest.java:78:	public static Test suite() {
testmessenger/ICQ/ICQSRV_COOKIEPacketTest.java:79:		return new TestSuite(ICQSRV_COOKIEPacketTest.class);
testmessenger/ICQ/ICQSRV_COOKIEPacketTest.java:85:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQSRV_COOKIEPacketTest.java:86:		super.setUp();
testmessenger/ICQ/ICQSRV_COOKIEPacketTest.java:92:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQSRV_COOKIEPacketTest.java:93:		super.tearDown();
testmessenger/ICQ/ICQSRV_COOKIEPacketTest.java:96:	public static void main (String[] args) {
testmessenger/ICQ/ICQSRV_COOKIEPacketTest.java:97:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:46:	public ICQCLI_REQBUDDYPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:47:		super(arg0);
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:53:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:54:		super.setUp();
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:60:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:61:		super.tearDown();
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:64:	public static Test suite() {
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:65:		return new TestSuite(ICQCLI_REQBUDDYPacketTest.class);
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:68:	public void testICQCLI_REQBUDDYPacket() {
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:69:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:71:		ICQCLI_REQBUDDYPacket p = new ICQCLI_REQBUDDYPacket(v);	
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:74:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:75:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:77:		ICQCLI_REQBUDDYPacket p = new ICQCLI_REQBUDDYPacket(v);	
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:78:		assertTrue(p.getKindOfPacket().equals(              ));
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:81:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:82:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:84:		ICQCLI_REQBUDDYPacket p = new ICQCLI_REQBUDDYPacket(v);	
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:86:		assertTrue(p.getContentHex().substring(8).equals(                          ));
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:89:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:90:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:92:		ICQCLI_REQBUDDYPacket p = new ICQCLI_REQBUDDYPacket(v);	
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:93:		assertTrue(p.getLength() == 16);
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:96:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_REQBUDDYPacketTest.java:97:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:46:	public ICQCLI_RATESREQUESTPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:47:		super(arg0);
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:53:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:54:		super.setUp();
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:60:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:61:		super.tearDown();
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:64:	public static Test suite() {
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:65:		return new TestSuite(ICQCLI_RATESREQUESTPacketTest.class);
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:68:	public void testICQCLI_RATESREQUESTPacket() {
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:71:	public void testSetKindOfPacket() {
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:74:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:75:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:77:		ICQCLI_RATESREQUESTPacket p = new ICQCLI_RATESREQUESTPacket(v);
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:79:		assertTrue(p.getKindOfPacket().equals(                  ));
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:82:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:85:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:86:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:88:		ICQCLI_RATESREQUESTPacket p = new ICQCLI_RATESREQUESTPacket(v);
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:90:		assertTrue(p.getLength() == 16);
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:93:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_RATESREQUESTPacketTest.java:94:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:46:	public ICQCLI_SETSTATUSPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:47:		super(arg0);
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:53:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:54:		super.setUp();
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:60:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:61:		super.tearDown();
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:64:	public static Test suite() {
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:65:		return new TestSuite(ICQCLI_SETSTATUSPacketTest.class);
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:68:	public void testICQCLI_SETSTATUSPacket() {
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:69:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:70:		v.addElement(        );
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:73:			ICQCLI_SETSTATUSPacket p = new ICQCLI_SETSTATUSPacket(v);
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:75:		catch(BadArgumentException e) {
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:76:			assertTrue(false);		
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:80:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:81:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:82:		v.addElement(        );
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:84:			ICQCLI_SETSTATUSPacket p = new ICQCLI_SETSTATUSPacket(v);
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:85:			assertTrue(p.getKindOfPacket().equals(               ));
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:87:		catch(BadArgumentException e) {
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:88:			assertTrue(false);		
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:93:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:94:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:95:		v.addElement(        );
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:97:			ICQCLI_SETSTATUSPacket p = new ICQCLI_SETSTATUSPacket(v);
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:98:			assertTrue(p.getContentHex().substring(8).equals(                                                                                                                                        ));
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:101:		catch(BadArgumentException e) {
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:102:			assertTrue(false);		
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:106:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:107:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:108:		v.addElement(        );
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:110:			ICQCLI_SETSTATUSPacket p = new ICQCLI_SETSTATUSPacket(v);
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:111:			assertTrue(p.getLength() == 71);
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:113:		catch(BadArgumentException e) {
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:114:			assertTrue(false);		
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:119:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_SETSTATUSPacketTest.java:120:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:46:	public ICQCLI_FAMILIESPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:47:		super(arg0);
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:50:	public static Test suite() {
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:51:		return new TestSuite(ICQCLI_ADDBUDDYPacketTest.class);
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:57:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:58:		super.setUp();
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:64:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:65:		super.tearDown();
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:68:	public void testICQCLI_FAMILIESPacket() {
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:69:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:71:		ICQCLI_FAMILIESPacket p = new ICQCLI_FAMILIESPacket(v);	
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:74:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:75:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:77:		ICQCLI_FAMILIESPacket p = new ICQCLI_FAMILIESPacket(v);
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:79:		assertTrue(p.getKindOfPacket().equals(              ));
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:82:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:83:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:85:		ICQCLI_FAMILIESPacket p = new ICQCLI_FAMILIESPacket(v);
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:87:		assertTrue(p.getContentHex().substring(8).equals(                                                                                                  ));
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:90:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:91:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:93:		ICQCLI_FAMILIESPacket p = new ICQCLI_FAMILIESPacket(v);
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:95:		assertTrue(p.getLength() == 52);
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:98:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_FAMILIESPacketTest.java:99:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:46:	public ICQCLI_REQINFOPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:47:		super(arg0);
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:53:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:54:		super.setUp();
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:60:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:61:		super.tearDown();
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:64:	public static Test suite() {
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:65:		return new TestSuite(ICQCLI_REQINFOPacketTest.class);
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:68:	public void testICQCLI_REQINFOPacket() {
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:69:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:71:		ICQCLI_REQINFOPacket p = new ICQCLI_REQINFOPacket(v);	
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:74:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:75:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:77:		ICQCLI_REQINFOPacket p = new ICQCLI_REQINFOPacket(v);	
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:78:		assertTrue(p.getKindOfPacket().equals(             ));
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:81:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:82:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:84:		ICQCLI_REQINFOPacket p = new ICQCLI_REQINFOPacket(v);	
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:86:		assertTrue(p.getContentHex().substring(8).equals(                          ));	
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:89:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:90:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:92:		ICQCLI_REQINFOPacket p = new ICQCLI_REQINFOPacket(v);	
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:93:		assertTrue(p.getLength() == 16);
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:96:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_REQINFOPacketTest.java:97:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:46:	public ICQCLI_REQBOSPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:47:		super(arg0);
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:53:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:54:		super.setUp();
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:60:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:61:		super.tearDown();
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:64:	public static Test suite() {
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:65:		return new TestSuite(ICQCLI_REQBOSPacketTest.class);
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:68:	public void testICQCLI_REQBOSPacket() {
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:69:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:71:		ICQCLI_REQBOSPacket p = new ICQCLI_REQBOSPacket(v);	
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:74:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:75:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:77:		ICQCLI_REQBOSPacket p = new ICQCLI_REQBOSPacket(v);	
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:78:		assertTrue(p.getKindOfPacket().equals(            ));
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:81:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:82:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:84:		ICQCLI_REQBOSPacket p = new ICQCLI_REQBOSPacket(v);	
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:86:		assertTrue(p.getContentHex().substring(8).equals(                          ));
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:89:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:90:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:92:		ICQCLI_REQBOSPacket p = new ICQCLI_REQBOSPacket(v);	
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:93:		assertTrue(p.getLength() == 16);
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:96:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_REQBOSPacketTest.java:97:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_READYPacketTest.java:45:	public ICQCLI_READYPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_READYPacketTest.java:46:		super(arg0);
testmessenger/ICQ/ICQCLI_READYPacketTest.java:52:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_READYPacketTest.java:53:		super.setUp();
testmessenger/ICQ/ICQCLI_READYPacketTest.java:59:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_READYPacketTest.java:60:		super.tearDown();
testmessenger/ICQ/ICQCLI_READYPacketTest.java:63:	public static Test suite() {
testmessenger/ICQ/ICQCLI_READYPacketTest.java:64:		return new TestSuite(ICQCLI_READYPacketTest.class);
testmessenger/ICQ/ICQCLI_READYPacketTest.java:68:	public void testICQCLI_READYPacket() {
testmessenger/ICQ/ICQCLI_READYPacketTest.java:69:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_READYPacketTest.java:71:		ICQCLI_READYPacket p = new ICQCLI_READYPacket(v);	
testmessenger/ICQ/ICQCLI_READYPacketTest.java:74:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQCLI_READYPacketTest.java:75:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_READYPacketTest.java:77:		ICQCLI_READYPacket p = new ICQCLI_READYPacket(v);	
testmessenger/ICQ/ICQCLI_READYPacketTest.java:78:		assertTrue(p.getKindOfPacket().equals(           ));
testmessenger/ICQ/ICQCLI_READYPacketTest.java:81:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_READYPacketTest.java:82:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_READYPacketTest.java:84:		ICQCLI_READYPacket p = new ICQCLI_READYPacket(v);	
testmessenger/ICQ/ICQCLI_READYPacketTest.java:86:		assertTrue(p.getContentHex().substring(8).equals(                                                                                                                                                          ));
testmessenger/ICQ/ICQCLI_READYPacketTest.java:89:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_READYPacketTest.java:90:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_READYPacketTest.java:92:		ICQCLI_READYPacket p = new ICQCLI_READYPacket(v);	
testmessenger/ICQ/ICQCLI_READYPacketTest.java:93:		assertTrue(p.getLength() == 80);
testmessenger/ICQ/ICQCLI_READYPacketTest.java:96:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_READYPacketTest.java:97:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_GOODBYEPacketTest.java:44:	public ICQCLI_GOODBYEPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_GOODBYEPacketTest.java:45:		super(arg0);
testmessenger/ICQ/ICQCLI_GOODBYEPacketTest.java:51:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_GOODBYEPacketTest.java:52:		super.setUp();
testmessenger/ICQ/ICQCLI_GOODBYEPacketTest.java:58:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_GOODBYEPacketTest.java:59:		super.tearDown();
testmessenger/ICQ/ICQCLI_GOODBYEPacketTest.java:62:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQCLI_GOODBYEPacketTest.java:65:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_GOODBYEPacketTest.java:68:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:47:	public ICQCLI_SENDMSGPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:48:		super(arg0);
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:54:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:55:		super.setUp();
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:62:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:63:		super.tearDown();
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:66:	public static Test suite() {
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:67:		return new TestSuite(ICQCLI_SENDMSGPacketTest.class);
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:70:	public void testICQCLI_SENDMSGPacket() {
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:71:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:72:		v.addElement(Utils.UIN(           ));
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:73:		   	v.addElement(Utils.HexFromString(      ));
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:74:		ICQCLI_SENDMSGPacket p = new ICQCLI_SENDMSGPacket(v);
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:77:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:78:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:79:		v.addElement(Utils.UIN(           ));
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:80:		   	v.addElement(Utils.HexFromString(      ));
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:81:		ICQCLI_SENDMSGPacket p = new ICQCLI_SENDMSGPacket(v);
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:83:		assertTrue(p.getKindOfPacket().equals(             ));
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:86:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:87:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:88:		v.addElement(Utils.UIN(           ));
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:89:		   	v.addElement(Utils.HexFromString(      ));
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:90:		ICQCLI_SENDMSGPacket p = new ICQCLI_SENDMSGPacket(v);
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:96:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:97:		Vector v = new Vector();
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:98:		v.addElement(Utils.UIN(           ));
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:99:		   	v.addElement(Utils.HexFromString(      ));
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:100:		ICQCLI_SENDMSGPacket p = new ICQCLI_SENDMSGPacket(v);
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:106:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_SENDMSGPacketTest.java:107:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:45:	public ICQSRV_REPLYROSTERPacketTest(String arg0) {
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:46:		super(arg0);
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:52:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:53:		super.setUp();
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:56:	public static Test suite() {
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:57:		return new TestSuite(ICQSRV_REPLYROSTERPacketTest.class);
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:63:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:64:		super.tearDown();
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:67:	public void testICQSRV_REPLYROSTERPacket() {
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:68:		ICQSRV_REPLYROSTERPacket rr1 = new ICQSRV_REPLYROSTERPacket
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:69:		ICQSRV_REPLYROSTERPacket rr2 = new ICQSRV_REPLYROSTERPacket
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:70:		ICQSRV_REPLYROSTERPacket rr3 = new ICQSRV_REPLYROSTERPacket(                                                                                                                                                                                                                                                                                                                                                                                          );
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:71:		ICQSRV_REPLYROSTERPacket rr4 = new ICQSRV_REPLYROSTERPacket	
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:74:	public void testGetKindOfPacket() {
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:75:		ICQSRV_REPLYROSTERPacket rr1 = new ICQSRV_REPLYROSTERPacket
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:76:		assertTrue(rr1.getKindOfPacket().equals(                 ));
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:77:		ICQSRV_REPLYROSTERPacket rr2 = new ICQSRV_REPLYROSTERPacket
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:78:		assertTrue(rr2.getKindOfPacket().equals(                 ));
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:79:		ICQSRV_REPLYROSTERPacket rr3 = new ICQSRV_REPLYROSTERPacket(                                                                                                                                                                                                                                                                                                                                                                                          );
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:80:		assertTrue(rr3.getKindOfPacket().equals(                 ));
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:81:		ICQSRV_REPLYROSTERPacket rr4 = new ICQSRV_REPLYROSTERPacket	
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:82:		assertTrue(rr4.getKindOfPacket().equals(                 ));
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:85:	public void testGetList() {
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:86:		ICQSRV_REPLYROSTERPacket rr1 = new ICQSRV_REPLYROSTERPacket(                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  );
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:87:		Vector v1 = rr1.getList();
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:88:		Vector ign1 = rr1.getIgnoreList();
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:89:		assertTrue(v1.size()+ign1.size() == 109);
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:90:		ICQSRV_REPLYROSTERPacket rr2 = new ICQSRV_REPLYROSTERPacket
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:91:		Vector v2 = rr2.getList();
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:92:		Vector ign2 = rr2.getIgnoreList();
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:93:		assertTrue(v2.size() +ign2.size() == 97);
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:94:		ICQSRV_REPLYROSTERPacket rr3 = new ICQSRV_REPLYROSTERPacket(                                                                                                                                                                                                                                                                                                                                                                                          );
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:95:		Vector v3 = rr3.getList(); 
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:96:		Vector ign3 = rr3.getIgnoreList();
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:97:		assertTrue(v3.size()+ign3.size() == 3);
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:98:		ICQSRV_REPLYROSTERPacket rr4 = new ICQSRV_REPLYROSTERPacket	
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:99:		Vector v4 = rr4.getList();
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:100:		Vector ign4 = rr4.getIgnoreList();
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:101:		assertTrue(v4.size()+ign4.size() == 42);
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:104:	public void testGetContentHex() {
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:105:		ICQSRV_REPLYROSTERPacket rr1 = new ICQSRV_REPLYROSTERPacket
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:106:		assertTrue(rr1.getContentHex().equals
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:107:		ICQSRV_REPLYROSTERPacket rr2 = new ICQSRV_REPLYROSTERPacket
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:108:		assertTrue(rr2.getContentHex().equals(                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ));
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:110:		ICQSRV_REPLYROSTERPacket rr3 = new ICQSRV_REPLYROSTERPacket(                                                                                                                                                                                                                                                                                                                                                                                          );
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:111:		assertTrue(rr3.getContentHex().equals(                                                                                                                                                                                                                                                                                                                                                                                          ));
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:112:		ICQSRV_REPLYROSTERPacket rr4 = new ICQSRV_REPLYROSTERPacket	
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:113:		assertTrue(rr4.getContentHex().equals
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:116:	public void testGetLength() {
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:117:		ICQSRV_REPLYROSTERPacket rr1 = new ICQSRV_REPLYROSTERPacket
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:119:		assertTrue(rr1.getLength() == 2144);
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:120:		ICQSRV_REPLYROSTERPacket rr2 = new ICQSRV_REPLYROSTERPacket
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:122:		assertTrue(rr2.getLength() == 2975);
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:123:		ICQSRV_REPLYROSTERPacket rr3 = new ICQSRV_REPLYROSTERPacket(                                                                                                                                                                                                                                                                                                                                                                                          );
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:125:		assertTrue(rr3.getLength() == 188);
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:126:		ICQSRV_REPLYROSTERPacket rr4 = new ICQSRV_REPLYROSTERPacket	
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:128:		assertTrue(rr4.getLength() == 1233);
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:131:	public static void main (String[] args) {
testmessenger/ICQ/ICQSRV_REPLYROSTERPacketTest.java:132:		junit.textui.TestRunner.run(suite());
testmessenger/ICQ/ICQCLI_ADDBUDDYPacketTest.java:46:	public ICQCLI_ADDBUDDYPacketTest(String arg0) {
testmessenger/ICQ/ICQCLI_ADDBUDDYPacketTest.java:47:		super(arg0);
testmessenger/ICQ/ICQCLI_ADDBUDDYPacketTest.java:50:	public static Test suite() {
testmessenger/ICQ/ICQCLI_ADDBUDDYPacketTest.java:51:		return new TestSuite(ICQCLI_ADDBUDDYPacketTest.class);
testmessenger/ICQ/ICQCLI_ADDBUDDYPacketTest.java:57:	protected void setUp() throws Exception {
testmessenger/ICQ/ICQCLI_ADDBUDDYPacketTest.java:58:		super.setUp();
testmessenger/ICQ/ICQCLI_ADDBUDDYPacketTest.java:64:	protected void tearDown() throws Exception {
testmessenger/ICQ/ICQCLI_ADDBUDDYPacketTest.java:65:		super.tearDown();
testmessenger/ICQ/ICQCLI_ADDBUDDYPacketTest.java:97:	public void testGetContentHex() {
testmessenger/ICQ/ICQCLI_ADDBUDDYPacketTest.java:100:	public void testGetLength() {
testmessenger/ICQ/ICQCLI_ADDBUDDYPacketTest.java:104:	public static void main (String[] args) {
testmessenger/ICQ/ICQCLI_ADDBUDDYPacketTest.java:105:		junit.textui.TestRunner.run(suite());
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:44:	public YahooSRV_MESSAGEPacketTest(String arg0) {
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:45:		super(arg0);
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:48:	public static Test suite() {
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:49:		return new TestSuite(YahooSRV_MESSAGEPacketTest.class);
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:52:	public void testYahooSRV_MESSAGEPacket() {
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:53:		YahooSRV_MESSAGEPacket p = new YahooSRV_MESSAGEPacket(                                                                                                                                                                                                                                                        );
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:55:		p = new YahooSRV_MESSAGEPacket(                                                                                                                  );
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:58:	public void testGetLogin() {
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:59:		YahooSRV_MESSAGEPacket p = new YahooSRV_MESSAGEPacket(                                                                                                                                                                                                                                                        );
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:61:		assertTrue(p.getLogin().equals(             ));
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:63:		p = new YahooSRV_MESSAGEPacket(                                                                                                                  );
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:65:		assertTrue(p.getLogin().equals(  ));
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:68:	public void testGetMessage() {
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:69:		YahooSRV_MESSAGEPacket p = new YahooSRV_MESSAGEPacket(                                                                                                                                                                                                                                                        );
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:71:		assertTrue(p.getMessage().equals(    ));
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:73:		p = new YahooSRV_MESSAGEPacket(                                                                                                                  );
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:75:		assertTrue(p.getMessage().equals(  ));
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:78:	public void testGetKindOfPacket() {
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:79:		YahooSRV_MESSAGEPacket p = new YahooSRV_MESSAGEPacket(                                                                                                                                                                                                                                                        );
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:81:		assertTrue(p.getKindOfPacket().equals(             ));
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:83:		p = new YahooSRV_MESSAGEPacket(                                                                                                                  );
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:85:		assertTrue(p.getKindOfPacket().equals(             ));
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:88:	public void testGetContentHex() {
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:89:		YahooSRV_MESSAGEPacket p = new YahooSRV_MESSAGEPacket(                                                                                                                                                                                                                                                        );
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:91:		assertTrue(p.getContentHex().equals(                                                                                                                                                                                                                                                        ));
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:93:		p = new YahooSRV_MESSAGEPacket(                                                                                                                  );
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:95:		assertTrue(p.getContentHex().equals(                                                                                                                  ));
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:98:	public static void main (String[] args) {
testmessenger/Yahoo/YahooSRV_MESSAGEPacketTest.java:99:		junit.textui.TestRunner.run(suite());
testmessenger/Yahoo/YahooSRV_AUTHPacketTest.java:45:	public YahooSRV_AUTHPacketTest(String arg0) {
testmessenger/Yahoo/YahooSRV_AUTHPacketTest.java:46:		super(arg0);
testmessenger/Yahoo/YahooSRV_AUTHPacketTest.java:49:	public static Test suite() {
testmessenger/Yahoo/YahooSRV_AUTHPacketTest.java:50:		return new TestSuite(YahooSRV_AUTHPacketTest.class);
testmessenger/Yahoo/YahooSRV_AUTHPacketTest.java:56:	protected void setUp() throws Exception {
testmessenger/Yahoo/YahooSRV_AUTHPacketTest.java:57:		super.setUp();
testmessenger/Yahoo/YahooSRV_AUTHPacketTest.java:63:	protected void tearDown() throws Exception {
testmessenger/Yahoo/YahooSRV_AUTHPacketTest.java:64:		super.tearDown();
testmessenger/Yahoo/YahooSRV_AUTHPacketTest.java:67:	public void testYahooSRV_AUTHPacket() {
testmessenger/Yahoo/YahooSRV_AUTHPacketTest.java:68:		YahooSRV_AUTHPacket srv_auth = new YahooSRV_AUTHPacket(                                                                                                                                                    );
testmessenger/Yahoo/YahooSRV_AUTHPacketTest.java:71:	public void testGetKindOfPacket() {
testmessenger/Yahoo/YahooSRV_AUTHPacketTest.java:72:		YahooSRV_AUTHPacket srv_auth = new YahooSRV_AUTHPacket(                                                                                                                                                    );
testmessenger/Yahoo/YahooSRV_AUTHPacketTest.java:73:		assertTrue(srv_auth.getKindOfPacket().equals(          ));
testmessenger/Yahoo/YahooSRV_AUTHPacketTest.java:76:	public static void main (String[] args) {
testmessenger/Yahoo/YahooSRV_AUTHPacketTest.java:77:		junit.textui.TestRunner.run(suite());
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:45:	public YahooSRV_LISTPacketTest(String arg0) {
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:46:		super(arg0);
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:49:	public static Test suite() {
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:50:		return new TestSuite(YahooSRV_LISTPacketTest.class);
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:53:	public void testYahooSRV_LISTPacket() {
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:54:		YahooSRV_LISTPacket srv_list = new YahooSRV_LISTPacket
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:56:		YahooSRV_LISTPacket srv_list2 = new YahooSRV_LISTPacket
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:57:		YahooSRV_LISTPacket srv_list3 = new YahooSRV_LISTPacket
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:59:		Vector v = srv_list.getList();
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:60:		Vector v2 = srv_list2.getList();
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:61:		Vector v3 = srv_list3.getList();
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:63:		assertTrue(v3.size() == 1);
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:64:		assertTrue(v2.size() == 2);
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:66:		assertTrue(((YahooContact)v3.elementAt(0)).getLogin().equals(             ));
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:75:	public void testGetKindOfPacket() {
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:76:		YahooSRV_LISTPacket srv_list = new YahooSRV_LISTPacket
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:77:		YahooSRV_LISTPacket srv_list3 = new YahooSRV_LISTPacket
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:79:		assertTrue(srv_list.getKindOfPacket().equals(          ));
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:80:		assertTrue(srv_list.getKindOfPacket().equals(          ));
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:83:	public void testGetContentHex() {
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:84:		YahooSRV_LISTPacket srv_list = new YahooSRV_LISTPacket
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:85:		YahooSRV_LISTPacket srv_list3 = new YahooSRV_LISTPacket
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:87:		assertTrue(srv_list.getContentHex().equals
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:88:		assertTrue(srv_list3.getContentHex().equals
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:91:	public void testGetLength() {
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:92:		YahooSRV_LISTPacket srv_list = new YahooSRV_LISTPacket
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:93:		YahooSRV_LISTPacket srv_list3 = new YahooSRV_LISTPacket
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:95:		assertTrue(srv_list3.getLength() == 637);
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:99:	public static void main (String[] args) {
testmessenger/Yahoo/YahooSRV_LISTPacketTest.java:100:		junit.textui.TestRunner.run(suite());
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:24:	public YahooSRV_LOGOFFPacketTest(String arg0) {
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:25:		super(arg0);
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:28:	public static Test suite() {
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:29:		return new TestSuite(YahooSRV_LOGOFFPacketTest.class);
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:32:	public void testYahooSRV_LOGOFFPacket() {
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:35:	public void testGetContact() {
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:36:		YahooSRV_LOGOFFPacket p = new YahooSRV_LOGOFFPacket(                                                                                                                                                );
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:37:		assertTrue(p.getContact().equals(             ));
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:40:	public void testGetStatus() {
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:41:		YahooSRV_LOGOFFPacket p = new YahooSRV_LOGOFFPacket(                                                                                                                                                );
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:42:		assertTrue(p.getStatus().equals(          ));
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:45:	public void testGetKindOfPacket() {
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:46:		YahooSRV_LOGOFFPacket p = new YahooSRV_LOGOFFPacket(                                                                                                                                                );
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:47:		assertTrue(p.getKindOfPacket().equals(            ));
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:50:	public void testGetContentHex() {
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:51:		YahooSRV_LOGOFFPacket p = new YahooSRV_LOGOFFPacket(                                                                                                                                                );
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:52:		assertTrue(p.getContentHex().equals(                                                                                                                                                ));
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:55:	public static void main (String[] args) {
testmessenger/Yahoo/YahooSRV_LOGOFFPacketTest.java:56:		junit.textui.TestRunner.run(suite());
testmessenger/Yahoo/YahooContactTest.java:44:	public YahooContactTest(String arg0) {
testmessenger/Yahoo/YahooContactTest.java:45:		super(arg0);
testmessenger/Yahoo/YahooContactTest.java:48:	public static Test suite() {
testmessenger/Yahoo/YahooContactTest.java:49:		return new TestSuite(YahooSRV_AUTHPacketTest.class);
testmessenger/Yahoo/YahooContactTest.java:52:	public void testSetLogin() {
testmessenger/Yahoo/YahooContactTest.java:58:	public void testYahooContactStringStringString() {
testmessenger/Yahoo/YahooContactTest.java:64:	public void testYahooContactString() {
testmessenger/Yahoo/YahooContactTest.java:65:		YahooContact aContact = new YahooContact(             );
testmessenger/Yahoo/YahooContactTest.java:68:	public void testGetUIN() {
testmessenger/Yahoo/YahooContactTest.java:71:	public void testGetIP() {
testmessenger/Yahoo/YahooContactTest.java:74:	public void testSetIP() {
testmessenger/Yahoo/YahooContactTest.java:77:	public void testGetLogin() {
testmessenger/Yahoo/YahooContactTest.java:80:	public void testSetNick() {
testmessenger/Yahoo/YahooContactTest.java:83:	public void testGetNick() {
testmessenger/Yahoo/YahooContactTest.java:86:	public void testSetStatus() {
testmessenger/Yahoo/YahooContactTest.java:89:	public void testGetStatus() {
testmessenger/Yahoo/YahooContactTest.java:92:	public static void main (String[] args) {
testmessenger/Yahoo/YahooContactTest.java:93:		junit.textui.TestRunner.run(suite());
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:24:	public YahooSRV_LOGONPacketTest(String arg0) {
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:25:		super(arg0);
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:29:	public static Test suite() {
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:30:			return new TestSuite(YahooSRV_LOGONPacketTest.class);
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:33:	public void testGetContact() {
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:36:	public void testGetStatus() {
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:37:		YahooSRV_LOGONPacket p = new YahooSRV_LOGONPacket(                                                                                                                                                                                                                );
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:39:		assertTrue(p.getStatus().equals(         ));
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:42:	public void testGetKindOfPacket() {
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:43:		YahooSRV_LOGONPacket p = new YahooSRV_LOGONPacket(                                                                                                                                                                                                                );
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:45:		assertTrue(p.getKindOfPacket().equals(           ));
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:48:	public void testGetContentHex() {
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:49:		YahooSRV_LOGONPacket p = new YahooSRV_LOGONPacket(                                                                                                                                                                                                                );
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:51:		assertTrue(p.getContentHex().equals(                                                                                                                                                                                                                ));
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:54:	public void testGetLength() {
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:55:		YahooSRV_LOGONPacket p = new YahooSRV_LOGONPacket(                                                                                                                                                                                                                );
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:57:		assertTrue(p.getLength() == 103);
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:60:	public static void main (String[] args) {
testmessenger/Yahoo/YahooSRV_LOGONPacketTest.java:61:			junit.textui.TestRunner.run(suite());
testmessenger/Yahoo/YahooSRV_AUTH_RESPPacketTest.java:24:	public YahooSRV_AUTH_RESPPacketTest(String arg0) {
testmessenger/Yahoo/YahooSRV_AUTH_RESPPacketTest.java:25:		super(arg0);
testmessenger/Yahoo/YahooSRV_AUTH_RESPPacketTest.java:28:	public static Test suite() {
testmessenger/Yahoo/YahooSRV_AUTH_RESPPacketTest.java:29:		return new TestSuite(YahooSRV_AUTH_RESPPacketTest.class);
testmessenger/Yahoo/YahooSRV_AUTH_RESPPacketTest.java:32:	public void testGetKindOfPacket() {
testmessenger/Yahoo/YahooSRV_AUTH_RESPPacketTest.java:33:		YahooSRV_AUTH_RESPPacket p = new YahooSRV_AUTH_RESPPacket(                                                                                                                  );
testmessenger/Yahoo/YahooSRV_AUTH_RESPPacketTest.java:35:		assertTrue(p.getKindOfPacket().equals(               ));
testmessenger/Yahoo/YahooSRV_AUTH_RESPPacketTest.java:38:	public void testGetContentHex() {
testmessenger/Yahoo/YahooSRV_AUTH_RESPPacketTest.java:39:		YahooSRV_AUTH_RESPPacket p = new YahooSRV_AUTH_RESPPacket(                                                                                                                  );
testmessenger/Yahoo/YahooSRV_AUTH_RESPPacketTest.java:41:		assertTrue(p.getContentHex().equals(                                                                                                                  ));
testmessenger/Yahoo/YahooSRV_AUTH_RESPPacketTest.java:44:	public void testGetLength() {
testmessenger/Yahoo/YahooSRV_AUTH_RESPPacketTest.java:45:		YahooSRV_AUTH_RESPPacket p = new YahooSRV_AUTH_RESPPacket(                                                                                                                  );
testmessenger/Yahoo/YahooSRV_AUTH_RESPPacketTest.java:49:	public static void main (String[] args) {
testmessenger/Yahoo/YahooSRV_AUTH_RESPPacketTest.java:50:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNIncomingFLNPacketTest.java:45:	public MSNIncomingFLNPacketTest() {
testmessenger/MSN/MSNIncomingFLNPacketTest.java:49:	public void testContent() {
testmessenger/MSN/MSNIncomingFLNPacketTest.java:50:		String content = fFLNPacket.getContent();
testmessenger/MSN/MSNIncomingFLNPacketTest.java:51:		assertTrue(content.equals(fReceivedPacket));
testmessenger/MSN/MSNIncomingFLNPacketTest.java:54:	public void testContact() {
testmessenger/MSN/MSNIncomingFLNPacketTest.java:55:		String contact = fFLNPacket.getContact();
testmessenger/MSN/MSNIncomingFLNPacketTest.java:56:		assertTrue(contact.equals(                      ));
testmessenger/MSN/MSNIncomingFLNPacketTest.java:59:	public static Test suite() {
testmessenger/MSN/MSNIncomingFLNPacketTest.java:60:		return new TestSuite(MSNIncomingFLNPacketTest.class);
testmessenger/MSN/MSNIncomingFLNPacketTest.java:66:	protected void setUp() throws Exception {
testmessenger/MSN/MSNIncomingFLNPacketTest.java:67:		super.setUp();
testmessenger/MSN/MSNIncomingFLNPacketTest.java:70:		fFLNPacket = new MSNIncomingFLNPacket(fReceivedPacket);
testmessenger/MSN/MSNIncomingFLNPacketTest.java:76:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNIncomingFLNPacketTest.java:77:		super.tearDown();
testmessenger/MSN/MSNIncomingFLNPacketTest.java:80:	public static void main (String[] args) {
testmessenger/MSN/MSNIncomingFLNPacketTest.java:81:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNOutgoingCALPacketTest.java:40:	public MSNOutgoingCALPacketTest() {
testmessenger/MSN/MSNOutgoingCALPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNOutgoingCALPacketTest.java:45:		assertTrue(fCALPacket.getContent().equals(                             ));
testmessenger/MSN/MSNOutgoingCALPacketTest.java:48:	public static Test suite() {
testmessenger/MSN/MSNOutgoingCALPacketTest.java:49:		return new TestSuite(MSNOutgoingCALPacketTest.class);
testmessenger/MSN/MSNOutgoingCALPacketTest.java:55:	protected void setUp() throws Exception {
testmessenger/MSN/MSNOutgoingCALPacketTest.java:56:		super.setUp();
testmessenger/MSN/MSNOutgoingCALPacketTest.java:58:		Vector args = new Vector();
testmessenger/MSN/MSNOutgoingCALPacketTest.java:59:		args.add(Long.valueOf(   ));
testmessenger/MSN/MSNOutgoingCALPacketTest.java:60:		args.add(                       );
testmessenger/MSN/MSNOutgoingCALPacketTest.java:62:		fCALPacket = new MSNOutgoingCALPacket(args);
testmessenger/MSN/MSNOutgoingCALPacketTest.java:68:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNOutgoingCALPacketTest.java:69:		super.tearDown();
testmessenger/MSN/MSNOutgoingCALPacketTest.java:72:	public static void main (String[] args) {
testmessenger/MSN/MSNOutgoingCALPacketTest.java:73:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNPacketFactoryTest.java:45:	public MSNPacketFactoryTest() {
testmessenger/MSN/MSNPacketFactoryTest.java:49:	public void testOutgoing() {
testmessenger/MSN/MSNPacketFactoryTest.java:51:			Vector args = new Vector();
testmessenger/MSN/MSNPacketFactoryTest.java:52:			args.add(Long.valueOf(   ));
testmessenger/MSN/MSNPacketFactoryTest.java:53:			args.add(     );
testmessenger/MSN/MSNPacketFactoryTest.java:55:			MSNOutgoingCHGPacket packet1 = new MSNOutgoingCHGPacket(args);
testmessenger/MSN/MSNPacketFactoryTest.java:56:			IPacket ipacket = fFactory.createOutgoingPacket(         , args);
testmessenger/MSN/MSNPacketFactoryTest.java:58:			assertTrue(ipacket instanceof MSNOutgoingCHGPacket);
testmessenger/MSN/MSNPacketFactoryTest.java:60:			MSNOutgoingCHGPacket packet2 = (MSNOutgoingCHGPacket)ipacket;
testmessenger/MSN/MSNPacketFactoryTest.java:62:			assertTrue(packet1.getContent().equals(packet2.getContent()));
testmessenger/MSN/MSNPacketFactoryTest.java:63:		} catch (BadArgumentException e) {
testmessenger/MSN/MSNPacketFactoryTest.java:64:			assertTrue(false);
testmessenger/MSN/MSNPacketFactoryTest.java:65:		} catch (UnknownPacketException e) {
testmessenger/MSN/MSNPacketFactoryTest.java:66:			assertTrue(false);
testmessenger/MSN/MSNPacketFactoryTest.java:70:	public void testIncoming() {
testmessenger/MSN/MSNPacketFactoryTest.java:73:			MSNIncomingCHLPacket packet1 = new MSNIncomingCHLPacket(fReceivedPacket);
testmessenger/MSN/MSNPacketFactoryTest.java:74:			IPacket ipacket = fFactory.createIncomingPacket(fReceivedPacket);
testmessenger/MSN/MSNPacketFactoryTest.java:76:			assertTrue(ipacket instanceof MSNIncomingCHLPacket);
testmessenger/MSN/MSNPacketFactoryTest.java:78:			MSNIncomingCHLPacket packet2 = (MSNIncomingCHLPacket)ipacket;
testmessenger/MSN/MSNPacketFactoryTest.java:80:			assertTrue(packet1.getContent().equals(packet2.getContent()));
testmessenger/MSN/MSNPacketFactoryTest.java:81:		} catch (UnknownPacketException e) {
testmessenger/MSN/MSNPacketFactoryTest.java:82:			assertTrue(false);
testmessenger/MSN/MSNPacketFactoryTest.java:83:		} catch (IncomingNullPacketException e) {
testmessenger/MSN/MSNPacketFactoryTest.java:84:			assertTrue(false);
testmessenger/MSN/MSNPacketFactoryTest.java:88:	public void testIncomingErrorCode() {
testmessenger/MSN/MSNPacketFactoryTest.java:91:			fFactory.createIncomingPacket(fReceivedPacket);
testmessenger/MSN/MSNPacketFactoryTest.java:93:			assertTrue(false);
testmessenger/MSN/MSNPacketFactoryTest.java:94:		} catch (UnknownPacketException e) {
testmessenger/MSN/MSNPacketFactoryTest.java:95:			assertTrue(e.getMessage().equals(                       ));
testmessenger/MSN/MSNPacketFactoryTest.java:96:		} catch (IncomingNullPacketException e) {
testmessenger/MSN/MSNPacketFactoryTest.java:97:			assertTrue(false);
testmessenger/MSN/MSNPacketFactoryTest.java:101:	public void testUnknownPacketException() {
testmessenger/MSN/MSNPacketFactoryTest.java:104:			fFactory.createIncomingPacket(fReceivedPacket);
testmessenger/MSN/MSNPacketFactoryTest.java:106:			assertTrue(false);
testmessenger/MSN/MSNPacketFactoryTest.java:107:		} catch (UnknownPacketException e) {
testmessenger/MSN/MSNPacketFactoryTest.java:108:			assertTrue(true);
testmessenger/MSN/MSNPacketFactoryTest.java:109:		} catch (IncomingNullPacketException e) {
testmessenger/MSN/MSNPacketFactoryTest.java:110:			assertTrue(false);
testmessenger/MSN/MSNPacketFactoryTest.java:114:	public void testIncomingNullPacketException() {
testmessenger/MSN/MSNPacketFactoryTest.java:117:			fFactory.createIncomingPacket(fReceivedPacket);
testmessenger/MSN/MSNPacketFactoryTest.java:119:			assertTrue(false);
testmessenger/MSN/MSNPacketFactoryTest.java:120:		} catch (UnknownPacketException e) {
testmessenger/MSN/MSNPacketFactoryTest.java:121:			assertTrue(false);
testmessenger/MSN/MSNPacketFactoryTest.java:122:		} catch (IncomingNullPacketException e) {
testmessenger/MSN/MSNPacketFactoryTest.java:123:			assertTrue(true);
testmessenger/MSN/MSNPacketFactoryTest.java:128:	public static Test suite() {
testmessenger/MSN/MSNPacketFactoryTest.java:129:		return new TestSuite(MSNPacketFactoryTest.class);
testmessenger/MSN/MSNPacketFactoryTest.java:135:	protected void setUp() throws Exception {
testmessenger/MSN/MSNPacketFactoryTest.java:136:		super.setUp();
testmessenger/MSN/MSNPacketFactoryTest.java:138:		fFactory = new MSNPacketFactory();
testmessenger/MSN/MSNPacketFactoryTest.java:144:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNPacketFactoryTest.java:145:		super.tearDown();
testmessenger/MSN/MSNPacketFactoryTest.java:148:	public static void main (String[] args) {
testmessenger/MSN/MSNPacketFactoryTest.java:149:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNIncomingNLNPacketTest.java:40:	public MSNIncomingNLNPacketTest() {
testmessenger/MSN/MSNIncomingNLNPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNIncomingNLNPacketTest.java:45:		String content = fNLNPacket.getContent();
testmessenger/MSN/MSNIncomingNLNPacketTest.java:46:		assertTrue(content.equals(fReceivedPacket));		
testmessenger/MSN/MSNIncomingNLNPacketTest.java:49:	public void testStatus() {
testmessenger/MSN/MSNIncomingNLNPacketTest.java:50:		String status = fNLNPacket.getStatus();
testmessenger/MSN/MSNIncomingNLNPacketTest.java:51:		assertTrue(status.equals(     ));
testmessenger/MSN/MSNIncomingNLNPacketTest.java:54:		MSNIncomingNLNPacket awypacket = new MSNIncomingNLNPacket(awy);
testmessenger/MSN/MSNIncomingNLNPacketTest.java:55:		status = awypacket.getStatus();
testmessenger/MSN/MSNIncomingNLNPacketTest.java:56:		assertTrue(status.equals(     ));
testmessenger/MSN/MSNIncomingNLNPacketTest.java:59:		MSNIncomingNLNPacket idlpacket = new MSNIncomingNLNPacket(idl);
testmessenger/MSN/MSNIncomingNLNPacketTest.java:60:		status = idlpacket.getStatus();
testmessenger/MSN/MSNIncomingNLNPacketTest.java:61:		assertTrue(status.equals(     ));
testmessenger/MSN/MSNIncomingNLNPacketTest.java:64:		MSNIncomingNLNPacket bsypacket = new MSNIncomingNLNPacket(bsy);
testmessenger/MSN/MSNIncomingNLNPacketTest.java:65:		status = bsypacket.getStatus();
testmessenger/MSN/MSNIncomingNLNPacketTest.java:66:		assertTrue(status.equals(     ));
testmessenger/MSN/MSNIncomingNLNPacketTest.java:69:		MSNIncomingNLNPacket brbpacket = new MSNIncomingNLNPacket(brb);
testmessenger/MSN/MSNIncomingNLNPacketTest.java:70:		status = brbpacket.getStatus();
testmessenger/MSN/MSNIncomingNLNPacketTest.java:71:		assertTrue(status.equals(     ));
testmessenger/MSN/MSNIncomingNLNPacketTest.java:74:		MSNIncomingNLNPacket phnpacket = new MSNIncomingNLNPacket(phn);
testmessenger/MSN/MSNIncomingNLNPacketTest.java:75:		status = phnpacket.getStatus();
testmessenger/MSN/MSNIncomingNLNPacketTest.java:76:		assertTrue(status.equals(     ));
testmessenger/MSN/MSNIncomingNLNPacketTest.java:79:		MSNIncomingNLNPacket lunpacket = new MSNIncomingNLNPacket(lun);
testmessenger/MSN/MSNIncomingNLNPacketTest.java:80:		status = lunpacket.getStatus();
testmessenger/MSN/MSNIncomingNLNPacketTest.java:81:		assertTrue(status.equals(     ));
testmessenger/MSN/MSNIncomingNLNPacketTest.java:84:	public void testContact() {
testmessenger/MSN/MSNIncomingNLNPacketTest.java:85:		String status = fNLNPacket.getStatus();
testmessenger/MSN/MSNIncomingNLNPacketTest.java:86:		assertTrue(status.equals(     ));
testmessenger/MSN/MSNIncomingNLNPacketTest.java:89:	public void testNick() {
testmessenger/MSN/MSNIncomingNLNPacketTest.java:90:		String nick = fNLNPacket.getContactNick();
testmessenger/MSN/MSNIncomingNLNPacketTest.java:91:		assertTrue(nick.equals(      ));
testmessenger/MSN/MSNIncomingNLNPacketTest.java:94:	public static Test suite() {
testmessenger/MSN/MSNIncomingNLNPacketTest.java:95:		return new TestSuite(MSNIncomingNLNPacketTest.class);
testmessenger/MSN/MSNIncomingNLNPacketTest.java:101:	protected void setUp() throws Exception {
testmessenger/MSN/MSNIncomingNLNPacketTest.java:102:		super.setUp();
testmessenger/MSN/MSNIncomingNLNPacketTest.java:105:		fNLNPacket = new MSNIncomingNLNPacket(fReceivedPacket);
testmessenger/MSN/MSNIncomingNLNPacketTest.java:111:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNIncomingNLNPacketTest.java:112:		super.tearDown();
testmessenger/MSN/MSNIncomingNLNPacketTest.java:115:	public static void main (String[] args) {
testmessenger/MSN/MSNIncomingNLNPacketTest.java:116:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNIncomingADDPacketTest.java:40:	public MSNIncomingADDPacketTest() {
testmessenger/MSN/MSNIncomingADDPacketTest.java:44:	public void testCmd() {
testmessenger/MSN/MSNIncomingADDPacketTest.java:45:		assertTrue(fPacket.getCommand().equals(     ));
testmessenger/MSN/MSNIncomingADDPacketTest.java:48:	public void testContent() {
testmessenger/MSN/MSNIncomingADDPacketTest.java:49:		assertTrue(fPacket.getContent().equals(fReceivedPacket));
testmessenger/MSN/MSNIncomingADDPacketTest.java:52:	public static Test suite() {
testmessenger/MSN/MSNIncomingADDPacketTest.java:53:		return new TestSuite(MSNIncomingADDPacketTest.class);
testmessenger/MSN/MSNIncomingADDPacketTest.java:59:	protected void setUp() throws Exception {
testmessenger/MSN/MSNIncomingADDPacketTest.java:60:		super.setUp();
testmessenger/MSN/MSNIncomingADDPacketTest.java:61:		fPacket = new MSNIncomingADDPacket(fReceivedPacket);
testmessenger/MSN/MSNIncomingADDPacketTest.java:67:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNIncomingADDPacketTest.java:68:		super.tearDown();
testmessenger/MSN/MSNIncomingADDPacketTest.java:71:	public static void main (String[] args) {
testmessenger/MSN/MSNIncomingADDPacketTest.java:72:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNIncomingQRYPacketTest.java:40:	public MSNIncomingQRYPacketTest() {
testmessenger/MSN/MSNIncomingQRYPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNIncomingQRYPacketTest.java:45:		String content = fQRYPacket.getContent();
testmessenger/MSN/MSNIncomingQRYPacketTest.java:46:		assertTrue(content.equals(fReceivedPacket));
testmessenger/MSN/MSNIncomingQRYPacketTest.java:49:	public static Test suite() {
testmessenger/MSN/MSNIncomingQRYPacketTest.java:50:		return new TestSuite(MSNIncomingQRYPacketTest.class);
testmessenger/MSN/MSNIncomingQRYPacketTest.java:56:	protected void setUp() throws Exception {
testmessenger/MSN/MSNIncomingQRYPacketTest.java:57:		super.setUp();
testmessenger/MSN/MSNIncomingQRYPacketTest.java:60:		fQRYPacket = new MSNIncomingQRYPacket(fReceivedPacket);
testmessenger/MSN/MSNIncomingQRYPacketTest.java:66:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNIncomingQRYPacketTest.java:67:		super.tearDown();
testmessenger/MSN/MSNIncomingQRYPacketTest.java:70:	public static void main (String[] args) {
testmessenger/MSN/MSNIncomingQRYPacketTest.java:71:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNOutgoingXFRPacketTest.java:40:	public MSNOutgoingXFRPacketTest() {
testmessenger/MSN/MSNOutgoingXFRPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNOutgoingXFRPacketTest.java:45:		assertTrue(fXFRPacket.getContent().equals(          ));
testmessenger/MSN/MSNOutgoingXFRPacketTest.java:48:	public static Test suite() {
testmessenger/MSN/MSNOutgoingXFRPacketTest.java:49:		return new TestSuite(MSNOutgoingXFRPacketTest.class);
testmessenger/MSN/MSNOutgoingXFRPacketTest.java:55:	protected void setUp() throws Exception {
testmessenger/MSN/MSNOutgoingXFRPacketTest.java:56:		super.setUp();
testmessenger/MSN/MSNOutgoingXFRPacketTest.java:58:		Vector args = new Vector();
testmessenger/MSN/MSNOutgoingXFRPacketTest.java:59:		args.add(Long.valueOf(   ));
testmessenger/MSN/MSNOutgoingXFRPacketTest.java:61:		fXFRPacket = new MSNOutgoingXFRPacket(args);
testmessenger/MSN/MSNOutgoingXFRPacketTest.java:67:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNOutgoingXFRPacketTest.java:68:		super.tearDown();
testmessenger/MSN/MSNOutgoingXFRPacketTest.java:71:	public static void main (String[] args) {
testmessenger/MSN/MSNOutgoingXFRPacketTest.java:72:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNIncomingMSGPacketTest.java:39:	public MSNIncomingMSGPacketTest() {
testmessenger/MSN/MSNIncomingMSGPacketTest.java:43:	public void testContent() {
testmessenger/MSN/MSNIncomingMSGPacketTest.java:44:		String content = fMSGPacket.getContent();
testmessenger/MSN/MSNIncomingMSGPacketTest.java:45:		assertTrue(content.equals(fReceivedPacket));
testmessenger/MSN/MSNIncomingMSGPacketTest.java:48:	public void testContact() {
testmessenger/MSN/MSNIncomingMSGPacketTest.java:49:		assertTrue(fMSGPacket.getContact().equals(         ));
testmessenger/MSN/MSNIncomingMSGPacketTest.java:52:	public void testContactNick() {
testmessenger/MSN/MSNIncomingMSGPacketTest.java:53:		assertTrue(fMSGPacket.getContactNick().equals(         ));
testmessenger/MSN/MSNIncomingMSGPacketTest.java:56:	public void getNrOfUnreadMsgs() {
testmessenger/MSN/MSNIncomingMSGPacketTest.java:57:		assertTrue(fMSGPacket.getNrOfUnreadMsgs().equals(    ));
testmessenger/MSN/MSNIncomingMSGPacketTest.java:60:	public void testType() {
testmessenger/MSN/MSNIncomingMSGPacketTest.java:61:		assertTrue(fMSGPacket.getType().equals(                          ));
testmessenger/MSN/MSNIncomingMSGPacketTest.java:64:	public static Test suite() {
testmessenger/MSN/MSNIncomingMSGPacketTest.java:65:		return new TestSuite(MSNIncomingMSGPacketTest.class);
testmessenger/MSN/MSNIncomingMSGPacketTest.java:71:	protected void setUp() throws Exception {
testmessenger/MSN/MSNIncomingMSGPacketTest.java:72:		super.setUp();
testmessenger/MSN/MSNIncomingMSGPacketTest.java:83:		fMSGPacket = new MSNIncomingMSGPacket(fReceivedPacket);
testmessenger/MSN/MSNIncomingMSGPacketTest.java:89:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNIncomingMSGPacketTest.java:90:		super.tearDown();
testmessenger/MSN/MSNIncomingMSGPacketTest.java:93:	public static void main (String[] args) {
testmessenger/MSN/MSNIncomingMSGPacketTest.java:94:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNIncomingUSRPacketTest.java:40:	public MSNIncomingUSRPacketTest() {
testmessenger/MSN/MSNIncomingUSRPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNIncomingUSRPacketTest.java:45:		String content = fUSRPacket.getContent();
testmessenger/MSN/MSNIncomingUSRPacketTest.java:46:		assertTrue(content.equals(fReceivedPacket));
testmessenger/MSN/MSNIncomingUSRPacketTest.java:49:	public void testEncryption() {
testmessenger/MSN/MSNIncomingUSRPacketTest.java:50:		String enc = fUSRPacket.getAuth();
testmessenger/MSN/MSNIncomingUSRPacketTest.java:51:		assertTrue(enc.equals(     ));
testmessenger/MSN/MSNIncomingUSRPacketTest.java:53:		String hash = fUSRPacket.getHash();
testmessenger/MSN/MSNIncomingUSRPacketTest.java:54:		assertTrue(hash.equals(                     ));
testmessenger/MSN/MSNIncomingUSRPacketTest.java:57:	public static Test suite() {
testmessenger/MSN/MSNIncomingUSRPacketTest.java:58:		return new TestSuite(MSNIncomingUSRPacketTest.class);
testmessenger/MSN/MSNIncomingUSRPacketTest.java:64:	protected void setUp() throws Exception {
testmessenger/MSN/MSNIncomingUSRPacketTest.java:65:		super.setUp();
testmessenger/MSN/MSNIncomingUSRPacketTest.java:68:		fUSRPacket = new MSNIncomingUSRPacket(fReceivedPacket);
testmessenger/MSN/MSNIncomingUSRPacketTest.java:74:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNIncomingUSRPacketTest.java:75:		super.tearDown();
testmessenger/MSN/MSNIncomingUSRPacketTest.java:78:	public static void main (String[] args) {
testmessenger/MSN/MSNIncomingUSRPacketTest.java:79:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNContactTest.java:42:	protected void setUp() throws Exception {
testmessenger/MSN/MSNContactTest.java:43:		super.setUp();
testmessenger/MSN/MSNContactTest.java:46:	public void testMSNContact() {
testmessenger/MSN/MSNContactTest.java:47:		contact = new MSNContact(       ,       );
testmessenger/MSN/MSNContactTest.java:49:		this.assertEquals(contact.getLogin(),        );
testmessenger/MSN/MSNContactTest.java:50:		this.assertEquals(contact.getNick(),       );
testmessenger/MSN/MSNContactTest.java:52:		contact = new MSNContact(       );
testmessenger/MSN/MSNContactTest.java:54:		this.assertEquals(contact.getLogin(),        );
testmessenger/MSN/MSNContactTest.java:61:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNContactTest.java:62:		super.tearDown();
testmessenger/MSN/MSNContactTest.java:66:	public static Test suite() {
testmessenger/MSN/MSNContactTest.java:67:		return new TestSuite(MSNContactTest.class);
testmessenger/MSN/MSNContactTest.java:71:	public static void main (String[] args) {
testmessenger/MSN/MSNContactTest.java:72:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNOutgoingQRYPacketTest.java:40:	public MSNOutgoingQRYPacketTest() {
testmessenger/MSN/MSNOutgoingQRYPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNOutgoingQRYPacketTest.java:45:		assertTrue(fQRYPacket.getContent().equals(                                                                   ));
testmessenger/MSN/MSNOutgoingQRYPacketTest.java:48:	public static Test suite() {
testmessenger/MSN/MSNOutgoingQRYPacketTest.java:49:		return new TestSuite(MSNOutgoingQRYPacketTest.class);
testmessenger/MSN/MSNOutgoingQRYPacketTest.java:55:	protected void setUp() throws Exception {
testmessenger/MSN/MSNOutgoingQRYPacketTest.java:56:		super.setUp();
testmessenger/MSN/MSNOutgoingQRYPacketTest.java:58:		Vector args = new Vector();
testmessenger/MSN/MSNOutgoingQRYPacketTest.java:59:		args.add(Long.valueOf(    ));
testmessenger/MSN/MSNOutgoingQRYPacketTest.java:60:		args.add(                      );
testmessenger/MSN/MSNOutgoingQRYPacketTest.java:62:		fQRYPacket = new MSNOutgoingQRYPacket(args);
testmessenger/MSN/MSNOutgoingQRYPacketTest.java:68:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNOutgoingQRYPacketTest.java:69:		super.tearDown();
testmessenger/MSN/MSNOutgoingQRYPacketTest.java:72:	public static void main (String[] args) {
testmessenger/MSN/MSNOutgoingQRYPacketTest.java:73:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNOutgoingVERPacketTest.java:40:	public MSNOutgoingVERPacketTest() {
testmessenger/MSN/MSNOutgoingVERPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNOutgoingVERPacketTest.java:45:		assertTrue(fVERPacket.getContent().equals(                                    ));
testmessenger/MSN/MSNOutgoingVERPacketTest.java:48:	public static Test suite() {
testmessenger/MSN/MSNOutgoingVERPacketTest.java:49:		return new TestSuite(MSNOutgoingVERPacketTest.class);
testmessenger/MSN/MSNOutgoingVERPacketTest.java:55:	protected void setUp() throws Exception {
testmessenger/MSN/MSNOutgoingVERPacketTest.java:56:		super.setUp();
testmessenger/MSN/MSNOutgoingVERPacketTest.java:58:		Vector args = new Vector();
testmessenger/MSN/MSNOutgoingVERPacketTest.java:59:		args.add(Long.valueOf(   ));
testmessenger/MSN/MSNOutgoingVERPacketTest.java:61:		fVERPacket = new MSNOutgoingVERPacket(args);
testmessenger/MSN/MSNOutgoingVERPacketTest.java:67:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNOutgoingVERPacketTest.java:68:		super.tearDown();
testmessenger/MSN/MSNOutgoingVERPacketTest.java:71:	public static void main (String[] args) {
testmessenger/MSN/MSNOutgoingVERPacketTest.java:72:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNSessionTest.java:37:	public MSNSessionTest() {
testmessenger/MSN/MSNSessionTest.java:41:	public void testSomething() {
testmessenger/MSN/MSNSessionTest.java:45:	public static Test suite() {
testmessenger/MSN/MSNSessionTest.java:46:		return new TestSuite(MSNProtocolTest.class);
testmessenger/MSN/MSNSessionTest.java:52:	protected void setUp() throws Exception {
testmessenger/MSN/MSNSessionTest.java:53:		super.setUp();
testmessenger/MSN/MSNSessionTest.java:59:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNSessionTest.java:60:		super.tearDown();
testmessenger/MSN/MSNSessionTest.java:63:	public static void main (String[] args) {
testmessenger/MSN/MSNSessionTest.java:64:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNOutgoingLSTPacketTest.java:40:	public MSNOutgoingLSTPacketTest() {
testmessenger/MSN/MSNOutgoingLSTPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNOutgoingLSTPacketTest.java:45:		assertTrue(fLSTPacket.getContent().equals(           ));
testmessenger/MSN/MSNOutgoingLSTPacketTest.java:48:	public static Test suite() {
testmessenger/MSN/MSNOutgoingLSTPacketTest.java:49:		return new TestSuite(MSNOutgoingLSTPacketTest.class);
testmessenger/MSN/MSNOutgoingLSTPacketTest.java:55:	protected void setUp() throws Exception {
testmessenger/MSN/MSNOutgoingLSTPacketTest.java:56:		super.setUp();
testmessenger/MSN/MSNOutgoingLSTPacketTest.java:58:		Vector args = new Vector();
testmessenger/MSN/MSNOutgoingLSTPacketTest.java:59:		args.add(Long.valueOf(    ));
testmessenger/MSN/MSNOutgoingLSTPacketTest.java:61:		fLSTPacket = new MSNOutgoingLSTPacket(args);
testmessenger/MSN/MSNOutgoingLSTPacketTest.java:67:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNOutgoingLSTPacketTest.java:68:		super.tearDown();
testmessenger/MSN/MSNOutgoingLSTPacketTest.java:71:	public static void main (String[] args) {
testmessenger/MSN/MSNOutgoingLSTPacketTest.java:72:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNOutgoingMSGPacketTest.java:40:	public MSNOutgoingMSGPacketTest() {
testmessenger/MSN/MSNOutgoingMSGPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNOutgoingMSGPacketTest.java:52:		assertTrue(fMSGPacket.getContent().equals(expectedContent));
testmessenger/MSN/MSNOutgoingMSGPacketTest.java:55:	public static Test suite() {
testmessenger/MSN/MSNOutgoingMSGPacketTest.java:56:		return new TestSuite(MSNOutgoingMSGPacketTest.class);
testmessenger/MSN/MSNOutgoingMSGPacketTest.java:62:	protected void setUp() throws Exception {
testmessenger/MSN/MSNOutgoingMSGPacketTest.java:63:		super.setUp();
testmessenger/MSN/MSNOutgoingMSGPacketTest.java:65:		Vector args = new Vector();
testmessenger/MSN/MSNOutgoingMSGPacketTest.java:66:		args.add(Long.valueOf(   ));
testmessenger/MSN/MSNOutgoingMSGPacketTest.java:67:		args.add(                     );
testmessenger/MSN/MSNOutgoingMSGPacketTest.java:68:		fMSGPacket = new MSNOutgoingMSGPacket(args);
testmessenger/MSN/MSNOutgoingMSGPacketTest.java:74:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNOutgoingMSGPacketTest.java:75:		super.tearDown();
testmessenger/MSN/MSNOutgoingMSGPacketTest.java:78:	public static void main (String[] args) {
testmessenger/MSN/MSNOutgoingMSGPacketTest.java:79:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNProtocolTest.java:38:	public MSNProtocolTest() {
testmessenger/MSN/MSNProtocolTest.java:42:	public void testSomething() {
testmessenger/MSN/MSNProtocolTest.java:46:	public static Test suite() {
testmessenger/MSN/MSNProtocolTest.java:47:		return new TestSuite(MSNProtocolTest.class);
testmessenger/MSN/MSNProtocolTest.java:53:	protected void setUp() throws Exception {
testmessenger/MSN/MSNProtocolTest.java:54:		super.setUp();
testmessenger/MSN/MSNProtocolTest.java:60:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNProtocolTest.java:61:		super.tearDown();
testmessenger/MSN/MSNProtocolTest.java:64:	public static void main (String[] args) {
testmessenger/MSN/MSNProtocolTest.java:65:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNIncomingPacketTest.java:38:	public MSNIncomingPacketTest() {
testmessenger/MSN/MSNIncomingPacketTest.java:42:	public void testSomething() {
testmessenger/MSN/MSNIncomingPacketTest.java:46:	public static Test suite() {
testmessenger/MSN/MSNIncomingPacketTest.java:47:		return new TestSuite(MSNIncomingPacketTest.class);
testmessenger/MSN/MSNIncomingPacketTest.java:53:	protected void setUp() throws Exception {
testmessenger/MSN/MSNIncomingPacketTest.java:54:		super.setUp();
testmessenger/MSN/MSNIncomingPacketTest.java:60:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNIncomingPacketTest.java:61:		super.tearDown();
testmessenger/MSN/MSNIncomingPacketTest.java:64:	public static void main (String[] args) {
testmessenger/MSN/MSNIncomingPacketTest.java:65:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNIncomingRNGPacketTest.java:45:	public MSNIncomingRNGPacketTest() {
testmessenger/MSN/MSNIncomingRNGPacketTest.java:49:	public void testContent() {
testmessenger/MSN/MSNIncomingRNGPacketTest.java:50:		String content = fRNGPacket.getContent();
testmessenger/MSN/MSNIncomingRNGPacketTest.java:51:		assertTrue(content.equals(fReceivedPacket));
testmessenger/MSN/MSNIncomingRNGPacketTest.java:54:	public void testSessionID() {
testmessenger/MSN/MSNIncomingRNGPacketTest.java:55:		String sessionID = fRNGPacket.getSessionID();
testmessenger/MSN/MSNIncomingRNGPacketTest.java:56:		assertTrue(sessionID.equals(          ));
testmessenger/MSN/MSNIncomingRNGPacketTest.java:59:	public void testSwitchBoardIP() {
testmessenger/MSN/MSNIncomingRNGPacketTest.java:60:		String sbIP = fRNGPacket.getSwitchBoardIp();
testmessenger/MSN/MSNIncomingRNGPacketTest.java:61:		assertTrue(! sbIP.equals(                  ));
testmessenger/MSN/MSNIncomingRNGPacketTest.java:62:		assertTrue(sbIP.equals(             ));
testmessenger/MSN/MSNIncomingRNGPacketTest.java:65:	public void testCKI() {
testmessenger/MSN/MSNIncomingRNGPacketTest.java:66:		String cki = fRNGPacket.getCKI();
testmessenger/MSN/MSNIncomingRNGPacketTest.java:67:		assertTrue(cki.equals(                     ));
testmessenger/MSN/MSNIncomingRNGPacketTest.java:70:	public void testContact() {
testmessenger/MSN/MSNIncomingRNGPacketTest.java:71:		String contact = fRNGPacket.getContact();
testmessenger/MSN/MSNIncomingRNGPacketTest.java:72:		assertTrue(contact.equals(                       ));
testmessenger/MSN/MSNIncomingRNGPacketTest.java:75:	public void testNick() {
testmessenger/MSN/MSNIncomingRNGPacketTest.java:76:		String nick = fRNGPacket.getContactNick();
testmessenger/MSN/MSNIncomingRNGPacketTest.java:77:		assertTrue(nick.equals(      ));
testmessenger/MSN/MSNIncomingRNGPacketTest.java:80:	public static Test suite() {
testmessenger/MSN/MSNIncomingRNGPacketTest.java:81:		return new TestSuite(MSNIncomingRNGPacketTest.class);
testmessenger/MSN/MSNIncomingRNGPacketTest.java:87:	protected void setUp() throws Exception {
testmessenger/MSN/MSNIncomingRNGPacketTest.java:88:		super.setUp();
testmessenger/MSN/MSNIncomingRNGPacketTest.java:91:		fRNGPacket = new MSNIncomingRNGPacket(fReceivedPacket);
testmessenger/MSN/MSNIncomingRNGPacketTest.java:97:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNIncomingRNGPacketTest.java:98:		super.tearDown();
testmessenger/MSN/MSNIncomingRNGPacketTest.java:101:	public static void main (String[] args) {
testmessenger/MSN/MSNIncomingRNGPacketTest.java:102:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNOutgoingADDPacketTest.java:40:	public MSNOutgoingADDPacketTest() {
testmessenger/MSN/MSNOutgoingADDPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNOutgoingADDPacketTest.java:45:		assertTrue(fADDPacket.getContent().equals(                                                       ));
testmessenger/MSN/MSNOutgoingADDPacketTest.java:48:	public static Test suite() {
testmessenger/MSN/MSNOutgoingADDPacketTest.java:49:		return new TestSuite(MSNOutgoingADDPacketTest.class);
testmessenger/MSN/MSNOutgoingADDPacketTest.java:55:	protected void setUp() throws Exception {
testmessenger/MSN/MSNOutgoingADDPacketTest.java:56:		super.setUp();
testmessenger/MSN/MSNOutgoingADDPacketTest.java:58:		Vector args = new Vector();
testmessenger/MSN/MSNOutgoingADDPacketTest.java:59:		args.add(Long.valueOf(    ));
testmessenger/MSN/MSNOutgoingADDPacketTest.java:60:		args.add(    );
testmessenger/MSN/MSNOutgoingADDPacketTest.java:61:		args.add(                       );
testmessenger/MSN/MSNOutgoingADDPacketTest.java:63:		fADDPacket = new MSNOutgoingADDPacket(args);
testmessenger/MSN/MSNOutgoingADDPacketTest.java:69:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNOutgoingADDPacketTest.java:70:		super.tearDown();
testmessenger/MSN/MSNOutgoingADDPacketTest.java:73:	public static void main (String[] args) {
testmessenger/MSN/MSNOutgoingADDPacketTest.java:74:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNOutgoingINFPacketTest.java:40:	public MSNOutgoingINFPacketTest() {
testmessenger/MSN/MSNOutgoingINFPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNOutgoingINFPacketTest.java:45:		assertTrue(fINFPacket.getContent().equals(       ));
testmessenger/MSN/MSNOutgoingINFPacketTest.java:48:	public static Test suite() {
testmessenger/MSN/MSNOutgoingINFPacketTest.java:49:		return new TestSuite(MSNOutgoingINFPacketTest.class);
testmessenger/MSN/MSNOutgoingINFPacketTest.java:55:	protected void setUp() throws Exception {
testmessenger/MSN/MSNOutgoingINFPacketTest.java:56:		super.setUp();
testmessenger/MSN/MSNOutgoingINFPacketTest.java:58:		Vector v = new Vector();
testmessenger/MSN/MSNOutgoingINFPacketTest.java:59:		v.add(Long.valueOf(   ));
testmessenger/MSN/MSNOutgoingINFPacketTest.java:60:		fINFPacket = new MSNOutgoingINFPacket(v);
testmessenger/MSN/MSNOutgoingINFPacketTest.java:66:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNOutgoingINFPacketTest.java:67:		super.tearDown();
testmessenger/MSN/MSNOutgoingINFPacketTest.java:70:	public static void main (String[] args) {
testmessenger/MSN/MSNOutgoingINFPacketTest.java:71:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNIncomingCHGPacketTest.java:40:	public MSNIncomingCHGPacketTest() {
testmessenger/MSN/MSNIncomingCHGPacketTest.java:44:	public void testCmd() {
testmessenger/MSN/MSNIncomingCHGPacketTest.java:45:		assertTrue(fPacket.getCommand().equals(     ));
testmessenger/MSN/MSNIncomingCHGPacketTest.java:48:	public void testContent() {
testmessenger/MSN/MSNIncomingCHGPacketTest.java:49:		assertTrue(fPacket.getContent().equals(fReceivedPacket));
testmessenger/MSN/MSNIncomingCHGPacketTest.java:52:	public static Test suite() {
testmessenger/MSN/MSNIncomingCHGPacketTest.java:53:		return new TestSuite(MSNIncomingCHGPacketTest.class);
testmessenger/MSN/MSNIncomingCHGPacketTest.java:59:	protected void setUp() throws Exception {
testmessenger/MSN/MSNIncomingCHGPacketTest.java:60:		super.setUp();
testmessenger/MSN/MSNIncomingCHGPacketTest.java:61:		fPacket = new MSNIncomingCHGPacket(fReceivedPacket);
testmessenger/MSN/MSNIncomingCHGPacketTest.java:67:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNIncomingCHGPacketTest.java:68:		super.tearDown();
testmessenger/MSN/MSNIncomingCHGPacketTest.java:71:	public static void main (String[] args) {
testmessenger/MSN/MSNIncomingCHGPacketTest.java:72:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNIncomingILNPacketTest.java:40:	public MSNIncomingILNPacketTest() {
testmessenger/MSN/MSNIncomingILNPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNIncomingILNPacketTest.java:45:		String content = fILNPacket.getContent();
testmessenger/MSN/MSNIncomingILNPacketTest.java:46:		assertTrue(content.equals(fReceivedPacket));
testmessenger/MSN/MSNIncomingILNPacketTest.java:49:	public void testStatus() {
testmessenger/MSN/MSNIncomingILNPacketTest.java:50:		String status = fILNPacket.getStatus();
testmessenger/MSN/MSNIncomingILNPacketTest.java:51:		assertTrue(status.equals(     ));
testmessenger/MSN/MSNIncomingILNPacketTest.java:54:	public void testContact() {
testmessenger/MSN/MSNIncomingILNPacketTest.java:55:		String contact = fILNPacket.getContact();
testmessenger/MSN/MSNIncomingILNPacketTest.java:56:		assertTrue(contact.equals(                       ));
testmessenger/MSN/MSNIncomingILNPacketTest.java:59:	public void testNick() {
testmessenger/MSN/MSNIncomingILNPacketTest.java:60:		String nick = fILNPacket.getContactNick();
testmessenger/MSN/MSNIncomingILNPacketTest.java:61:		assertTrue(nick.equals(      ));
testmessenger/MSN/MSNIncomingILNPacketTest.java:64:	public static Test suite() {
testmessenger/MSN/MSNIncomingILNPacketTest.java:65:		return new TestSuite(MSNIncomingILNPacketTest.class);
testmessenger/MSN/MSNIncomingILNPacketTest.java:71:	protected void setUp() throws Exception {
testmessenger/MSN/MSNIncomingILNPacketTest.java:72:		super.setUp();
testmessenger/MSN/MSNIncomingILNPacketTest.java:75:		fILNPacket = new MSNIncomingILNPacket(fReceivedPacket);
testmessenger/MSN/MSNIncomingILNPacketTest.java:81:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNIncomingILNPacketTest.java:82:		super.tearDown();
testmessenger/MSN/MSNIncomingILNPacketTest.java:85:	public static void main (String[] args) {
testmessenger/MSN/MSNIncomingILNPacketTest.java:86:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNOutgoingCHGPacketTest.java:40:	public MSNOutgoingCHGPacketTest() {
testmessenger/MSN/MSNOutgoingCHGPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNOutgoingCHGPacketTest.java:45:		assertTrue(fCHGPacket.getContent().equals(           ));
testmessenger/MSN/MSNOutgoingCHGPacketTest.java:48:	public static Test suite() {
testmessenger/MSN/MSNOutgoingCHGPacketTest.java:49:		return new TestSuite(MSNOutgoingCHGPacketTest.class);
testmessenger/MSN/MSNOutgoingCHGPacketTest.java:55:	protected void setUp() throws Exception {
testmessenger/MSN/MSNOutgoingCHGPacketTest.java:56:		super.setUp();
testmessenger/MSN/MSNOutgoingCHGPacketTest.java:58:		Vector args = new Vector();
testmessenger/MSN/MSNOutgoingCHGPacketTest.java:59:		args.add(Long.valueOf(   ));
testmessenger/MSN/MSNOutgoingCHGPacketTest.java:60:		args.add(     );
testmessenger/MSN/MSNOutgoingCHGPacketTest.java:62:		fCHGPacket = new MSNOutgoingCHGPacket(args);
testmessenger/MSN/MSNOutgoingCHGPacketTest.java:68:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNOutgoingCHGPacketTest.java:69:		super.tearDown();
testmessenger/MSN/MSNOutgoingCHGPacketTest.java:72:	public static void main (String[] args) {
testmessenger/MSN/MSNOutgoingCHGPacketTest.java:73:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNOutgoingPacketTest.java:38:	public MSNOutgoingPacketTest() {
testmessenger/MSN/MSNOutgoingPacketTest.java:42:	public void testSomething() {
testmessenger/MSN/MSNOutgoingPacketTest.java:46:	public static Test suite() {
testmessenger/MSN/MSNOutgoingPacketTest.java:47:		return new TestSuite(MSNOutgoingPacketTest.class);
testmessenger/MSN/MSNOutgoingPacketTest.java:53:	protected void setUp() throws Exception {
testmessenger/MSN/MSNOutgoingPacketTest.java:54:		super.setUp();
testmessenger/MSN/MSNOutgoingPacketTest.java:60:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNOutgoingPacketTest.java:61:		super.tearDown();
testmessenger/MSN/MSNOutgoingPacketTest.java:64:	public static void main (String[] args) {
testmessenger/MSN/MSNOutgoingPacketTest.java:65:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNIncomingCHLPacketTest.java:39:	public MSNIncomingCHLPacketTest() {
testmessenger/MSN/MSNIncomingCHLPacketTest.java:43:	public void testContent() {
testmessenger/MSN/MSNIncomingCHLPacketTest.java:44:		MSNIncomingCHLPacket packet = new MSNIncomingCHLPacket(fReceivedPacket);
testmessenger/MSN/MSNIncomingCHLPacketTest.java:45:		assertTrue(packet.getContent().equals(fReceivedPacket));
testmessenger/MSN/MSNIncomingCHLPacketTest.java:48:	public static Test suite() {
testmessenger/MSN/MSNIncomingCHLPacketTest.java:49:		return new TestSuite(MSNIncomingCHLPacketTest.class);
testmessenger/MSN/MSNIncomingCHLPacketTest.java:55:	protected void setUp() throws Exception {
testmessenger/MSN/MSNIncomingCHLPacketTest.java:56:		super.setUp();
testmessenger/MSN/MSNIncomingCHLPacketTest.java:62:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNIncomingCHLPacketTest.java:63:		super.tearDown();
testmessenger/MSN/MSNIncomingCHLPacketTest.java:66:	public static void main (String[] args) {
testmessenger/MSN/MSNIncomingCHLPacketTest.java:67:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNOutgoingUSRSPacketTest.java:40:	public MSNOutgoingUSRSPacketTest() {
testmessenger/MSN/MSNOutgoingUSRSPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNOutgoingUSRSPacketTest.java:45:		assertTrue(fUSRSPacket.getContent().equals(                                              ));
testmessenger/MSN/MSNOutgoingUSRSPacketTest.java:48:	public static Test suite() {
testmessenger/MSN/MSNOutgoingUSRSPacketTest.java:49:		return new TestSuite(MSNOutgoingUSRSPacketTest.class);
testmessenger/MSN/MSNOutgoingUSRSPacketTest.java:55:	protected void setUp() throws Exception {
testmessenger/MSN/MSNOutgoingUSRSPacketTest.java:56:		super.setUp();
testmessenger/MSN/MSNOutgoingUSRSPacketTest.java:58:		Vector args = new Vector();
testmessenger/MSN/MSNOutgoingUSRSPacketTest.java:59:		args.add(Long.valueOf(   ));
testmessenger/MSN/MSNOutgoingUSRSPacketTest.java:60:		args.add(     );
testmessenger/MSN/MSNOutgoingUSRSPacketTest.java:61:		args.add(                                  );
testmessenger/MSN/MSNOutgoingUSRSPacketTest.java:63:		fUSRSPacket = new MSNOutgoingUSRSPacket(args);
testmessenger/MSN/MSNOutgoingUSRSPacketTest.java:69:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNOutgoingUSRSPacketTest.java:70:		super.tearDown();
testmessenger/MSN/MSNOutgoingUSRSPacketTest.java:73:	public static void main (String[] args) {
testmessenger/MSN/MSNOutgoingUSRSPacketTest.java:74:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNOutgoingANSPacketTest.java:40:	public MSNOutgoingANSPacketTest() {
testmessenger/MSN/MSNOutgoingANSPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNOutgoingANSPacketTest.java:45:		assertTrue(fANSPacket.getContent().equals(                                                          ));
testmessenger/MSN/MSNOutgoingANSPacketTest.java:48:	public static Test suite() {
testmessenger/MSN/MSNOutgoingANSPacketTest.java:49:		return new TestSuite(MSNOutgoingANSPacketTest.class);
testmessenger/MSN/MSNOutgoingANSPacketTest.java:55:	protected void setUp() throws Exception {
testmessenger/MSN/MSNOutgoingANSPacketTest.java:56:		super.setUp();
testmessenger/MSN/MSNOutgoingANSPacketTest.java:58:		Vector args = new Vector();
testmessenger/MSN/MSNOutgoingANSPacketTest.java:59:		args.add(Long.valueOf(   ));
testmessenger/MSN/MSNOutgoingANSPacketTest.java:60:		args.add(                       );
testmessenger/MSN/MSNOutgoingANSPacketTest.java:61:		args.add(                     );
testmessenger/MSN/MSNOutgoingANSPacketTest.java:62:		args.add(          );
testmessenger/MSN/MSNOutgoingANSPacketTest.java:64:		fANSPacket = new MSNOutgoingANSPacket(args);
testmessenger/MSN/MSNOutgoingANSPacketTest.java:70:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNOutgoingANSPacketTest.java:71:		super.tearDown();
testmessenger/MSN/MSNOutgoingANSPacketTest.java:74:	public static void main (String[] args) {
testmessenger/MSN/MSNOutgoingANSPacketTest.java:75:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNOutgoingUSRPacketTest.java:40:	public MSNOutgoingUSRPacketTest() {
testmessenger/MSN/MSNOutgoingUSRPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNOutgoingUSRPacketTest.java:45:		assertTrue(fUSRPacket.getContent().equals(                                                  ));
testmessenger/MSN/MSNOutgoingUSRPacketTest.java:48:	public static Test suite() {
testmessenger/MSN/MSNOutgoingUSRPacketTest.java:49:		return new TestSuite(MSNOutgoingUSRPacketTest.class);
testmessenger/MSN/MSNOutgoingUSRPacketTest.java:55:	protected void setUp() throws Exception {
testmessenger/MSN/MSNOutgoingUSRPacketTest.java:56:		super.setUp();
testmessenger/MSN/MSNOutgoingUSRPacketTest.java:58:		Vector args = new Vector();
testmessenger/MSN/MSNOutgoingUSRPacketTest.java:59:		args.add(Long.valueOf(   ));
testmessenger/MSN/MSNOutgoingUSRPacketTest.java:60:		args.add(                       );
testmessenger/MSN/MSNOutgoingUSRPacketTest.java:61:		args.add(                      );
testmessenger/MSN/MSNOutgoingUSRPacketTest.java:63:		fUSRPacket = new MSNOutgoingUSRPacket(args);
testmessenger/MSN/MSNOutgoingUSRPacketTest.java:69:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNOutgoingUSRPacketTest.java:70:		super.tearDown();
testmessenger/MSN/MSNOutgoingUSRPacketTest.java:73:	public static void main (String[] args) {
testmessenger/MSN/MSNOutgoingUSRPacketTest.java:74:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNIncomingLSTPacketTest.java:40:	public MSNIncomingLSTPacketTest() {
testmessenger/MSN/MSNIncomingLSTPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNIncomingLSTPacketTest.java:45:		String content = fLSTPacket.getContent();
testmessenger/MSN/MSNIncomingLSTPacketTest.java:46:		assertTrue(content.equals(fReceivedPacket));
testmessenger/MSN/MSNIncomingLSTPacketTest.java:49:	public void testContact() {
testmessenger/MSN/MSNIncomingLSTPacketTest.java:50:		String contact = fLSTPacket.getContact();
testmessenger/MSN/MSNIncomingLSTPacketTest.java:51:		assertTrue(contact.equals(                       ));
testmessenger/MSN/MSNIncomingLSTPacketTest.java:54:	public void testContactNick() {
testmessenger/MSN/MSNIncomingLSTPacketTest.java:55:		String nick = fLSTPacket.getContactNick();
testmessenger/MSN/MSNIncomingLSTPacketTest.java:56:		assertTrue(nick.equals(      ));
testmessenger/MSN/MSNIncomingLSTPacketTest.java:59:	public void testNrOfContacts() {
testmessenger/MSN/MSNIncomingLSTPacketTest.java:60:		int contacts = fLSTPacket.getNrOfContacts();
testmessenger/MSN/MSNIncomingLSTPacketTest.java:61:		assertTrue(contacts == 1);
testmessenger/MSN/MSNIncomingLSTPacketTest.java:64:	public void testTotalNrOfContacts() {
testmessenger/MSN/MSNIncomingLSTPacketTest.java:65:		int totalContacts = fLSTPacket.getTotalNrOfContacts();
testmessenger/MSN/MSNIncomingLSTPacketTest.java:66:		assertTrue(totalContacts == 3);
testmessenger/MSN/MSNIncomingLSTPacketTest.java:69:	public static Test suite() {
testmessenger/MSN/MSNIncomingLSTPacketTest.java:70:		return new TestSuite(MSNIncomingLSTPacketTest.class);
testmessenger/MSN/MSNIncomingLSTPacketTest.java:76:	protected void setUp() throws Exception {
testmessenger/MSN/MSNIncomingLSTPacketTest.java:77:		super.setUp();
testmessenger/MSN/MSNIncomingLSTPacketTest.java:80:		fLSTPacket = new MSNIncomingLSTPacket(fReceivedPacket);
testmessenger/MSN/MSNIncomingLSTPacketTest.java:86:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNIncomingLSTPacketTest.java:87:		super.tearDown();
testmessenger/MSN/MSNIncomingLSTPacketTest.java:90:	public static void main (String[] args) {
testmessenger/MSN/MSNIncomingLSTPacketTest.java:91:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNIncomingVERPacketTest.java:40:	public MSNIncomingVERPacketTest() {
testmessenger/MSN/MSNIncomingVERPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNIncomingVERPacketTest.java:45:		String content = fVERPacket.getContent();
testmessenger/MSN/MSNIncomingVERPacketTest.java:46:		assertTrue(content.equals(fReceivedPacket));
testmessenger/MSN/MSNIncomingVERPacketTest.java:49:	public static Test suite() {
testmessenger/MSN/MSNIncomingVERPacketTest.java:50:		return new TestSuite(MSNIncomingVERPacketTest.class);
testmessenger/MSN/MSNIncomingVERPacketTest.java:56:	protected void setUp() throws Exception {
testmessenger/MSN/MSNIncomingVERPacketTest.java:57:		super.setUp();
testmessenger/MSN/MSNIncomingVERPacketTest.java:60:		fVERPacket = new MSNIncomingVERPacket(fReceivedPacket);
testmessenger/MSN/MSNIncomingVERPacketTest.java:66:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNIncomingVERPacketTest.java:67:		super.tearDown();
testmessenger/MSN/MSNIncomingVERPacketTest.java:70:	public static void main (String[] args) {
testmessenger/MSN/MSNIncomingVERPacketTest.java:71:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNIncomingXFRPacketTest.java:45:	public MSNIncomingXFRPacketTest() {
testmessenger/MSN/MSNIncomingXFRPacketTest.java:49:	public void testContent() {
testmessenger/MSN/MSNIncomingXFRPacketTest.java:50:		String content = fXFRPacket.getContent();
testmessenger/MSN/MSNIncomingXFRPacketTest.java:51:		assertTrue(content.equals(fReceivedPacket));
testmessenger/MSN/MSNIncomingXFRPacketTest.java:54:	public void testNotificationServer() {
testmessenger/MSN/MSNIncomingXFRPacketTest.java:55:		assertTrue(fXFRPacket.getNF().equals(    ));
testmessenger/MSN/MSNIncomingXFRPacketTest.java:56:		assertTrue(fXFRPacket.getIp().equals(             ));
testmessenger/MSN/MSNIncomingXFRPacketTest.java:59:	public static Test suite() {
testmessenger/MSN/MSNIncomingXFRPacketTest.java:60:		return new TestSuite(MSNIncomingXFRPacketTest.class);
testmessenger/MSN/MSNIncomingXFRPacketTest.java:66:	protected void setUp() throws Exception {
testmessenger/MSN/MSNIncomingXFRPacketTest.java:67:		super.setUp();
testmessenger/MSN/MSNIncomingXFRPacketTest.java:70:		fXFRPacket = new MSNIncomingXFRPacket(fReceivedPacket);
testmessenger/MSN/MSNIncomingXFRPacketTest.java:76:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNIncomingXFRPacketTest.java:77:		super.tearDown();
testmessenger/MSN/MSNIncomingXFRPacketTest.java:80:	public static void main (String[] args) {
testmessenger/MSN/MSNIncomingXFRPacketTest.java:81:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNOutgoingUSRIPacketTest.java:40:	public MSNOutgoingUSRIPacketTest() {
testmessenger/MSN/MSNOutgoingUSRIPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNOutgoingUSRIPacketTest.java:45:		assertTrue(fUSRIPacket.getContent().equals(                                   ));
testmessenger/MSN/MSNOutgoingUSRIPacketTest.java:48:	public static Test suite() {
testmessenger/MSN/MSNOutgoingUSRIPacketTest.java:49:		return new TestSuite(MSNOutgoingUSRIPacketTest.class);
testmessenger/MSN/MSNOutgoingUSRIPacketTest.java:55:	protected void setUp() throws Exception {
testmessenger/MSN/MSNOutgoingUSRIPacketTest.java:56:		super.setUp();
testmessenger/MSN/MSNOutgoingUSRIPacketTest.java:58:		Vector args = new Vector();
testmessenger/MSN/MSNOutgoingUSRIPacketTest.java:59:		args.add(Long.valueOf(   ));
testmessenger/MSN/MSNOutgoingUSRIPacketTest.java:60:		args.add(     );
testmessenger/MSN/MSNOutgoingUSRIPacketTest.java:61:		args.add(                       );
testmessenger/MSN/MSNOutgoingUSRIPacketTest.java:63:		fUSRIPacket = new MSNOutgoingUSRIPacket(args);
testmessenger/MSN/MSNOutgoingUSRIPacketTest.java:69:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNOutgoingUSRIPacketTest.java:70:		super.tearDown();
testmessenger/MSN/MSNOutgoingUSRIPacketTest.java:73:	public static void main (String[] args) {
testmessenger/MSN/MSNOutgoingUSRIPacketTest.java:74:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/testMSNMessage.java:38:	protected void setUp() {
testmessenger/MSN/testMSNMessage.java:41:	public static Test suite() {
testmessenger/MSN/testMSNMessage.java:42:		return new TestSuite(testMSNMessage.class);
testmessenger/MSN/testMSNMessage.java:45:	public void testAddProtocol() {
testmessenger/MSN/testMSNMessage.java:49:	public void testGetProtocol() {
testmessenger/MSN/testMSNMessage.java:53:	public void testRemoveProtocol() { 
testmessenger/MSN/testMSNMessage.java:57:	public void testSendMessage() {
testmessenger/MSN/testMSNMessage.java:59:	public static void main (String[] args) {
testmessenger/MSN/testMSNMessage.java:60:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNPacketTest.java:39:	public MSNPacketTest() {
testmessenger/MSN/MSNPacketTest.java:43:	public void testContent() {
testmessenger/MSN/MSNPacketTest.java:47:	public static Test suite() {
testmessenger/MSN/MSNPacketTest.java:48:		return new TestSuite(MSNPacketTest.class);
testmessenger/MSN/MSNPacketTest.java:54:	protected void setUp() throws Exception {
testmessenger/MSN/MSNPacketTest.java:55:		super.setUp();
testmessenger/MSN/MSNPacketTest.java:63:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNPacketTest.java:64:		super.tearDown();
testmessenger/MSN/MSNPacketTest.java:67:	public static void main (String[] args) {
testmessenger/MSN/MSNPacketTest.java:68:		junit.textui.TestRunner.run(suite());
testmessenger/MSN/MSNIncomingINFPacketTest.java:40:	public MSNIncomingINFPacketTest() {
testmessenger/MSN/MSNIncomingINFPacketTest.java:44:	public void testContent() {
testmessenger/MSN/MSNIncomingINFPacketTest.java:45:		String content = fINFPacket.getContent();
testmessenger/MSN/MSNIncomingINFPacketTest.java:46:		assertTrue(content.equals(fReceivedPacket));
testmessenger/MSN/MSNIncomingINFPacketTest.java:49:	public void testEncryption() {
testmessenger/MSN/MSNIncomingINFPacketTest.java:50:		String enc = fINFPacket.getEncryption();
testmessenger/MSN/MSNIncomingINFPacketTest.java:51:		assertTrue(enc.equals(     ));
testmessenger/MSN/MSNIncomingINFPacketTest.java:54:	public static Test suite() {
testmessenger/MSN/MSNIncomingINFPacketTest.java:55:		return new TestSuite(MSNIncomingINFPacketTest.class);
testmessenger/MSN/MSNIncomingINFPacketTest.java:61:	protected void setUp() throws Exception {
testmessenger/MSN/MSNIncomingINFPacketTest.java:62:		super.setUp();
testmessenger/MSN/MSNIncomingINFPacketTest.java:65:		fINFPacket = new MSNIncomingINFPacket(fReceivedPacket);
testmessenger/MSN/MSNIncomingINFPacketTest.java:71:	protected void tearDown() throws Exception {
testmessenger/MSN/MSNIncomingINFPacketTest.java:72:		super.tearDown();
testmessenger/MSN/MSNIncomingINFPacketTest.java:75:	public static void main (String[] args) {
testmessenger/MSN/MSNIncomingINFPacketTest.java:76:		junit.textui.TestRunner.run(suite());
testmessenger/UtilsTest.java:38:	protected void setUp() {
testmessenger/UtilsTest.java:39:		u = new Utils();
testmessenger/UtilsTest.java:41:	public static Test suite() {
testmessenger/UtilsTest.java:42:		return new TestSuite(UtilsTest.class);
testmessenger/UtilsTest.java:45:	public void testCharToNibble() {
testmessenger/UtilsTest.java:49:	public void testFromHexString() {
testmessenger/UtilsTest.java:70:		br = Utils.fromHexString(s1);
testmessenger/UtilsTest.java:71:		assertTrue((int)(br[0]) == a);
testmessenger/UtilsTest.java:73:		br = Utils.fromHexString(s2);
testmessenger/UtilsTest.java:74:		assertTrue((int)(br[0]) == b);
testmessenger/UtilsTest.java:76:		br = Utils.fromHexString(s3);
testmessenger/UtilsTest.java:77:		assertTrue((int)(br[0]) == c);
testmessenger/UtilsTest.java:79:		br = Utils.fromHexString(s4);
testmessenger/UtilsTest.java:80:		assertTrue((int)(br[0]) == d);
testmessenger/UtilsTest.java:82:		br = Utils.fromHexString(s5);
testmessenger/UtilsTest.java:83:		assertTrue((int)(br[0]) == e);
testmessenger/UtilsTest.java:85:		br = Utils.fromHexString(s6);
testmessenger/UtilsTest.java:86:		assertTrue((int)(br[0]) == f);
testmessenger/UtilsTest.java:87:		assertTrue((int)(br[1]) == g);
testmessenger/UtilsTest.java:88:		assertTrue((int)(br[2]) == h);
testmessenger/UtilsTest.java:89:		assertTrue((int)(br[3]) == i);
testmessenger/UtilsTest.java:91:		br = Utils.fromHexString(s7);
testmessenger/UtilsTest.java:92:		assertTrue((int)(br[0]) == j);
testmessenger/UtilsTest.java:97:	public void testHexFromString() {
testmessenger/UtilsTest.java:101:	public void testHexToInt() {
testmessenger/UtilsTest.java:105:	public void testHexToByte() {
testmessenger/UtilsTest.java:109:	public void testByteToHex() {
testmessenger/UtilsTest.java:113:	public void testIntToHex() {
testmessenger/UtilsTest.java:129:		assertTrue(Utils.intToHex(a).equals(s1));
testmessenger/UtilsTest.java:130:		assertTrue(Utils.intToHex(b).equals(s2));
testmessenger/UtilsTest.java:131:		assertTrue(Utils.intToHex(c).equals(s3));
testmessenger/UtilsTest.java:132:		assertTrue(Utils.intToHex(d).equals(s4));
testmessenger/UtilsTest.java:133:		assertTrue(Utils.intToHex(e).equals(s5));
testmessenger/UtilsTest.java:134:		assertTrue(Utils.intToHex(f).equals(s6));	
testmessenger/UtilsTest.java:137:	public void testTwoByteInt2FourCharString() {
testmessenger/UtilsTest.java:151:		assertTrue(Utils.TwoByteInt2FourCharString(a).equals(s1));
testmessenger/UtilsTest.java:152:		assertTrue(Utils.TwoByteInt2FourCharString(b).equals(s2));
testmessenger/UtilsTest.java:153:		assertTrue(Utils.TwoByteInt2FourCharString(c).equals(s3));
testmessenger/UtilsTest.java:154:		assertTrue(Utils.TwoByteInt2FourCharString(d).equals(s4));
testmessenger/UtilsTest.java:156:		this.assertFalse(Utils.TwoByteInt2FourCharString(f1).equals(s4));
testmessenger/UtilsTest.java:157:		this.assertFalse(Utils.TwoByteInt2FourCharString(f2).equals(s4));
testmessenger/UtilsTest.java:159:	public void testEncryptPass() {
testmessenger/UtilsTest.java:163:	public void testUIN() {
testmessenger/UtilsTest.java:167:	public void  testHexString2AsciiString(String s) {
testmessenger/UtilsTest.java:168:		assertTrue(Utils.HexString2AsciiString(                  ).equals(          ));		
testmessenger/UtilsTest.java:171:	public void testURLQuoted2PlainText(String s) {
testmessenger/UtilsTest.java:172:		assertTrue(Utils.URLQuoted2PlainText(                          ).equals(                      ));
testmessenger/UtilsTest.java:176:	public static void main (String[] args) {
testmessenger/UtilsTest.java:177:		junit.textui.TestRunner.run(suite());
testmessenger/testAll.java:44:	public static void main (String[] args) {
testmessenger/testAll.java:45:		junit.textui.TestRunner.run (suite());
testmessenger/testAll.java:47:	public static Test suite ( ) {
testmessenger/testAll.java:48:		TestSuite suite = new TestSuite(                 );
testmessenger/testAll.java:49:		suite.addTest(UtilsTest.suite());
testmessenger/testAll.java:50:		suite.addTest(testMSNMessage.suite());
testmessenger/testAll.java:51:		suite.addTest(ICQCLI_CONTACTTest.suite());
testmessenger/testAll.java:52:		suite.addTest(ICQProtocolTest.suite());
testmessenger/testAll.java:53:		suite.addTest(ICQCLI_ACKRATESPacketTest.suite());
testmessenger/testAll.java:55:		suite.addTest(ICQCLI_ADDCONTACTPacketTest.suite());
testmessenger/testAll.java:56:		suite.addTest(ICQCLI_COOKIEPacketTest.suite());
testmessenger/testAll.java:57:		suite.addTest(ICQCLI_FAMILIESPacketTest.suite());
testmessenger/testAll.java:58:		suite.addTest(ICQCLI_IDENTPacketTest.suite());
testmessenger/testAll.java:59:		suite.addTest(ICQCLI_REQINFOPacketTest.suite());
testmessenger/testAll.java:60:		suite.addTest(ICQCLI_REQLOCATIONPacketTest.suite());
testmessenger/testAll.java:61:		suite.addTest(ICQCLI_RATESREQUESTPacketTest.suite());
testmessenger/testAll.java:62:		suite.addTest(ICQCLI_READYPacketTest.suite());
testmessenger/testAll.java:63:		suite.addTest(ICQCLI_REQBOSPacketTest.suite());
testmessenger/testAll.java:65:		suite.addTest(ICQCLI_REQICBMPacketTest.suite());
testmessenger/testAll.java:66:		suite.addTest(ICQCLI_REQINFOPacketTest.suite());
testmessenger/testAll.java:67:		suite.addTest(ICQCLI_REQLISTSPacketTest.suite());
testmessenger/testAll.java:68:		suite.addTest(ICQCLI_REQLOCATIONPacketTest.suite());
testmessenger/testAll.java:69:		suite.addTest(ICQCLI_SENDMSGPacketTest.suite());
testmessenger/testAll.java:70:		suite.addTest(ICQCLI_SENDMSGV1PacketTest.suite());
testmessenger/testAll.java:71:		suite.addTest(ICQCLI_SETICBMPacketTest.suite());
testmessenger/testAll.java:72:		suite.addTest(ICQCLI_SETSTATUSPacketTest.suite());
testmessenger/testAll.java:74:		suite.addTest(ICQSRV_FAMILIES2PacketTest.suite());
testmessenger/testAll.java:75:		suite.addTest(ICQSRV_FAMILIESPacketTest.suite());
testmessenger/testAll.java:76:		suite.addTest(ICQSRV_COOKIEPacketTest.suite());
testmessenger/testAll.java:77:		suite.addTest(ICQSRV_REPLYROSTERPacketTest.suite());
testmessenger/testAll.java:78:		suite.addTest(ICQSRV_RATESPacketTest.suite());
testmessenger/testAll.java:80:		suite.addTest(MSNContactTest.suite());
testmessenger/testAll.java:81:		suite.addTest(MSNIncomingADDPacketTest.suite());
testmessenger/testAll.java:82:		suite.addTest(MSNIncomingCHGPacketTest.suite());
testmessenger/testAll.java:83:		suite.addTest(MSNIncomingCHLPacketTest.suite());
testmessenger/testAll.java:84:		suite.addTest(MSNIncomingFLNPacketTest.suite());
testmessenger/testAll.java:85:		suite.addTest(MSNIncomingILNPacketTest.suite());
testmessenger/testAll.java:86:		suite.addTest(MSNIncomingINFPacketTest.suite());
testmessenger/testAll.java:87:		suite.addTest(MSNIncomingLSTPacketTest.suite());
testmessenger/testAll.java:88:		suite.addTest(MSNIncomingMSGPacketTest.suite());
testmessenger/testAll.java:89:		suite.addTest(MSNIncomingNLNPacketTest.suite());
testmessenger/testAll.java:90:		suite.addTest(MSNIncomingPacketTest.suite());
testmessenger/testAll.java:91:		suite.addTest(MSNIncomingQRYPacketTest.suite());
testmessenger/testAll.java:92:		suite.addTest(MSNIncomingRNGPacketTest.suite());
testmessenger/testAll.java:93:		suite.addTest(MSNIncomingUSRPacketTest.suite());
testmessenger/testAll.java:94:		suite.addTest(MSNIncomingVERPacketTest.suite());
testmessenger/testAll.java:95:		suite.addTest(MSNIncomingXFRPacketTest.suite());
testmessenger/testAll.java:96:		suite.addTest(MSNOutgoingADDPacketTest.suite());
testmessenger/testAll.java:97:		suite.addTest(MSNOutgoingANSPacketTest.suite());
testmessenger/testAll.java:98:		suite.addTest(MSNOutgoingCALPacketTest.suite());
testmessenger/testAll.java:99:		suite.addTest(MSNOutgoingCHGPacketTest.suite());
testmessenger/testAll.java:100:		suite.addTest(MSNOutgoingINFPacketTest.suite());
testmessenger/testAll.java:101:		suite.addTest(MSNOutgoingLSTPacketTest.suite());
testmessenger/testAll.java:102:		suite.addTest(MSNOutgoingMSGPacketTest.suite());
testmessenger/testAll.java:103:		suite.addTest(MSNOutgoingPacketTest.suite());
testmessenger/testAll.java:104:		suite.addTest(MSNOutgoingQRYPacketTest.suite());
testmessenger/testAll.java:105:		suite.addTest(MSNOutgoingUSRIPacketTest.suite());
testmessenger/testAll.java:106:		suite.addTest(MSNOutgoingUSRPacketTest.suite());
testmessenger/testAll.java:107:		suite.addTest(MSNOutgoingUSRSPacketTest.suite());
testmessenger/testAll.java:108:		suite.addTest(MSNOutgoingVERPacketTest.suite());
testmessenger/testAll.java:109:		suite.addTest(MSNOutgoingXFRPacketTest.suite());
testmessenger/testAll.java:110:		suite.addTest(MSNPacketFactoryTest.suite());
testmessenger/testAll.java:111:		suite.addTest(MSNPacketTest.suite());
testmessenger/testAll.java:112:		suite.addTest(MSNSessionTest.suite());
testmessenger/testAll.java:114:		suite.addTest(YahooSRV_AUTHPacketTest.suite());
testmessenger/testAll.java:115:		suite.addTest(YahooSRV_LISTPacketTest.suite());
testmessenger/testAll.java:116:		suite.addTest(YahooSRV_LOGONPacketTest.suite());
testmessenger/testAll.java:117:		suite.addTest(YahooSRV_LOGOFFPacketTest.suite());
testmessenger/testAll.java:118:		suite.addTest(YahooSRV_AUTH_RESPPacketTest.suite());
testmessenger/testAll.java:119:		suite.addTest(YahooSRV_MESSAGEPacketTest.suite());
testmessenger/testAll.java:120:		suite.addTest(YahooContactTest.suite());
messenger/AContact.java:51:	public void setLogin(String login) {
messenger/AContact.java:57:		assert(fLogin == getLogin());
messenger/AContact.java:66:	public String getLogin() {
messenger/AContact.java:79:	public void setNick(String nick) {
messenger/AContact.java:92:	public String getNick() {
messenger/AContact.java:105:	public void setStatus(String status) {
messenger/AContact.java:118:	public String getStatus() {
messenger/Buffer.java:38:	public Buffer() {
messenger/Buffer.java:39:		fUserQueue = new Vector();
messenger/Buffer.java:40:		fDumpQueue = new Vector();
messenger/Buffer.java:43:	public synchronized void setToUser(String s) {
messenger/Buffer.java:44:		fUserQueue.add(s);	
messenger/Buffer.java:47:	public synchronized String getToUser() {
messenger/Buffer.java:49:		if (fUserQueue.size() > 0) {
messenger/Buffer.java:50:			front = (String)fUserQueue.firstElement();
messenger/Buffer.java:51:			fUserQueue.removeElementAt(0);
messenger/Buffer.java:56:	public synchronized void setDump(String s) {
messenger/Buffer.java:57:		fDumpQueue.add(s);	
messenger/Buffer.java:60:	public synchronized String getDump() {
messenger/Buffer.java:62:		if (fDumpQueue.size() > 0) {
messenger/Buffer.java:63:			front = (String)fDumpQueue.firstElement();
messenger/Buffer.java:64:			fDumpQueue.removeElementAt(0);
messenger/Buffer.java:69:	public synchronized boolean existsUserData() {
messenger/Buffer.java:70:		return fUserQueue.size() > 0;
messenger/Buffer.java:74:	public synchronized boolean existsDump() {
messenger/Buffer.java:75:		return fDumpQueue.size() > 0; 
messenger/UnknownPacketException.java:36:	public UnknownPacketException() {
messenger/UnknownPacketException.java:37:		super();
messenger/UnknownPacketException.java:44:	public UnknownPacketException(String message) {
messenger/UnknownPacketException.java:45:		super(message);
messenger/UnknownPacketException.java:53:	public UnknownPacketException(String message, Throwable cause) {
messenger/UnknownPacketException.java:54:		super(message, cause);
messenger/UnknownPacketException.java:61:	public UnknownPacketException(Throwable cause) {
messenger/UnknownPacketException.java:62:		super(cause);
messenger/IPacket.java:42:	public abstract int getLength();
messenger/IllegalConversionException.java:39:	public IllegalConversionException() {
messenger/IllegalConversionException.java:40:		super();
messenger/IllegalConversionException.java:47:	public IllegalConversionException(String message) {
messenger/IllegalConversionException.java:48:		super(message);
messenger/IllegalConversionException.java:56:	public IllegalConversionException(String message, Throwable cause) {
messenger/IllegalConversionException.java:57:		super(message, cause);
messenger/IllegalConversionException.java:60:	public IllegalConversionException(Throwable cause) {
messenger/IllegalConversionException.java:61:		super(cause);
messenger/ATextPacket.java:43:	public String getContent() {
messenger/ATextPacket.java:52:	public void setContent(String content) {
messenger/ATextPacket.java:61:	public void addContent(String content) {
messenger/ATextPacket.java:69:	public int getLength() {
messenger/ATextPacket.java:70:		return fContent.length();
messenger/ABytePacket.java:45:	public String getContentHex() {
messenger/ABytePacket.java:46:		return Utils.byteToHex(fContent);
messenger/ABytePacket.java:53:	public byte[] getContentByte() {
messenger/ABytePacket.java:61:	public void setContent(byte[] content) {
messenger/ABytePacket.java:68:	public int getLength() {
messenger/IPacketFactory.java:41:	public abstract IPacket createOutgoingPacket(String packet, Vector arg) throws UnknownPacketException, BadArgumentException;
messenger/IPacketFactory.java:42:	public abstract IPacket createIncomingPacket(String s) throws UnknownPacketException, IncomingNullPacketException;
messenger/ICQ/ICQCLI_REQLISTSPacket.java:46:	public ICQCLI_REQLISTSPacket(Vector arg) {
messenger/ICQ/ICQCLI_REQLISTSPacket.java:47:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_REQLISTSPacket.java:49:		setKindOfPacket(              );
messenger/ICQ/ICQCLI_REQLISTSPacket.java:50:		updatePacket();
messenger/ICQ/ICQCLI_REQLISTSPacket.java:56:	private void updatePacket() {
messenger/ICQ/ICQCLI_REQLISTSPacket.java:60:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQCLI_KEEPALIVEPacket.java:40:	public ICQCLI_KEEPALIVEPacket(Vector arg) {
messenger/ICQ/ICQCLI_KEEPALIVEPacket.java:41:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_KEEPALIVEPacket.java:43:		setKindOfPacket(               );
messenger/ICQ/ICQCLI_KEEPALIVEPacket.java:45:		updatePacket();
messenger/ICQ/ICQCLI_KEEPALIVEPacket.java:51:	private void updatePacket() {
messenger/ICQ/ICQCLI_KEEPALIVEPacket.java:54:		setContent(Utils.fromHexString(PING+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQCLI_ACKRATESPacket.java:44:	public ICQCLI_ACKRATESPacket(Vector arg) {
messenger/ICQ/ICQCLI_ACKRATESPacket.java:45:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_ACKRATESPacket.java:47:		setKindOfPacket(              );
messenger/ICQ/ICQCLI_ACKRATESPacket.java:48:		updatePacket();
messenger/ICQ/ICQCLI_ACKRATESPacket.java:54:	private void updatePacket() {
messenger/ICQ/ICQCLI_ACKRATESPacket.java:55:		Utils u = new Utils();
messenger/ICQ/ICQCLI_ACKRATESPacket.java:61:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:41:	public ICQSRV_RECVMSGV1Packet(String s) {
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:42:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:43:		setKindOfPacket(               );
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:45:		analyze();
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:51:	private void analyze() {
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:52:		String s = getContentHex();
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:55:		int length = (((int)s.charAt(8))-48)*4096 + (((int)s.charAt(9))-48)*256 + (((int)s.charAt(10))-48)*16 + ((int)(s.charAt(11))-48);
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:58:		if((((int)s.charAt(51))-48) == 1) {
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:59:			for(int i = 0; i < (((int)s.charAt(53))-48)*2; i=i+2) {
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:61:				uin += s.charAt(55+i);
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:68:			while((j < s.length())&&(!found)) {	
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:69:				if((s.charAt(j) ==    )&&(s.charAt(j+1) ==    )&&(s.charAt(j+2) ==    )&&((s.charAt(j+3) ==    )||(s.charAt(j+3) ==    ))&&
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:70:					(s.charAt(j+4) ==    )&&(s.charAt(j+5) ==    )&&(s.charAt(j+6) ==    )&&(s.charAt(j+7) ==    )) {
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:76:					int messagelength = (((int)s.charAt(j-2))-48)*16 + (((int)s.charAt(j-1))-48);	
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:82:					while(j < s.length()) {
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:83:						message += s.charAt(j);
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:87:					fMessage = Utils.HexString2AsciiString(message);
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:101:	public String getUin() {
messenger/ICQ/ICQSRV_RECVMSGV1Packet.java:109:	public String getMessage() {
messenger/ICQ/ICQSRV_COOKIEPacket.java:43:	public ICQSRV_COOKIEPacket(String s) {
messenger/ICQ/ICQSRV_COOKIEPacket.java:47:		setContent(Utils.fromHexString(s));	
messenger/ICQ/ICQSRV_COOKIEPacket.java:48:		setKindOfPacket(            );	
messenger/ICQ/ICQSRV_COOKIEPacket.java:50:		analyze();
messenger/ICQ/ICQSRV_COOKIEPacket.java:53:	private void analyze() {
messenger/ICQ/ICQSRV_COOKIEPacket.java:54:		String s = getContentHex();
messenger/ICQ/ICQSRV_COOKIEPacket.java:59:       	while(((i+3)<s.length())&&(!((s.charAt(i) ==    )&&(s.charAt(i+1) ==    )&&(s.charAt(i+2) ==    )&&(s.charAt(i+3) ==    )))) {
messenger/ICQ/ICQSRV_COOKIEPacket.java:64:		for(int x = 1; x < 5; x++) {
messenger/ICQ/ICQSRV_COOKIEPacket.java:65:			ipAndPortLength += s.charAt(i+x);
messenger/ICQ/ICQSRV_COOKIEPacket.java:67:		int iplen = Utils.hexToInt(ipAndPortLength);
messenger/ICQ/ICQSRV_COOKIEPacket.java:73:		for(int j = i; j < i+(2*iplen); j+=2) {
messenger/ICQ/ICQSRV_COOKIEPacket.java:74:			if(s.charAt(j) ==    ) {                                                                            
messenger/ICQ/ICQSRV_COOKIEPacket.java:75:				if(s.charAt(j+1) ==    ) {                       
messenger/ICQ/ICQSRV_COOKIEPacket.java:78:				else if(!(getport)) {                                       
messenger/ICQ/ICQSRV_COOKIEPacket.java:79:					serverIp2 += s.charAt(j+1);
messenger/ICQ/ICQSRV_COOKIEPacket.java:82:					port2 = port2*10+(int)(s.charAt(j+1))-48;	                          
messenger/ICQ/ICQSRV_COOKIEPacket.java:85:			else if((s.charAt(j) ==    )&&(s.charAt(j+1) ==    )) {                     
messenger/ICQ/ICQSRV_COOKIEPacket.java:94:       	while(((i+3)<s.length())&&(!((s.charAt(i) ==    )&&(s.charAt(i+1) ==    )&&(s.charAt(i+2) ==    )&&(s.charAt(i+3) ==    )))) {
messenger/ICQ/ICQSRV_COOKIEPacket.java:100:		for(int y = 1; y < 5; y++) {
messenger/ICQ/ICQSRV_COOKIEPacket.java:101:			cookieLength += s.charAt(i+y);
messenger/ICQ/ICQSRV_COOKIEPacket.java:103:		cookielen = Utils.hexToInt(cookieLength);
messenger/ICQ/ICQSRV_COOKIEPacket.java:106:		for(int j = i; j < i+(2*cookielen); j+=1) {
messenger/ICQ/ICQSRV_COOKIEPacket.java:107:			cookie += s.charAt(j);
messenger/ICQ/ICQSRV_COOKIEPacket.java:112:	public String getCookie() {
messenger/ICQ/ICQSRV_COOKIEPacket.java:117:	public String getIp() {
messenger/ICQ/ICQSRV_COOKIEPacket.java:118:		assert fIp.length() >= 8;                              
messenger/ICQ/ICQSRV_COOKIEPacket.java:119:		assert fIp.length() <= 15;                                       
messenger/ICQ/ICQSRV_COOKIEPacket.java:123:	public int getPort() {
messenger/ICQ/ICQCLI_ADDSTARTPacket.java:46:	public ICQCLI_ADDSTARTPacket(Vector arg) {
messenger/ICQ/ICQCLI_ADDSTARTPacket.java:47:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_ADDSTARTPacket.java:49:		setKindOfPacket(              );
messenger/ICQ/ICQCLI_ADDSTARTPacket.java:50:		updatePacket();
messenger/ICQ/ICQCLI_ADDSTARTPacket.java:56:	private void updatePacket() {
messenger/ICQ/ICQCLI_ADDSTARTPacket.java:60:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQSRV_UPDATEACKPacket.java:46:	public ICQSRV_UPDATEACKPacket(String s) {
messenger/ICQ/ICQSRV_UPDATEACKPacket.java:47:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_UPDATEACKPacket.java:48:		setKindOfPacket(               );
messenger/ICQ/ICQSRV_UPDATEACKPacket.java:50:		analyze();
messenger/ICQ/ICQSRV_UPDATEACKPacket.java:56:	private void analyze() {
messenger/ICQ/ICQSRV_UPDATEACKPacket.java:57:		String s = getContentHex();
messenger/ICQ/ICQSRV_UPDATEACKPacket.java:59:		if(s.charAt(35) ==    ) {
messenger/ICQ/ICQSRV_UPDATEACKPacket.java:62:		else if(s.charAt(35) ==    ) {
messenger/ICQ/ICQSRV_UPDATEACKPacket.java:65:		else if(s.charAt(35) ==    ) {
messenger/ICQ/ICQSRV_UPDATEACKPacket.java:68:		else if(s.charAt(35) ==    ) {
messenger/ICQ/ICQSRV_UPDATEACKPacket.java:76:	public String getComment() {
messenger/ICQ/ICQSRV_CONTACTERRPacket.java:39:	public ICQSRV_CONTACTERRPacket (String s) {
messenger/ICQ/ICQSRV_CONTACTERRPacket.java:40:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_CONTACTERRPacket.java:41:		setKindOfPacket(                );
messenger/ICQ/ICQCLI_SETSTATUSPacket.java:50:	public ICQCLI_SETSTATUSPacket(Vector arg) throws BadArgumentException {
messenger/ICQ/ICQCLI_SETSTATUSPacket.java:51:		assert (arg.size() == 1);
messenger/ICQ/ICQCLI_SETSTATUSPacket.java:53:		String s = (String)arg.elementAt(0);
messenger/ICQ/ICQCLI_SETSTATUSPacket.java:54:		if(s.equals(        )) { status =           ; }
messenger/ICQ/ICQCLI_SETSTATUSPacket.java:55:		else if(s.equals(      )) { status =           ; }
messenger/ICQ/ICQCLI_SETSTATUSPacket.java:56:		else if(s.equals(     )) { status =           ; }
messenger/ICQ/ICQCLI_SETSTATUSPacket.java:57:		else if(s.equals(    )) { status =           ; }
messenger/ICQ/ICQCLI_SETSTATUSPacket.java:58:		else if(s.equals(          )) { status =           ; }
messenger/ICQ/ICQCLI_SETSTATUSPacket.java:59:		else if(s.equals(           )) { status =           ; }
messenger/ICQ/ICQCLI_SETSTATUSPacket.java:60:		else if(s.equals(             )) { status =           ; }
messenger/ICQ/ICQCLI_SETSTATUSPacket.java:61:		else { throw new BadArgumentException(); }
messenger/ICQ/ICQCLI_SETSTATUSPacket.java:63:		setKindOfPacket(               );
messenger/ICQ/ICQCLI_SETSTATUSPacket.java:64:		updatePacket();
messenger/ICQ/ICQCLI_SETSTATUSPacket.java:65:		assert (status.length() == 8);
messenger/ICQ/ICQCLI_SETSTATUSPacket.java:71:	private void updatePacket() {
messenger/ICQ/ICQCLI_SETSTATUSPacket.java:91:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQCLI_FAMILIESPacket.java:47:	public ICQCLI_FAMILIESPacket(Vector arg) {
messenger/ICQ/ICQCLI_FAMILIESPacket.java:48:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_FAMILIESPacket.java:50:		setKindOfPacket(              );
messenger/ICQ/ICQCLI_FAMILIESPacket.java:51:		updatePacket();
messenger/ICQ/ICQCLI_FAMILIESPacket.java:57:	private void updatePacket() {
messenger/ICQ/ICQCLI_FAMILIESPacket.java:70:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQCLI_TOICQSERVERPacket.java:45:	public ICQCLI_TOICQSERVERPacket(Vector arg) {
messenger/ICQ/ICQCLI_TOICQSERVERPacket.java:46:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_TOICQSERVERPacket.java:48:		setKindOfPacket(                 );
messenger/ICQ/ICQCLI_TOICQSERVERPacket.java:49:		updatePacket();
messenger/ICQ/ICQCLI_TOICQSERVERPacket.java:55:	private void updatePacket() {
messenger/ICQ/ICQCLI_TOICQSERVERPacket.java:61:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQSRV_REPLYBOSPacket.java:38:	public ICQSRV_REPLYBOSPacket (String s) {
messenger/ICQ/ICQSRV_REPLYBOSPacket.java:39:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_REPLYBOSPacket.java:40:		setKindOfPacket(              );
messenger/ICQ/ICQSRV_REPLYICBMPacket.java:38:	public ICQSRV_REPLYICBMPacket (String s) {
messenger/ICQ/ICQSRV_REPLYICBMPacket.java:39:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_REPLYICBMPacket.java:40:		setKindOfPacket(                );
messenger/ICQ/ICQSRV_RATESPacket.java:40:	public ICQSRV_RATESPacket (String s) {
messenger/ICQ/ICQSRV_RATESPacket.java:43:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_RATESPacket.java:44:		setKindOfPacket(           );
messenger/ICQ/ICQCLI_RATESREQUESTPacket.java:46:	public ICQCLI_RATESREQUESTPacket(Vector arg) {
messenger/ICQ/ICQCLI_RATESREQUESTPacket.java:47:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_RATESREQUESTPacket.java:49:		setKindOfPacket(                  );
messenger/ICQ/ICQCLI_RATESREQUESTPacket.java:50:		updatePacket();
messenger/ICQ/ICQCLI_RATESREQUESTPacket.java:56:	private void updatePacket() {
messenger/ICQ/ICQCLI_RATESREQUESTPacket.java:60:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQContact.java:44:	public ICQContact() {
messenger/ICQ/ICQContact.java:61:	public ICQContact(String UIN, String nick, String IP) {
messenger/ICQ/ICQContact.java:64:		assert (IP.length() >= 7)&&(IP.length() <= 15);
messenger/ICQ/ICQContact.java:66:		this.setLogin(UIN);
messenger/ICQ/ICQContact.java:67:		this.setNick(nick);
messenger/ICQ/ICQContact.java:71:		assert this.getUIN() == UIN;
messenger/ICQ/ICQContact.java:72:		assert this.getNick().equals(nick);
messenger/ICQ/ICQContact.java:73:		assert this.getIP().equals(IP);
messenger/ICQ/ICQContact.java:82:	public ICQContact(String UIN) {
messenger/ICQ/ICQContact.java:84:		setLogin(UIN);
messenger/ICQ/ICQContact.java:93:	public void setUIN(String uin) {
messenger/ICQ/ICQContact.java:98:		assert getUIN() !=   ;
messenger/ICQ/ICQContact.java:107:	public String getUIN() {
messenger/ICQ/ICQContact.java:108:		assert getLogin() !=   ;
messenger/ICQ/ICQContact.java:109:		return getLogin();
messenger/ICQ/ICQContact.java:116:	public String getIP() {
messenger/ICQ/ICQContact.java:124:	public void setIP(String ip) {
messenger/ICQ/ICQContact.java:132:	public boolean getClientVersion() {
messenger/ICQ/ICQContact.java:140:	public void setClientVersion(boolean version2) {
messenger/ICQ/ICQSRV_REPLYINFOPacket.java:38:	public ICQSRV_REPLYINFOPacket (String s) {
messenger/ICQ/ICQSRV_REPLYINFOPacket.java:39:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_REPLYINFOPacket.java:40:		setKindOfPacket(               );
messenger/ICQ/ICQSRV_FAMILIESPacket.java:38:	public ICQSRV_FAMILIESPacket (String s) {
messenger/ICQ/ICQSRV_FAMILIESPacket.java:39:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_FAMILIESPacket.java:40:		setKindOfPacket(              );
messenger/ICQ/ICQSRV_ACKMSGPacket.java:42:	public ICQSRV_ACKMSGPacket (String s) {
messenger/ICQ/ICQSRV_ACKMSGPacket.java:43:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_ACKMSGPacket.java:44:		setKindOfPacket(            );
messenger/ICQ/ICQOutgoingPacket.java:41:	public ICQOutgoingPacket() {
messenger/ICQ/ICQOutgoingPacket.java:42:		if(SEQUENCE == 65535) {
messenger/ICQ/ICQOutgoingPacket.java:53:	public void resetSequence() {
messenger/ICQ/ICQOutgoingPacket.java:61:	public int getSequence() {
messenger/ICQ/ICQSRV_ICBMERRPacket.java:40:	public ICQSRV_ICBMERRPacket (String s) {
messenger/ICQ/ICQSRV_ICBMERRPacket.java:41:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_ICBMERRPacket.java:42:		setKindOfPacket(             );
messenger/ICQ/ICQSRV_ICBMERRPacket.java:44:		analyze();
messenger/ICQ/ICQSRV_ICBMERRPacket.java:47:	private void analyze() {
messenger/ICQ/ICQSRV_ICBMERRPacket.java:48:		String s = getContentHex();
messenger/ICQ/ICQSRV_ICBMERRPacket.java:50:		if(s.charAt(35) ==    ) {
messenger/ICQ/ICQSRV_ICBMERRPacket.java:53:		else if(s.charAt(35) ==    ) {
messenger/ICQ/ICQSRV_ICBMERRPacket.java:56:		else if(s.charAt(35) ==    ) {
messenger/ICQ/ICQSRV_ICBMERRPacket.java:65:	public String getReason() {
messenger/ICQ/ICQCLI_REQLOCATIONPacket.java:47:	public ICQCLI_REQLOCATIONPacket(Vector arg) {
messenger/ICQ/ICQCLI_REQLOCATIONPacket.java:48:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_REQLOCATIONPacket.java:50:		setKindOfPacket(                 );
messenger/ICQ/ICQCLI_REQLOCATIONPacket.java:51:		updatePacket();
messenger/ICQ/ICQCLI_REQLOCATIONPacket.java:57:	private void updatePacket() {
messenger/ICQ/ICQCLI_REQLOCATIONPacket.java:61:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQCLI_GOODBYEPacket.java:45:	public ICQCLI_GOODBYEPacket(Vector arg) {
messenger/ICQ/ICQCLI_GOODBYEPacket.java:46:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_GOODBYEPacket.java:48:		setKindOfPacket(                   );
messenger/ICQ/ICQCLI_GOODBYEPacket.java:49:		updatePacket();
messenger/ICQ/ICQCLI_GOODBYEPacket.java:55:	private void updatePacket() {
messenger/ICQ/ICQCLI_GOODBYEPacket.java:58:		setContent(Utils.fromHexString(DISCONNECT+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQCLI_READYPacket.java:45:	public ICQCLI_READYPacket(Vector arg) {
messenger/ICQ/ICQCLI_READYPacket.java:46:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_READYPacket.java:48:		setKindOfPacket(           );
messenger/ICQ/ICQCLI_READYPacket.java:49:		updatePacket();
messenger/ICQ/ICQCLI_READYPacket.java:55:	private void updatePacket() {
messenger/ICQ/ICQCLI_READYPacket.java:67:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQCLI_ADDENDPacket.java:45:	public ICQCLI_ADDENDPacket(Vector arg) {
messenger/ICQ/ICQCLI_ADDENDPacket.java:46:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_ADDENDPacket.java:48:		setKindOfPacket(            );
messenger/ICQ/ICQCLI_ADDENDPacket.java:49:		updatePacket();
messenger/ICQ/ICQCLI_ADDENDPacket.java:55:	private void updatePacket() {
messenger/ICQ/ICQCLI_ADDENDPacket.java:59:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQProtocol.java:63:	public ICQProtocol(DataBuffer controlData, String aUin, String password, String serverName, int port) {
messenger/ICQ/ICQProtocol.java:64:		super(serverName, port);
messenger/ICQ/ICQProtocol.java:66:		assert aUin.length() <= 10;
messenger/ICQ/ICQProtocol.java:69:		this.setLoginName(aUin);
messenger/ICQ/ICQProtocol.java:70:		this.setEncPasswd(Utils.ICQEncryptPass(password));
messenger/ICQ/ICQProtocol.java:71:		fContactList = new Vector();
messenger/ICQ/ICQProtocol.java:73:		fKeepAlive = new KeepAlive();
messenger/ICQ/ICQProtocol.java:75:			fFactory = new PacketFactory().getFactory(this);
messenger/ICQ/ICQProtocol.java:77:		catch(UnknownProtocolException e) {
messenger/ICQ/ICQProtocol.java:81:		assert getLoginName() == aUin;
messenger/ICQ/ICQProtocol.java:82:		assert getEncPasswd() !=   ;
messenger/ICQ/ICQProtocol.java:88:	public DataBuffer getControlData() {
messenger/ICQ/ICQProtocol.java:98:	public ICQProtocol(DataBuffer controlData,  String serverName, int port) {
messenger/ICQ/ICQProtocol.java:99:		super(serverName, port);
messenger/ICQ/ICQProtocol.java:101:		fContactList = new Vector();
messenger/ICQ/ICQProtocol.java:103:		fKeepAlive = new KeepAlive();
messenger/ICQ/ICQProtocol.java:105:			fFactory = new PacketFactory().getFactory(this);
messenger/ICQ/ICQProtocol.java:107:		catch(UnknownProtocolException e) {
messenger/ICQ/ICQProtocol.java:117:	public int getNumberOfContacts() {
messenger/ICQ/ICQProtocol.java:120:		return fContactList.size();
messenger/ICQ/ICQProtocol.java:126:	public void addContact(String login, String nick) {
messenger/ICQ/ICQProtocol.java:129:			Vector v = new Vector();
messenger/ICQ/ICQProtocol.java:130:     		v.addElement(login);
messenger/ICQ/ICQProtocol.java:131:     		v.addElement(nick);
messenger/ICQ/ICQProtocol.java:133:     		ICQPacket cli_addbuddy = (ICQPacket)fFactory.createOutgoingPacket(              , v);
messenger/ICQ/ICQProtocol.java:134:     		sendPacket(cli_addbuddy);
messenger/ICQ/ICQProtocol.java:136:		catch (BadArgumentException e) {
messenger/ICQ/ICQProtocol.java:137:			e.getMessage();
messenger/ICQ/ICQProtocol.java:138:			assert(true);	
messenger/ICQ/ICQProtocol.java:140:		catch (UnknownPacketException e) {
messenger/ICQ/ICQProtocol.java:141:			e.getMessage();
messenger/ICQ/ICQProtocol.java:142:			assert(true);
messenger/ICQ/ICQProtocol.java:144:		catch (IOException e) {
messenger/ICQ/ICQProtocol.java:145:			e.getMessage();
messenger/ICQ/ICQProtocol.java:146:			assert(true);
messenger/ICQ/ICQProtocol.java:158:	public void addContact(ICQContact ic) {
messenger/ICQ/ICQProtocol.java:161:		int old = this.getNumberOfContacts();
messenger/ICQ/ICQProtocol.java:163:		fContactList.addElement(ic);
messenger/ICQ/ICQProtocol.java:165:		assert this.getNumberOfContacts() == old + 1;	
messenger/ICQ/ICQProtocol.java:171:	public Vector getContactList() {
messenger/ICQ/ICQProtocol.java:184:	private void sendPacket(IPacket packet) throws IOException {
messenger/ICQ/ICQProtocol.java:185:			assert this.getServer() != null;
messenger/ICQ/ICQProtocol.java:187:			assert packet.getLength() > 0;
messenger/ICQ/ICQProtocol.java:189:			DataOutputStream fOutToServer = new DataOutputStream(getSocket().getOutputStream());
messenger/ICQ/ICQProtocol.java:190:			ICQPacket p = (ICQPacket)packet;
messenger/ICQ/ICQProtocol.java:191:			InetAddress ia = getSocket().getInetAddress();
messenger/ICQ/ICQProtocol.java:194:       			fOutToServer.write(p.getContentByte(), 0, p.getLength());
messenger/ICQ/ICQProtocol.java:196:       		catch (IOException e) {
messenger/ICQ/ICQProtocol.java:199:       		catch (Exception e) {
messenger/ICQ/ICQProtocol.java:203:       		fControlData.setDump(             +ia.getHostAddress()+   
messenger/ICQ/ICQProtocol.java:204:       												+p.getKindOfPacket()+    
messenger/ICQ/ICQProtocol.java:205:       												+p.getLength()+             
messenger/ICQ/ICQProtocol.java:206:       												+Utils.printableHexString(p.getContentHex()));  		
messenger/ICQ/ICQProtocol.java:212:	public void login() throws ICQException {
messenger/ICQ/ICQProtocol.java:233:			this.connect();
messenger/ICQ/ICQProtocol.java:235:			fInFromServer = new DataInputStream(getSocket().getInputStream());
messenger/ICQ/ICQProtocol.java:236:			InetAddress ia1 = getSocket().getInetAddress();
messenger/ICQ/ICQProtocol.java:239:			s = getServerMessage();
messenger/ICQ/ICQProtocol.java:240:			ICQPacket srv_hello = (ICQPacket)fFactory.createIncomingPacket(s);
messenger/ICQ/ICQProtocol.java:241:			fControlData.setDump(                 +ia1.getHostAddress()+   +srv_hello.getKindOfPacket()
messenger/ICQ/ICQProtocol.java:242:														+    +srv_hello.getLength()+            +Utils.printableHexString(srv_hello.getContentHex()));
messenger/ICQ/ICQProtocol.java:245:     		Vector v = new Vector();		
messenger/ICQ/ICQProtocol.java:246:     		v.addElement(Utils.UIN(getLoginName()));
messenger/ICQ/ICQProtocol.java:248:     		v.addElement(getEncPasswd());
messenger/ICQ/ICQProtocol.java:249:     		v.addElement(                                  
messenger/ICQ/ICQProtocol.java:253:     		ICQPacket cli_ident = (ICQPacket)fFactory.createOutgoingPacket(           , v);
messenger/ICQ/ICQProtocol.java:254:     		sendPacket(cli_ident);
messenger/ICQ/ICQProtocol.java:257:	  		s = getServerMessage();
messenger/ICQ/ICQProtocol.java:258:	  		cookiepacket = (ICQSRV_COOKIEPacket)fFactory.createIncomingPacket(s);
messenger/ICQ/ICQProtocol.java:259:    		fControlData.setDump(                 +ia1.getHostAddress()+   +cookiepacket.getKindOfPacket()
messenger/ICQ/ICQProtocol.java:260:														+    +cookiepacket.getLength()+            +Utils.printableHexString(cookiepacket.getContentHex()));
messenger/ICQ/ICQProtocol.java:263:			v = new Vector();
messenger/ICQ/ICQProtocol.java:264:	   		ICQPacket cli_goodbye = (ICQPacket)fFactory.createOutgoingPacket(             , v);
messenger/ICQ/ICQProtocol.java:265:	   		sendPacket(cli_goodbye);
messenger/ICQ/ICQProtocol.java:267:			getSocket().close();
messenger/ICQ/ICQProtocol.java:272:			this.setServer(cookiepacket.getIp());
messenger/ICQ/ICQProtocol.java:273:			this.setPort(cookiepacket.getPort());
messenger/ICQ/ICQProtocol.java:274:			this.connect();
messenger/ICQ/ICQProtocol.java:276:			fInFromServer = new DataInputStream(getSocket().getInputStream());
messenger/ICQ/ICQProtocol.java:277:			InetAddress ia2 = getSocket().getInetAddress();
messenger/ICQ/ICQProtocol.java:280:			s = getServerMessage();	
messenger/ICQ/ICQProtocol.java:281:			ICQPacket srv_hello2 = (ICQPacket)fFactory.createIncomingPacket(s);
messenger/ICQ/ICQProtocol.java:282:			fControlData.setDump(                 +ia2.getHostAddress()+   +srv_hello2.getKindOfPacket()
messenger/ICQ/ICQProtocol.java:283:														+    +srv_hello2.getLength()+            +Utils.printableHexString(srv_hello2.getContentHex()));
messenger/ICQ/ICQProtocol.java:286:     		v = new Vector();
messenger/ICQ/ICQProtocol.java:287:     		v.addElement(cookiepacket.getCookie());
messenger/ICQ/ICQProtocol.java:288:	   		ICQPacket cli_cookie = (ICQPacket)fFactory.createOutgoingPacket(            , v);	
messenger/ICQ/ICQProtocol.java:289:	   		sendPacket(cli_cookie);
messenger/ICQ/ICQProtocol.java:292:	  		s = getServerMessage();
messenger/ICQ/ICQProtocol.java:293:	  		ICQPacket srv_families = (ICQPacket)fFactory.createIncomingPacket(s);
messenger/ICQ/ICQProtocol.java:294:       		fControlData.setDump(                 +ia2.getHostAddress()+   +srv_families.getKindOfPacket()
messenger/ICQ/ICQProtocol.java:295:													+    +srv_families.getLength()+            +Utils.printableHexString(srv_families.getContentHex()));
messenger/ICQ/ICQProtocol.java:298:     		v = new Vector();
messenger/ICQ/ICQProtocol.java:299:	   		ICQPacket cli_families = (ICQPacket)fFactory.createOutgoingPacket(              , v);	
messenger/ICQ/ICQProtocol.java:300:	   		sendPacket(cli_families);
messenger/ICQ/ICQProtocol.java:303:     		v = new Vector();
messenger/ICQ/ICQProtocol.java:304:	   		ICQPacket cli_rrequest = (ICQPacket)fFactory.createOutgoingPacket(                  , v);	
messenger/ICQ/ICQProtocol.java:305:	   		sendPacket(cli_rrequest);
messenger/ICQ/ICQProtocol.java:308:	   		v = new Vector();
messenger/ICQ/ICQProtocol.java:309:	   		ICQPacket cli_reqinfo = (ICQPacket)fFactory.createOutgoingPacket(             , v);	
messenger/ICQ/ICQProtocol.java:310:	   		sendPacket(cli_reqinfo);
messenger/ICQ/ICQProtocol.java:314:	  		s = getServerMessage();
messenger/ICQ/ICQProtocol.java:316:	  		ICQPacket srv_families2 = (ICQPacket)fFactory.createIncomingPacket(s);
messenger/ICQ/ICQProtocol.java:317:       		fControlData.setDump(                 +ia2.getHostAddress()+   +srv_families2.getKindOfPacket()
messenger/ICQ/ICQProtocol.java:318:													+    +srv_families2.getLength()+            +Utils.printableHexString(srv_families2.getContentHex()));
messenger/ICQ/ICQProtocol.java:321:	   		v = new Vector();
messenger/ICQ/ICQProtocol.java:322:	   		ICQPacket cli_reqlocation = (ICQPacket)fFactory.createOutgoingPacket(                 , v);	
messenger/ICQ/ICQProtocol.java:323:	   		sendPacket(cli_reqlocation);
messenger/ICQ/ICQProtocol.java:326:	   		v = new Vector();
messenger/ICQ/ICQProtocol.java:327:	   		ICQPacket cli_reqbuddy = (ICQPacket)fFactory.createOutgoingPacket(              , v);
messenger/ICQ/ICQProtocol.java:328:	   		sendPacket(cli_reqbuddy);
messenger/ICQ/ICQProtocol.java:331:	   		v = new Vector();
messenger/ICQ/ICQProtocol.java:332:	   		ICQPacket cli_reqlists = (ICQPacket)fFactory.createOutgoingPacket(              , v);	
messenger/ICQ/ICQProtocol.java:333:	   		sendPacket(cli_reqlists);
messenger/ICQ/ICQProtocol.java:336:	   		v = new Vector();
messenger/ICQ/ICQProtocol.java:337:	   		ICQPacket cli_reqicbm = (ICQPacket)fFactory.createOutgoingPacket(             , v);	
messenger/ICQ/ICQProtocol.java:338:	   		sendPacket(cli_reqicbm);
messenger/ICQ/ICQProtocol.java:341:	   		v = new Vector();
messenger/ICQ/ICQProtocol.java:342:	   		ICQPacket cli_reqbos = (ICQPacket)fFactory.createOutgoingPacket(            , v);	
messenger/ICQ/ICQProtocol.java:343:	   		sendPacket(cli_reqbos);
messenger/ICQ/ICQProtocol.java:346:	  		s = getServerMessage();
messenger/ICQ/ICQProtocol.java:347:	  		ICQPacket srv_rates = (ICQPacket)fFactory.createIncomingPacket(s);
messenger/ICQ/ICQProtocol.java:348:       		fControlData.setDump(                 +ia2.getHostAddress()+   +srv_rates.getKindOfPacket()
messenger/ICQ/ICQProtocol.java:349:													+    +srv_rates.getLength()+            +Utils.printableHexString(srv_rates.getContentHex()));
messenger/ICQ/ICQProtocol.java:352:	   		v = new Vector();
messenger/ICQ/ICQProtocol.java:353:	   		ICQPacket cli_ackrates = (ICQPacket)fFactory.createOutgoingPacket(              , v);	
messenger/ICQ/ICQProtocol.java:354:	   		sendPacket(cli_ackrates);
messenger/ICQ/ICQProtocol.java:357:	  		s = getServerMessage();
messenger/ICQ/ICQProtocol.java:358:	  		ICQPacket srv_replyinfo = (ICQPacket)fFactory.createIncomingPacket(s);
messenger/ICQ/ICQProtocol.java:359:       		fControlData.setDump(                 +ia2.getHostAddress()+   +srv_replyinfo.getKindOfPacket()
messenger/ICQ/ICQProtocol.java:360:													+    +srv_replyinfo.getLength()+            +Utils.printableHexString(srv_replyinfo.getContentHex()));
messenger/ICQ/ICQProtocol.java:363:	  		s = getServerMessage();
messenger/ICQ/ICQProtocol.java:364:	  		ICQPacket srv_replylocation = (ICQPacket)fFactory.createIncomingPacket(s);
messenger/ICQ/ICQProtocol.java:365:       		fControlData.setDump(                 +ia2.getHostAddress()+   +srv_replylocation.getKindOfPacket()
messenger/ICQ/ICQProtocol.java:366:													+    +srv_replylocation.getLength()+            +Utils.printableHexString(srv_replylocation.getContentHex()));
messenger/ICQ/ICQProtocol.java:368:	  		s = getServerMessage();
messenger/ICQ/ICQProtocol.java:369:	  		ICQPacket srv_replybuddy = (ICQPacket)fFactory.createIncomingPacket(s);
messenger/ICQ/ICQProtocol.java:370:       		fControlData.setDump(                 +ia2.getHostAddress()+   +srv_replybuddy.getKindOfPacket()
messenger/ICQ/ICQProtocol.java:371:													+    +srv_replybuddy.getLength()+            +Utils.printableHexString(srv_replybuddy.getContentHex()));
messenger/ICQ/ICQProtocol.java:373:	  		s = getServerMessage();
messenger/ICQ/ICQProtocol.java:374:	  		ICQPacket srv_replyicbm = (ICQPacket)fFactory.createIncomingPacket(s);
messenger/ICQ/ICQProtocol.java:375:       		fControlData.setDump(                 +ia2.getHostAddress()+   +srv_replyicbm.getKindOfPacket()
messenger/ICQ/ICQProtocol.java:376:													+    +srv_replyicbm.getLength()+            +Utils.printableHexString(srv_replyicbm.getContentHex()));
messenger/ICQ/ICQProtocol.java:379:	  		s = getServerMessage();
messenger/ICQ/ICQProtocol.java:380:	  		ICQPacket srv_replybos = (ICQPacket)fFactory.createIncomingPacket(s);
messenger/ICQ/ICQProtocol.java:381:       		fControlData.setDump(                 +ia2.getHostAddress()+   +srv_replybos.getKindOfPacket()
messenger/ICQ/ICQProtocol.java:382:													+    +srv_replybos.getLength()+            +Utils.printableHexString(srv_replybos.getContentHex()));
messenger/ICQ/ICQProtocol.java:385:	  		s = getServerMessage();
messenger/ICQ/ICQProtocol.java:386:	  		ICQPacket srv_replylists = (ICQPacket)fFactory.createIncomingPacket(s);
messenger/ICQ/ICQProtocol.java:387:       		fControlData.setDump(                 +ia2.getHostAddress()+   +srv_replylists.getKindOfPacket()
messenger/ICQ/ICQProtocol.java:388:													+    +srv_replylists.getLength()+            +Utils.printableHexString(srv_replylists.getContentHex()));
messenger/ICQ/ICQProtocol.java:391:	   		v = new Vector();
messenger/ICQ/ICQProtocol.java:392:	   		ICQPacket cli_seticbm = (ICQPacket)fFactory.createOutgoingPacket(             , v);	
messenger/ICQ/ICQProtocol.java:393:	   		sendPacket(cli_seticbm);
messenger/ICQ/ICQProtocol.java:396:	   		v = new Vector();
messenger/ICQ/ICQProtocol.java:397:	   		ICQPacket cli_setuserinfo = (ICQPacket)fFactory.createOutgoingPacket(                 , v);	
messenger/ICQ/ICQProtocol.java:398:	   		sendPacket(cli_setuserinfo);
messenger/ICQ/ICQProtocol.java:401:	   		v = new Vector();
messenger/ICQ/ICQProtocol.java:402:	   		v.addElement(        );
messenger/ICQ/ICQProtocol.java:403:	   		ICQPacket cli_setstatus = (ICQPacket)fFactory.createOutgoingPacket(               , v);	
messenger/ICQ/ICQProtocol.java:404:	   		sendPacket(cli_setstatus);
messenger/ICQ/ICQProtocol.java:407:	   		v = new Vector();
messenger/ICQ/ICQProtocol.java:408:	   		ICQPacket cli_ready = (ICQPacket)fFactory.createOutgoingPacket(           , v);	
messenger/ICQ/ICQProtocol.java:409:	   		sendPacket(cli_ready);
messenger/ICQ/ICQProtocol.java:412:	   		v = new Vector();
messenger/ICQ/ICQProtocol.java:413:	   		ICQPacket cli_toicqsrv = (ICQPacket)fFactory.createOutgoingPacket(              , v);	
messenger/ICQ/ICQProtocol.java:414:	   		sendPacket(cli_toicqsrv);
messenger/ICQ/ICQProtocol.java:416:			s = getServerMessage();
messenger/ICQ/ICQProtocol.java:417:			ICQPacket srv_toicqsrv = (ICQPacket)fFactory.createIncomingPacket(s);
messenger/ICQ/ICQProtocol.java:418:       		fControlData.setDump(                 +ia2.getHostAddress()+   +srv_toicqsrv.getKindOfPacket()
messenger/ICQ/ICQProtocol.java:419:													+    +srv_toicqsrv.getLength()+            +Utils.printableHexString(srv_toicqsrv.getContentHex()));
messenger/ICQ/ICQProtocol.java:421:			this.setLoggedIn(true);
messenger/ICQ/ICQProtocol.java:422:			this.setPriority(MIN_PRIORITY);
messenger/ICQ/ICQProtocol.java:423:			fKeepAlive.start();
messenger/ICQ/ICQProtocol.java:424:			this.start();                                                                               
messenger/ICQ/ICQProtocol.java:432:			getContactListFromServer();
messenger/ICQ/ICQProtocol.java:434:			while(!retrievedServerList) {
messenger/ICQ/ICQProtocol.java:435:				sleep(1000);
messenger/ICQ/ICQProtocol.java:443:			retrieveContactList();
messenger/ICQ/ICQProtocol.java:451:		catch(BadArgumentException e) {
messenger/ICQ/ICQProtocol.java:452:			this.setLoggedIn(false);
messenger/ICQ/ICQProtocol.java:453:			throw new ICQBadArgumentException();
messenger/ICQ/ICQProtocol.java:455:		catch(UnknownPacketException e) {
messenger/ICQ/ICQProtocol.java:456:			this.setLoggedIn(true);
messenger/ICQ/ICQProtocol.java:457:			throw new ICQUnknownPacketException();
messenger/ICQ/ICQProtocol.java:460:		catch(IOException e) {
messenger/ICQ/ICQProtocol.java:461:			this.setLoggedIn(false);
messenger/ICQ/ICQProtocol.java:462:			throw new ICQIOException();
messenger/ICQ/ICQProtocol.java:464:		catch(StringIndexOutOfBoundsException e) {
messenger/ICQ/ICQProtocol.java:465:			this.setLoggedIn(false);
messenger/ICQ/ICQProtocol.java:466:			throw new ICQStringIndexOutOfBoundsException();
messenger/ICQ/ICQProtocol.java:468:		catch(TimeOutException e) {
messenger/ICQ/ICQProtocol.java:469:			this.setLoggedIn(false);
messenger/ICQ/ICQProtocol.java:470:			System.out.println(          );
messenger/ICQ/ICQProtocol.java:471:			throw new ICQTimeOutException();
messenger/ICQ/ICQProtocol.java:473:		catch(Exception e) {
messenger/ICQ/ICQProtocol.java:474:			e.printStackTrace();
messenger/ICQ/ICQProtocol.java:475:			this.setLoggedIn(false);
messenger/ICQ/ICQProtocol.java:476:			throw new ICQException();
messenger/ICQ/ICQProtocol.java:487:	public void sendMessage(String uin, String message) throws ICQException {
messenger/ICQ/ICQProtocol.java:488:		assert uin.length() <= 10;
messenger/ICQ/ICQProtocol.java:493:			DataOutputStream fOutToServer = new DataOutputStream(getSocket().getOutputStream());
messenger/ICQ/ICQProtocol.java:494:		   	Vector v = new Vector();
messenger/ICQ/ICQProtocol.java:495:		   	InetAddress ia = getSocket().getInetAddress();
messenger/ICQ/ICQProtocol.java:500:		   	v.addElement(Utils.UIN(uin));
messenger/ICQ/ICQProtocol.java:501:		   	v.addElement(Utils.HexFromString(message));
messenger/ICQ/ICQProtocol.java:503:		 	AContact a = this.getContact(uin);
messenger/ICQ/ICQProtocol.java:505:		 	if(((ICQContact)a).getClientVersion()) {
messenger/ICQ/ICQProtocol.java:507:		 		p = (ICQPacket)fFactory.createOutgoingPacket(             , v);
messenger/ICQ/ICQProtocol.java:511:		 		p = (ICQPacket)fFactory.createOutgoingPacket(               , v);
messenger/ICQ/ICQProtocol.java:513:		   	sendPacket(p);
messenger/ICQ/ICQProtocol.java:515:		  	fControlData.setToUser(           +message);
messenger/ICQ/ICQProtocol.java:517:		catch(BadArgumentException e) {
messenger/ICQ/ICQProtocol.java:518:			throw new ICQBadArgumentException();
messenger/ICQ/ICQProtocol.java:520:		catch(UnknownPacketException e) {
messenger/ICQ/ICQProtocol.java:521:				throw new ICQUnknownPacketException();
messenger/ICQ/ICQProtocol.java:523:		catch(IOException e) {
messenger/ICQ/ICQProtocol.java:524:			throw new ICQIOException();
messenger/ICQ/ICQProtocol.java:526:		catch(StringIndexOutOfBoundsException e) {
messenger/ICQ/ICQProtocol.java:527:			throw new ICQStringIndexOutOfBoundsException();
messenger/ICQ/ICQProtocol.java:529:		catch(Exception e) {
messenger/ICQ/ICQProtocol.java:530:			throw new ICQException();
messenger/ICQ/ICQProtocol.java:541:	public void changeStatus(String status) throws ICQException {
messenger/ICQ/ICQProtocol.java:546:			Vector v = new Vector();
messenger/ICQ/ICQProtocol.java:547:			v.addElement(status);
messenger/ICQ/ICQProtocol.java:548:			ICQPacket cli_setstatus = (ICQPacket)fFactory.createOutgoingPacket(               , v);
messenger/ICQ/ICQProtocol.java:549:			sendPacket(cli_setstatus);
messenger/ICQ/ICQProtocol.java:551:		catch(BadArgumentException e) {
messenger/ICQ/ICQProtocol.java:552:			throw new ICQBadArgumentException();
messenger/ICQ/ICQProtocol.java:554:		catch(UnknownPacketException e) {
messenger/ICQ/ICQProtocol.java:555:			throw new ICQUnknownPacketException();
messenger/ICQ/ICQProtocol.java:557:		catch(IOException e) {
messenger/ICQ/ICQProtocol.java:558:			throw new ICQIOException();
messenger/ICQ/ICQProtocol.java:560:		catch(StringIndexOutOfBoundsException e) {
messenger/ICQ/ICQProtocol.java:561:			throw new ICQStringIndexOutOfBoundsException();
messenger/ICQ/ICQProtocol.java:563:		catch(Exception e) {
messenger/ICQ/ICQProtocol.java:564:			throw new ICQException();
messenger/ICQ/ICQProtocol.java:571:	public void getContactListFromServer() {
messenger/ICQ/ICQProtocol.java:573:			Vector v = new Vector();
messenger/ICQ/ICQProtocol.java:574:			ICQPacket cli_reqroster = (ICQPacket)fFactory.createOutgoingPacket(               , v);
messenger/ICQ/ICQProtocol.java:575:			sendPacket(cli_reqroster);
messenger/ICQ/ICQProtocol.java:577:		catch(BadArgumentException e) {
messenger/ICQ/ICQProtocol.java:580:		catch(UnknownPacketException e) {
messenger/ICQ/ICQProtocol.java:583:		catch(IOException e) {
messenger/ICQ/ICQProtocol.java:586:		catch(StringIndexOutOfBoundsException e) {
messenger/ICQ/ICQProtocol.java:589:		catch(Exception e) {
messenger/ICQ/ICQProtocol.java:601:	public void retrieveContactList() throws ICQException {
messenger/ICQ/ICQProtocol.java:606:	   		ICQPacket cli_addcontact = (ICQPacket)fFactory.createOutgoingPacket(                , fContactList);
messenger/ICQ/ICQProtocol.java:607:	   		sendPacket(cli_addcontact);
messenger/ICQ/ICQProtocol.java:610:		catch(BadArgumentException e) {
messenger/ICQ/ICQProtocol.java:611:			throw new ICQBadArgumentException();
messenger/ICQ/ICQProtocol.java:614:		catch(UnknownPacketException e) {
messenger/ICQ/ICQProtocol.java:615:			throw new ICQUnknownPacketException();
messenger/ICQ/ICQProtocol.java:618:		catch(IOException e) {
messenger/ICQ/ICQProtocol.java:619:			throw new ICQIOException();
messenger/ICQ/ICQProtocol.java:629:	public void addContact(String uin) {
messenger/ICQ/ICQProtocol.java:631:			Vector v = new Vector();
messenger/ICQ/ICQProtocol.java:632:			v.addElement(uin);
messenger/ICQ/ICQProtocol.java:633:			ICQPacket cli_addcontact = (ICQPacket)fFactory.createOutgoingPacket(                , v);
messenger/ICQ/ICQProtocol.java:634:			sendPacket(cli_addcontact);
messenger/ICQ/ICQProtocol.java:636:		catch(BadArgumentException e) {
messenger/ICQ/ICQProtocol.java:639:		catch(UnknownPacketException e) {
messenger/ICQ/ICQProtocol.java:642:		catch(IOException e) {
messenger/ICQ/ICQProtocol.java:645:		catch(StringIndexOutOfBoundsException e) {
messenger/ICQ/ICQProtocol.java:648:		catch(Exception e) {
messenger/ICQ/ICQProtocol.java:656:	public void logout() {
messenger/ICQ/ICQProtocol.java:657:		if(this.isConnected()) {
messenger/ICQ/ICQProtocol.java:659:				fKeepAlive.interrupt();                           
messenger/ICQ/ICQProtocol.java:662:				DataOutputStream fOutToServer = new DataOutputStream(getSocket().getOutputStream());
messenger/ICQ/ICQProtocol.java:663:				Vector v = new Vector();
messenger/ICQ/ICQProtocol.java:664:	   			ICQPacket cli_goodbye = (ICQPacket)fFactory.createOutgoingPacket(             , v);
messenger/ICQ/ICQProtocol.java:665:	   			sendPacket(cli_goodbye);
messenger/ICQ/ICQProtocol.java:667:				disconnect();
messenger/ICQ/ICQProtocol.java:669:			catch(BadArgumentException e) {
messenger/ICQ/ICQProtocol.java:672:			catch(UnknownPacketException e) {
messenger/ICQ/ICQProtocol.java:676:			catch(IOException e) {
messenger/ICQ/ICQProtocol.java:679:			catch(StringIndexOutOfBoundsException e) {
messenger/ICQ/ICQProtocol.java:682:		catch(Exception e) {
messenger/ICQ/ICQProtocol.java:685:			assert this.isConnected() != true;
messenger/ICQ/ICQProtocol.java:692:	public void shutdown() {
messenger/ICQ/ICQProtocol.java:693:		this.interrupt();
messenger/ICQ/ICQProtocol.java:705:	public boolean analyzePacket(String s) {
messenger/ICQ/ICQProtocol.java:706:		InetAddress ia = getSocket().getInetAddress();
messenger/ICQ/ICQProtocol.java:710:			ICQPacket p = (ICQPacket)fFactory.createIncomingPacket(s);
messenger/ICQ/ICQProtocol.java:711:			fControlData.setDump(                 +ia.getHostAddress()+   +p.getKindOfPacket()
messenger/ICQ/ICQProtocol.java:712:													+    +p.getLength()+            +Utils.printableHexString(p.getContentHex()));
messenger/ICQ/ICQProtocol.java:714:			if(p instanceof ICQSRV_RECVMSGV1Packet) {
messenger/ICQ/ICQProtocol.java:715:				ICQSRV_RECVMSGV1Packet srv_recvmsg = (ICQSRV_RECVMSGV1Packet)p;
messenger/ICQ/ICQProtocol.java:716:				fControlData.setToUser(      +srv_recvmsg.getUin()+   +srv_recvmsg.getMessage());	
messenger/ICQ/ICQProtocol.java:719:			if(p instanceof ICQSRV_RECVMSGV2Packet) {
messenger/ICQ/ICQProtocol.java:720:				ICQSRV_RECVMSGV2Packet srv_recvmsg = (ICQSRV_RECVMSGV2Packet)p;
messenger/ICQ/ICQProtocol.java:721:				if(srv_recvmsg.getMessage() !=   ) {
messenger/ICQ/ICQProtocol.java:722:					fControlData.setToUser(      +srv_recvmsg.getUin()+   +srv_recvmsg.getMessage());	
messenger/ICQ/ICQProtocol.java:726:			else if(p instanceof ICQSRV_USERONLINEPacket) {
messenger/ICQ/ICQProtocol.java:730:				ICQSRV_USERONLINEPacket srv_useronline = (ICQSRV_USERONLINEPacket)p;
messenger/ICQ/ICQProtocol.java:731:				while((!found)&&(i < fContactList.size())) {
messenger/ICQ/ICQProtocol.java:732:					if(((ICQContact)fContactList.elementAt(i)).getUIN().equals(srv_useronline.getUin())) {
messenger/ICQ/ICQProtocol.java:733:						if(((ICQContact)fContactList.elementAt(i)).getStatus().equals(srv_useronline.getStatus())) {
messenger/ICQ/ICQProtocol.java:743:							((ICQContact)fContactList.elementAt(i)).setStatus(srv_useronline.getStatus());	
messenger/ICQ/ICQProtocol.java:744:							fControlData.setToUser(srv_useronline.getUin()+        +srv_useronline.getStatus());
messenger/ICQ/ICQProtocol.java:745:							fControlData.setDump(         );                                        
messenger/ICQ/ICQProtocol.java:755:			else if(p instanceof ICQSRV_USEROFFLINEPacket) {
messenger/ICQ/ICQProtocol.java:759:				ICQSRV_USEROFFLINEPacket srv_useroffline = (ICQSRV_USEROFFLINEPacket)p;
messenger/ICQ/ICQProtocol.java:762:				while((!found)&&(i < fContactList.size())) {
messenger/ICQ/ICQProtocol.java:765:					if(((AContact)fContactList.elementAt(i)).getLogin().equals(srv_useroffline.getUin())) {
messenger/ICQ/ICQProtocol.java:766:						((ICQContact)fContactList.elementAt(i)).setStatus(         );	
messenger/ICQ/ICQProtocol.java:772:				fControlData.setToUser(srv_useroffline.getUin()+               );
messenger/ICQ/ICQProtocol.java:773:				fControlData.setDump(         );                                                  
messenger/ICQ/ICQProtocol.java:776:			else if(p instanceof ICQSRV_REPLYROSTERPacket) {
messenger/ICQ/ICQProtocol.java:777:				ICQSRV_REPLYROSTERPacket srv_replyroster = (ICQSRV_REPLYROSTERPacket)p;
messenger/ICQ/ICQProtocol.java:778:				Vector v = srv_replyroster.getList();
messenger/ICQ/ICQProtocol.java:780:				if(srv_replyroster.moreRRPacketsComing()) {
messenger/ICQ/ICQProtocol.java:787:				for(int i = 0; i < v.size(); i++) {
messenger/ICQ/ICQProtocol.java:788:					ICQContact c = (ICQContact)v.elementAt(i);
messenger/ICQ/ICQProtocol.java:789:					((ICQContact)v.elementAt(i)).setStatus(         );
messenger/ICQ/ICQProtocol.java:790:					fContactList.addElement((ICQContact)v.elementAt(i));
messenger/ICQ/ICQProtocol.java:794:				fControlData.setDump(         );                                                  
messenger/ICQ/ICQProtocol.java:797:			else if(p instanceof ICQSRV_CONTACTERRPacket) {
messenger/ICQ/ICQProtocol.java:798:				ICQSRV_CONTACTERRPacket srv_icbmerr = (ICQSRV_CONTACTERRPacket)p;
messenger/ICQ/ICQProtocol.java:801:			else if(p instanceof ICQSRV_REPLYLISTSPacket) {
messenger/ICQ/ICQProtocol.java:802:				ICQSRV_REPLYLISTSPacket srv_replylists = (ICQSRV_REPLYLISTSPacket)p;
messenger/ICQ/ICQProtocol.java:805:			else if(p instanceof ICQSRV_ICBMERRPacket) {
messenger/ICQ/ICQProtocol.java:806:				ICQSRV_ICBMERRPacket srv_icbmerr = (ICQSRV_ICBMERRPacket)p;
messenger/ICQ/ICQProtocol.java:807:				fControlData.setDump(srv_icbmerr.getReason());
messenger/ICQ/ICQProtocol.java:811:				if(srv_icbmerr.getReason().equals(                                            )) {
messenger/ICQ/ICQProtocol.java:813:						((ICQContact)getContact(uin)).setClientVersion(false);
messenger/ICQ/ICQProtocol.java:815:					catch(StringIndexOutOfBoundsException e) {
messenger/ICQ/ICQProtocol.java:818:					catch(UnknownContactException e) {
messenger/ICQ/ICQProtocol.java:821:					catch(Exception e) {
messenger/ICQ/ICQProtocol.java:827:			else if(p instanceof ICQSRV_REPLYINFOPacket) {
messenger/ICQ/ICQProtocol.java:830:			else if(p instanceof ICQSRV_SRVACKMSGPacket) {
messenger/ICQ/ICQProtocol.java:833:			else if(p instanceof ICQSRV_ACKMSGPacket) {
messenger/ICQ/ICQProtocol.java:836:			else if(p instanceof ICQSRV_UPDATEACKPacket) {
messenger/ICQ/ICQProtocol.java:837:				ICQSRV_UPDATEACKPacket srv_updateack = (ICQSRV_UPDATEACKPacket)p;
messenger/ICQ/ICQProtocol.java:841:			else if(p instanceof ICQSRV_REFUSEDPacket) {
messenger/ICQ/ICQProtocol.java:848:		catch(UnknownPacketException e) {
messenger/ICQ/ICQProtocol.java:849:			fControlData.setDump(                 +ia.getHostAddress()+   +         
messenger/ICQ/ICQProtocol.java:850:													+    +s.length()+            +Utils.printableHexString(s));
messenger/ICQ/ICQProtocol.java:853:		catch(StringIndexOutOfBoundsException e) {
messenger/ICQ/ICQProtocol.java:857:		catch (IncomingNullPacketException e) {
messenger/ICQ/ICQProtocol.java:858:			System.out.println(                                                                            );
messenger/ICQ/ICQProtocol.java:861:		catch(Exception e) {
messenger/ICQ/ICQProtocol.java:863:			e.printStackTrace();
messenger/ICQ/ICQProtocol.java:872:	private String getServerMessage() {
messenger/ICQ/ICQProtocol.java:877:			DataInputStream fInFromServer = new DataInputStream(getSocket().getInputStream());
messenger/ICQ/ICQProtocol.java:878:			empty = fInFromServer.read();
messenger/ICQ/ICQProtocol.java:880:			if (empty == -1) {
messenger/ICQ/ICQProtocol.java:887:				s += Utils.intToHex(empty);
messenger/ICQ/ICQProtocol.java:890:				s += Utils.intToHex((int) fInFromServer.read());
messenger/ICQ/ICQProtocol.java:893:				s += Utils.intToHex((int) fInFromServer.read());
messenger/ICQ/ICQProtocol.java:894:				s += Utils.intToHex((int) fInFromServer.read());
messenger/ICQ/ICQProtocol.java:897:				StringBuffer sb = new StringBuffer();
messenger/ICQ/ICQProtocol.java:898:				int l1 = ((int) fInFromServer.read());
messenger/ICQ/ICQProtocol.java:899:				s += Utils.intToHex(l1);
messenger/ICQ/ICQProtocol.java:900:				sb.append(Utils.intToHex(l1));
messenger/ICQ/ICQProtocol.java:902:				int l2 = ((int) fInFromServer.read());
messenger/ICQ/ICQProtocol.java:903:				s += Utils.intToHex(l2);
messenger/ICQ/ICQProtocol.java:904:				sb.append(Utils.intToHex(l2));
messenger/ICQ/ICQProtocol.java:906:				int length = Utils.hexToInt(sb.toString());
messenger/ICQ/ICQProtocol.java:908:				for (int i = 0; i < length; ++i) {
messenger/ICQ/ICQProtocol.java:909:					s += Utils.intToHex((int) fInFromServer.read());
messenger/ICQ/ICQProtocol.java:912:		} catch (Exception e) {
messenger/ICQ/ICQProtocol.java:921:	public void run() {
messenger/ICQ/ICQProtocol.java:924:		while(true) {
messenger/ICQ/ICQProtocol.java:925:			s = getServerMessage();
messenger/ICQ/ICQProtocol.java:927:			if(s !=   ) {
messenger/ICQ/ICQProtocol.java:928:				if(analyzePacket(s)) {
messenger/ICQ/ICQProtocol.java:931:					System.out.println(                ); 
messenger/ICQ/ICQProtocol.java:935:			sleep(200);
messenger/ICQ/ICQProtocol.java:937:			catch(InterruptedException e) {
messenger/ICQ/ICQProtocol.java:952:		public void run() {
messenger/ICQ/ICQProtocol.java:953:			while(isConnected()) {
messenger/ICQ/ICQProtocol.java:955:					sleep(60000);                      
messenger/ICQ/ICQProtocol.java:956:					Vector v = new Vector();
messenger/ICQ/ICQProtocol.java:957:					ICQPacket keepalive = (ICQPacket)fFactory.createOutgoingPacket(               , v);	
messenger/ICQ/ICQProtocol.java:961:					sendPacket(keepalive);				
messenger/ICQ/ICQProtocol.java:963:				catch(BadArgumentException e) {
messenger/ICQ/ICQProtocol.java:966:				catch(UnknownPacketException e) {
messenger/ICQ/ICQProtocol.java:969:				catch(IOException e) {
messenger/ICQ/ICQProtocol.java:972:				catch(InterruptedException e) {
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:56:	public ICQSRV_REPLYROSTERPacket(String s) {
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:57:		setContent(Utils.fromHexString(s));	
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:64:		setKindOfPacket(                 );
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:65:		Utils.printableHexString(getContentHex());
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:67:		analyze();
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:73:	private void analyze() {
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:75:		String s = getContentHex(), uin =   , nick =   , nickhex =   ;
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:76:		fContactList = new Vector();
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:77:		fIgnoreList = new Vector();
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:80:		int length = (((int)s.charAt(8))-48)*4096 + (((int)s.charAt(9))-48)*256 + (((int)s.charAt(10))-48)*16 + ((int)(s.charAt(11))-48);
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:83:			if(s.charAt(23) ==    ) {
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:92:			while((i < s.length())&&(!((s.charAt(i) ==    )&&(s.charAt(i+1) ==    )&&(s.charAt(i+2) ==    )&&
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:93:					((s.charAt(i+3) ==    )||(s.charAt(i+3) ==    )||(s.charAt(i+3) ==    ))&&(s.charAt(i+4) ==    )))) {
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:97:			while(i+4 < s.length()) {	
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:100:					int uinlength = (((int)s.charAt(i))-48)*4096 + (((int)s.charAt(i+1))-48)*256 + (((int)s.charAt(i+2))-48)*16 + ((int)(s.charAt(i+3))-48);
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:101:					ICQContact aContact = new ICQContact();
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:104:					for(int j = 0; j < uinlength*2; j += 2) {
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:105:						uin += s.charAt(i+5+j);			
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:111:					while((i+4 < s.length())&&(!((s.charAt(i) ==    )&&(s.charAt(i+1) ==    )&&(s.charAt(i+2) ==    )&&
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:112:					((s.charAt(i+3) ==    )||(s.charAt(i+3) ==    )||(s.charAt(i+3) ==    ))&&(s.charAt(i+4) ==    )))) {
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:115:						if((s.charAt(i) ==    )&&(s.charAt(i+1) ==    )&&(s.charAt(i+2) ==    )&&(s.charAt(i+3) ==    )) {
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:120:						if((s.charAt(i) ==    )&&(s.charAt(i+1) ==    )&&(s.charAt(i+2) ==    )
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:121:							&&(s.charAt(i+3) ==    )&&(s.charAt(i+4) ==    )&&(s.charAt(i+5) ==    )) {
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:123:							nicklengthhex += s.charAt(i+6);
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:124:							nicklengthhex += s.charAt(i+7);
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:125:							int nicklength = Utils.hexToInt(nicklengthhex);
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:130:							while(i < start+nicklength*2) {
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:131:								nickhex += s.charAt(i);
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:135:							nick = Utils.HexString2AsciiString(nickhex);
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:141:					aContact.setLogin(uin);
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:142:					if(nick.equals(  )) {
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:143:						aContact.setNick(uin);
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:146:						aContact.setNick(nick);
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:148:					if(!ignore) {	
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:149:						fContactList.add(aContact);
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:154:						fIgnoreList.add(aContact);
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:159:		catch(StringIndexOutOfBoundsException e) {
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:171:	public Vector getList() {
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:180:	public Vector getIgnoreList() {
messenger/ICQ/ICQSRV_REPLYROSTERPacket.java:188:	public boolean moreRRPacketsComing() {
messenger/ICQ/ICQSRV_TOICQSRVPacket.java:43:	public ICQSRV_TOICQSRVPacket (String s) {
messenger/ICQ/ICQSRV_TOICQSRVPacket.java:44:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_TOICQSRVPacket.java:45:		setKindOfPacket(              );
messenger/ICQ/ICQCLI_SENDMSGPacket.java:50:	public ICQCLI_SENDMSGPacket(Vector arg) {
messenger/ICQ/ICQCLI_SENDMSGPacket.java:51:		assert (arg.size() == 2);
messenger/ICQ/ICQCLI_SENDMSGPacket.java:53:		fUin = (String)arg.elementAt(0);
messenger/ICQ/ICQCLI_SENDMSGPacket.java:54:		fMessage = (String)arg.elementAt(1);
messenger/ICQ/ICQCLI_SENDMSGPacket.java:56:		setKindOfPacket(             );
messenger/ICQ/ICQCLI_SENDMSGPacket.java:57:		updatePacket();
messenger/ICQ/ICQCLI_SENDMSGPacket.java:59:		assert (fUin.length()/2 < 10);
messenger/ICQ/ICQCLI_SENDMSGPacket.java:60:		assert (fMessage !=   );
messenger/ICQ/ICQCLI_SENDMSGPacket.java:66:	private void updatePacket() {
messenger/ICQ/ICQCLI_SENDMSGPacket.java:67:		String TLV2Content = TLV1281+        +TLV257+Utils.TwoByteInt2FourCharString(fMessage.length()/2+4)
messenger/ICQ/ICQCLI_SENDMSGPacket.java:137:								+Utils.TwoByteInt2FourCharString(fMessage.length()/2+1)
messenger/ICQ/ICQCLI_SENDMSGPacket.java:149:								+Utils.TwoByteInt2FourCharString(snac2711.length()/2)
messenger/ICQ/ICQCLI_SENDMSGPacket.java:156:								+Utils.intToHex(fUin.length()/2)+fUin
messenger/ICQ/ICQCLI_SENDMSGPacket.java:158:								+Utils.TwoByteInt2FourCharString(snac0005.length()/2)
messenger/ICQ/ICQCLI_SENDMSGPacket.java:162:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQExceptions/ICQException.java:43:	public ICQException() {
messenger/ICQ/ICQExceptions/ICQException.java:44:		super(         +
messenger/ICQ/ICQExceptions/ICQException.java:56:	public ICQException(String message) {
messenger/ICQ/ICQExceptions/ICQException.java:57:		super(message);
messenger/ICQ/ICQExceptions/ICQTimeOutException.java:39:	public ICQTimeOutException() {
messenger/ICQ/ICQExceptions/ICQTimeOutException.java:40:		super(                           +
messenger/ICQ/ICQExceptions/ICQStringIndexOutOfBoundsException.java:39:	public ICQStringIndexOutOfBoundsException() {
messenger/ICQ/ICQExceptions/ICQStringIndexOutOfBoundsException.java:40:		super(                   +
messenger/ICQ/ICQExceptions/ICQIOException.java:39:	public ICQIOException() {
messenger/ICQ/ICQExceptions/ICQIOException.java:40:		super(                    +
messenger/ICQ/ICQExceptions/ICQBadArgumentException.java:39:	public ICQBadArgumentException() {
messenger/ICQ/ICQExceptions/ICQBadArgumentException.java:40:		super(                    +
messenger/ICQ/ICQExceptions/ICQUnknownPacketException.java:39:	public ICQUnknownPacketException() {
messenger/ICQ/ICQExceptions/ICQUnknownPacketException.java:40:		super(                   +
messenger/ICQ/ICQCLI_ADDBUDDYPacket.java:51:	public ICQCLI_ADDBUDDYPacket(Vector arg) {
messenger/ICQ/ICQCLI_ADDBUDDYPacket.java:52:		assert (arg.size() == 2);
messenger/ICQ/ICQCLI_ADDBUDDYPacket.java:54:		fUin = (String)arg.elementAt(0);
messenger/ICQ/ICQCLI_ADDBUDDYPacket.java:55:		fNick = (String)arg.elementAt(1);
messenger/ICQ/ICQCLI_ADDBUDDYPacket.java:61:		setKindOfPacket(              );
messenger/ICQ/ICQCLI_ADDBUDDYPacket.java:62:		updatePacket();
messenger/ICQ/ICQCLI_ADDBUDDYPacket.java:64:		assert (fUin.length() < 10);                            
messenger/ICQ/ICQCLI_ADDBUDDYPacket.java:65:		assert (fNick !=   );
messenger/ICQ/ICQCLI_ADDBUDDYPacket.java:71:	private void updatePacket() {
messenger/ICQ/ICQCLI_ADDBUDDYPacket.java:72:		int randomnumber = new Random().nextInt(65536);
messenger/ICQ/ICQCLI_ADDBUDDYPacket.java:76:									+Utils.TwoByteInt2FourCharString(Utils.UIN(fUin).length()/2)+Utils.UIN(fUin)                                    
messenger/ICQ/ICQCLI_ADDBUDDYPacket.java:78:									+Utils.intToHex(randomnumber)
messenger/ICQ/ICQCLI_ADDBUDDYPacket.java:80:									+Utils.TwoByteInt2FourCharString(4+Utils.HexFromString(fNick).length()/2)
messenger/ICQ/ICQCLI_ADDBUDDYPacket.java:82:									+Utils.TwoByteInt2FourCharString(Utils.HexFromString(fNick).length()/2)
messenger/ICQ/ICQCLI_ADDBUDDYPacket.java:83:									+Utils.HexFromString(fNick);
messenger/ICQ/ICQCLI_ADDBUDDYPacket.java:85:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQCLI_COOKIEPacket.java:50:	public ICQCLI_COOKIEPacket(Vector arg) {
messenger/ICQ/ICQCLI_COOKIEPacket.java:51:		assert (arg.size() == 1);
messenger/ICQ/ICQCLI_COOKIEPacket.java:53:		fCookie = (String)arg.elementAt(0);
messenger/ICQ/ICQCLI_COOKIEPacket.java:57:		setKindOfPacket(            );
messenger/ICQ/ICQCLI_COOKIEPacket.java:58:		updatePacket();
messenger/ICQ/ICQCLI_COOKIEPacket.java:66:	private void updatePacket() {
messenger/ICQ/ICQCLI_COOKIEPacket.java:68:									+TLV6+Utils.TwoByteInt2FourCharString(fCookie.length()/2)+fCookie;
messenger/ICQ/ICQCLI_COOKIEPacket.java:70:		setContent(Utils.fromHexString(LOGIN+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQSRV_USEROFFLINEPacket.java:44:	public ICQSRV_USEROFFLINEPacket(String s) {
messenger/ICQ/ICQSRV_USEROFFLINEPacket.java:45:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_USEROFFLINEPacket.java:46:		setKindOfPacket(                 );
messenger/ICQ/ICQSRV_USEROFFLINEPacket.java:48:		analyze();
messenger/ICQ/ICQSRV_USEROFFLINEPacket.java:55:	public String getUin() {
messenger/ICQ/ICQSRV_USEROFFLINEPacket.java:62:	private void analyze() {
messenger/ICQ/ICQSRV_USEROFFLINEPacket.java:63:		String s = getContentHex();
messenger/ICQ/ICQSRV_USEROFFLINEPacket.java:67:		int length = (((int)s.charAt(32))-48)*16 + (((int)s.charAt(33))-48);
messenger/ICQ/ICQSRV_USEROFFLINEPacket.java:69:		for(int i = 0; i < length*2; i=i+2) {
messenger/ICQ/ICQSRV_USEROFFLINEPacket.java:70:			uin += s.charAt(35+i);
messenger/ICQ/ICQCLI_REQBOSPacket.java:44:	public ICQCLI_REQBOSPacket(Vector arg) {
messenger/ICQ/ICQCLI_REQBOSPacket.java:45:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_REQBOSPacket.java:47:		setKindOfPacket(            );
messenger/ICQ/ICQCLI_REQBOSPacket.java:48:		updatePacket();
messenger/ICQ/ICQCLI_REQBOSPacket.java:54:	private void updatePacket() {
messenger/ICQ/ICQCLI_REQBOSPacket.java:58:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQSRV_USERONLINEPacket.java:46:	public ICQSRV_USERONLINEPacket(String s) {
messenger/ICQ/ICQSRV_USERONLINEPacket.java:47:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_USERONLINEPacket.java:48:		setKindOfPacket(                );
messenger/ICQ/ICQSRV_USERONLINEPacket.java:50:		analyze();
messenger/ICQ/ICQSRV_USERONLINEPacket.java:57:	public String getUin() {
messenger/ICQ/ICQSRV_USERONLINEPacket.java:65:	public String getStatus() {
messenger/ICQ/ICQSRV_USERONLINEPacket.java:72:	private void analyze() {
messenger/ICQ/ICQSRV_USERONLINEPacket.java:73:		String s = getContentHex();
messenger/ICQ/ICQSRV_USERONLINEPacket.java:77:		int length = (((int)s.charAt(32))-48)*16 + (((int)s.charAt(33))-48);
messenger/ICQ/ICQSRV_USERONLINEPacket.java:79:		for(int i = 0; i < length*2; i=i+2) {
messenger/ICQ/ICQSRV_USERONLINEPacket.java:80:			uin += s.charAt(35+i);
messenger/ICQ/ICQSRV_USERONLINEPacket.java:85:		while((j < s.length())&&(!found)) {	
messenger/ICQ/ICQSRV_USERONLINEPacket.java:86:			if((s.charAt(j) ==    )&&(s.charAt(j+1) ==    )&&(s.charAt(j+2) ==    )&&(s.charAt(j+3) ==    )&&
messenger/ICQ/ICQSRV_USERONLINEPacket.java:87:				(s.charAt(j+4) ==    )&&(s.charAt(j+5) ==    )&&(s.charAt(j+6) ==    )&&(s.charAt(j+7) ==    )) {
messenger/ICQ/ICQSRV_USERONLINEPacket.java:93:				for(int k = 0; k < 4; k++) {						
messenger/ICQ/ICQSRV_USERONLINEPacket.java:94:					fStatusHex += s.charAt(j);
messenger/ICQ/ICQSRV_USERONLINEPacket.java:103:		if(fStatusHex.equals(      )) {
messenger/ICQ/ICQSRV_USERONLINEPacket.java:106:		else if(fStatusHex.equals(      )) {
messenger/ICQ/ICQSRV_USERONLINEPacket.java:109:		else if(fStatusHex.equals(      )) {
messenger/ICQ/ICQSRV_USERONLINEPacket.java:112:		else if(fStatusHex.equals(      )) {
messenger/ICQ/ICQSRV_USERONLINEPacket.java:115:		else if(fStatusHex.equals(      )) {
messenger/ICQ/ICQSRV_USERONLINEPacket.java:118:		else if(fStatusHex.equals(      )) {
messenger/ICQ/ICQSRV_USERONLINEPacket.java:121:		else if(fStatusHex.equals(      )) {
messenger/ICQ/ICQSRV_USERONLINEPacket.java:125:			System.out.println(          +fStatusHex);
messenger/ICQ/ICQSRV_REPLYBUDDYPacket.java:38:	public ICQSRV_REPLYBUDDYPacket (String s) {
messenger/ICQ/ICQSRV_REPLYBUDDYPacket.java:39:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_REPLYBUDDYPacket.java:40:		setKindOfPacket(                );
messenger/ICQ/ICQSRV_REPLYLISTSPacket.java:38:	public ICQSRV_REPLYLISTSPacket (String s) {
messenger/ICQ/ICQSRV_REPLYLISTSPacket.java:39:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_REPLYLISTSPacket.java:40:		setKindOfPacket(                );
messenger/ICQ/ICQCLI_REQICBMPacket.java:46:	public ICQCLI_REQICBMPacket(Vector arg) {
messenger/ICQ/ICQCLI_REQICBMPacket.java:47:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_REQICBMPacket.java:49:		setKindOfPacket(             );
messenger/ICQ/ICQCLI_REQICBMPacket.java:50:		updatePacket();
messenger/ICQ/ICQCLI_REQICBMPacket.java:56:	private void updatePacket() {
messenger/ICQ/ICQCLI_REQICBMPacket.java:60:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQCLI_REQBUDDYPacket.java:44:	public ICQCLI_REQBUDDYPacket(Vector arg) {
messenger/ICQ/ICQCLI_REQBUDDYPacket.java:45:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_REQBUDDYPacket.java:47:		setKindOfPacket(              );
messenger/ICQ/ICQCLI_REQBUDDYPacket.java:48:		updatePacket();
messenger/ICQ/ICQCLI_REQBUDDYPacket.java:54:	private void updatePacket() {
messenger/ICQ/ICQCLI_REQBUDDYPacket.java:58:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:41:	public ICQSRV_RECVMSGV2Packet(String s) {
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:42:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:43:		setKindOfPacket(               );
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:45:		analyze();
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:48:	private void analyze() {
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:49:		String s = getContentHex();
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:52:		int length = (((int)s.charAt(8))-48)*4096 + (((int)s.charAt(9))-48)*256 + (((int)s.charAt(10))-48)*16  + ((int)(s.charAt(11))-48);
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:53:		if((((int)s.charAt(51))-48) == 2) {
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:54:			for(int i = 0; i < (((int)s.charAt(53))-48)*2; i=i+2) {
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:55:				uin += s.charAt(55+i);
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:63:			while((j+21 < s.length())&&(!found)) {	
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:64:				if((s.charAt(j) ==    )&&(s.charAt(j+1) ==    )&&(s.charAt(j+2) ==    )&&(s.charAt(j+3) ==    )&&
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:65:					(s.charAt(j+4) ==    )&&(s.charAt(j+5) ==    )&&(s.charAt(j+6) ==    )&&(s.charAt(j+7) ==    )&&
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:66:					(s.charAt(j+8) ==    )&&(s.charAt(j+9) ==    )&&(s.charAt(j+10) ==    )&&(s.charAt(j+11) ==    )
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:67:					&&(s.charAt(j+12) ==    )) {
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:75:					int messagelength = (((int)s.charAt(j))-48)*16 + (((int)s.charAt(j+1))-48);
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:80:					while(!(s.charAt(j) ==    )) {
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:81:						message += s.charAt(j);
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:82:						message += s.charAt(j+1);
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:89:					fMessage = Utils.HexString2AsciiString(message);
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:99:	public String getUin() {
messenger/ICQ/ICQSRV_RECVMSGV2Packet.java:103:	public String getMessage() {
messenger/ICQ/ICQSRV_HELLOPacket.java:38:	public ICQSRV_HELLOPacket (String s) {
messenger/ICQ/ICQSRV_HELLOPacket.java:39:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_HELLOPacket.java:40:		setKindOfPacket(           );
messenger/ICQ/ICQPacketFactory.java:48:	public IPacket createOutgoingPacket(String packet, Vector arg) throws UnknownPacketException, BadArgumentException {
messenger/ICQ/ICQPacketFactory.java:49:		if(packet.equals(           )) {
messenger/ICQ/ICQPacketFactory.java:50:			return new ICQCLI_IDENTPacket(arg);
messenger/ICQ/ICQPacketFactory.java:52:		else if(packet.equals(             )) {
messenger/ICQ/ICQPacketFactory.java:53:			return new ICQCLI_GOODBYEPacket(arg);	
messenger/ICQ/ICQPacketFactory.java:55:		else if(packet.equals(            )) {
messenger/ICQ/ICQPacketFactory.java:56:			return new ICQCLI_COOKIEPacket(arg);
messenger/ICQ/ICQPacketFactory.java:58:		else if(packet.equals(              )) {
messenger/ICQ/ICQPacketFactory.java:59:			return new ICQCLI_FAMILIESPacket(arg);
messenger/ICQ/ICQPacketFactory.java:61:		else if(packet.equals(                  )) {
messenger/ICQ/ICQPacketFactory.java:62:			return new ICQCLI_RATESREQUESTPacket(arg);
messenger/ICQ/ICQPacketFactory.java:64:		else if(packet.equals(             )) {
messenger/ICQ/ICQPacketFactory.java:65:			return new ICQCLI_REQINFOPacket(arg);
messenger/ICQ/ICQPacketFactory.java:67:		else if(packet.equals(                 )) {
messenger/ICQ/ICQPacketFactory.java:68:			return new ICQCLI_REQLOCATIONPacket(arg);
messenger/ICQ/ICQPacketFactory.java:70:		else if(packet.equals(              )) {
messenger/ICQ/ICQPacketFactory.java:71:			return new ICQCLI_REQBUDDYPacket(arg);
messenger/ICQ/ICQPacketFactory.java:73:		else if(packet.equals(              )) {
messenger/ICQ/ICQPacketFactory.java:74:			return new ICQCLI_REQLISTSPacket(arg);
messenger/ICQ/ICQPacketFactory.java:76:		else if(packet.equals(             )) {
messenger/ICQ/ICQPacketFactory.java:77:			return new ICQCLI_REQICBMPacket(arg);
messenger/ICQ/ICQPacketFactory.java:79:		else if(packet.equals(            )) {
messenger/ICQ/ICQPacketFactory.java:80:			return new ICQCLI_REQBOSPacket(arg);
messenger/ICQ/ICQPacketFactory.java:82:		else if(packet.equals(              )) {
messenger/ICQ/ICQPacketFactory.java:83:			return new ICQCLI_ACKRATESPacket(arg);
messenger/ICQ/ICQPacketFactory.java:85:		else if(packet.equals(             )) {
messenger/ICQ/ICQPacketFactory.java:86:			return new ICQCLI_SETICBMPacket(arg);
messenger/ICQ/ICQPacketFactory.java:88:		else if(packet.equals(                 )) {
messenger/ICQ/ICQPacketFactory.java:89:			return new ICQCLI_SETUSERINFOPacket(arg);
messenger/ICQ/ICQPacketFactory.java:91:		else if(packet.equals(               )) {
messenger/ICQ/ICQPacketFactory.java:93:				return new ICQCLI_SETSTATUSPacket(arg);
messenger/ICQ/ICQPacketFactory.java:95:			catch(BadArgumentException e) {
messenger/ICQ/ICQPacketFactory.java:96:				throw new BadArgumentException();
messenger/ICQ/ICQPacketFactory.java:99:		else if(packet.equals(               )) {
messenger/ICQ/ICQPacketFactory.java:100:			return new ICQCLI_REQROSTERPacket(arg);
messenger/ICQ/ICQPacketFactory.java:102:		else if(packet.equals(           )) {
messenger/ICQ/ICQPacketFactory.java:103:			return new ICQCLI_READYPacket(arg);
messenger/ICQ/ICQPacketFactory.java:105:		else if(packet.equals(              )) {
messenger/ICQ/ICQPacketFactory.java:106:			return new ICQCLI_TOICQSERVERPacket(arg);
messenger/ICQ/ICQPacketFactory.java:108:		else if(packet.equals(             )) {
messenger/ICQ/ICQPacketFactory.java:109:			return new ICQCLI_SENDMSGPacket(arg);
messenger/ICQ/ICQPacketFactory.java:111:		else if(packet.equals(               )) {
messenger/ICQ/ICQPacketFactory.java:112:			return new ICQCLI_SENDMSGV1Packet(arg);	
messenger/ICQ/ICQPacketFactory.java:114:		else if(packet.equals(              )) {
messenger/ICQ/ICQPacketFactory.java:115:			return new ICQCLI_ADDBUDDYPacket(arg);
messenger/ICQ/ICQPacketFactory.java:117:		else if(packet.equals(                )) {
messenger/ICQ/ICQPacketFactory.java:118:			return new ICQCLI_ADDCONTACTPacket(arg);
messenger/ICQ/ICQPacketFactory.java:120:		else if(packet.equals(               )) {
messenger/ICQ/ICQPacketFactory.java:121:			return new ICQCLI_KEEPALIVEPacket(arg);	
messenger/ICQ/ICQPacketFactory.java:124:	  		 throw new UnknownPacketException();
messenger/ICQ/ICQPacketFactory.java:131:	public IPacket createIncomingPacket(String s) throws UnknownPacketException {
messenger/ICQ/ICQPacketFactory.java:132:		if((s.length() == 20)&&(s.charAt(12) ==    )&&(s.charAt(13) ==    )
messenger/ICQ/ICQPacketFactory.java:133:									&&(s.charAt(14) ==    )&&(s.charAt(15) ==    )
messenger/ICQ/ICQPacketFactory.java:134:									&&(s.charAt(16) ==    )&&(s.charAt(17) ==    )
messenger/ICQ/ICQPacketFactory.java:135:									&&(s.charAt(18) ==    )&&(s.charAt(19) ==    )) {
messenger/ICQ/ICQPacketFactory.java:136:			return new ICQSRV_HELLOPacket(s);
messenger/ICQ/ICQPacketFactory.java:138:		else if((s.charAt(3) ==    )&&(s.charAt(15) ==    )) { 
messenger/ICQ/ICQPacketFactory.java:139:			return new ICQSRV_COOKIEPacket(s);
messenger/ICQ/ICQPacketFactory.java:141:		else if((s.charAt(15) ==    )&&(s.charAt(19) ==    )) { 
messenger/ICQ/ICQPacketFactory.java:142:			return new ICQSRV_FAMILIESPacket(s);
messenger/ICQ/ICQPacketFactory.java:144:		else if((s.charAt(15) ==    )&&(s.charAt(18) ==    )&&(s.charAt(19) ==    )) { 
messenger/ICQ/ICQPacketFactory.java:145:			return new ICQSRV_FAMILIES2Packet(s);
messenger/ICQ/ICQPacketFactory.java:147:		else if((s.charAt(15) ==    )&&(s.charAt(19) ==    )) { 
messenger/ICQ/ICQPacketFactory.java:148:			return new ICQSRV_RATESPacket(s);
messenger/ICQ/ICQPacketFactory.java:150:		else if((s.charAt(15) ==    )&&((s.charAt(19) ==    )||(s.charAt(19) ==    ))) { 
messenger/ICQ/ICQPacketFactory.java:151:			return new ICQSRV_REPLYINFOPacket(s);
messenger/ICQ/ICQPacketFactory.java:153:		else if((s.charAt(15) ==    )&&(s.charAt(19) ==    )) { 
messenger/ICQ/ICQPacketFactory.java:154:			return new ICQSRV_REPLYLOCATIONPacket(s);
messenger/ICQ/ICQPacketFactory.java:156:		else if((s.charAt(15) ==    )&&(s.charAt(19) ==    )) { 
messenger/ICQ/ICQPacketFactory.java:157:			return new ICQSRV_CONTACTERRPacket(s);
messenger/ICQ/ICQPacketFactory.java:159:		else if((s.charAt(15) ==    )&&(s.charAt(19) ==    )) { 
messenger/ICQ/ICQPacketFactory.java:160:			return new ICQSRV_REPLYBUDDYPacket(s);
messenger/ICQ/ICQPacketFactory.java:162:		else if((s.charAt(15) ==    )&&((s.charAt(19) ==    )||(s.charAt(19) ==    ))) { 
messenger/ICQ/ICQPacketFactory.java:163:			return new ICQSRV_REFUSEDPacket(s);
messenger/ICQ/ICQPacketFactory.java:165:		else if((s.charAt(15) ==    )&&((s.charAt(19) ==    )||(s.charAt(19) ==    ))) { 
messenger/ICQ/ICQPacketFactory.java:166:			return new ICQSRV_USERONLINEPacket(s);
messenger/ICQ/ICQPacketFactory.java:168:		else if((s.charAt(15) ==    )&&((s.charAt(19) ==    )||(s.charAt(19) ==    ))) { 
messenger/ICQ/ICQPacketFactory.java:169:			return new ICQSRV_USEROFFLINEPacket(s);
messenger/ICQ/ICQPacketFactory.java:171:		else if((s.charAt(15) ==    )&&(s.charAt(19) ==    )) { 
messenger/ICQ/ICQPacketFactory.java:172:			return new ICQSRV_ICBMERRPacket(s);
messenger/ICQ/ICQPacketFactory.java:174:		else if((s.charAt(15) ==    )&&(s.charAt(19) ==    )) { 
messenger/ICQ/ICQPacketFactory.java:175:			return new ICQSRV_REPLYICBMPacket(s);
messenger/ICQ/ICQPacketFactory.java:177:		else if((s.charAt(15) ==    )&&((s.charAt(19) ==    )||(s.charAt(19) ==    ))) { 
messenger/ICQ/ICQPacketFactory.java:178:			return new ICQSRV_ACKMSGPacket(s);
messenger/ICQ/ICQPacketFactory.java:180:		else if((s.charAt(15) ==    )&&((s.charAt(19) ==    )||(s.charAt(19) ==    ))) { 
messenger/ICQ/ICQPacketFactory.java:181:			return new ICQSRV_SRVACKMSGPacket(s);
messenger/ICQ/ICQPacketFactory.java:183:		else if((s.charAt(15) ==    )&&(s.charAt(19) ==    )) { 
messenger/ICQ/ICQPacketFactory.java:184:			return new ICQSRV_REPLYBOSPacket(s);
messenger/ICQ/ICQPacketFactory.java:186:		else if((s.charAt(14) ==    )&&(s.charAt(15) ==    )&&(s.charAt(19) ==    )) { 
messenger/ICQ/ICQPacketFactory.java:187:			return new ICQSRV_REPLYLISTSPacket(s);
messenger/ICQ/ICQPacketFactory.java:189:		else if((s.charAt(14) ==    )&&(s.charAt(15) ==    )&&(s.charAt(19) ==    )) { 
messenger/ICQ/ICQPacketFactory.java:190:			return new ICQSRV_REPLYROSTERPacket(s);
messenger/ICQ/ICQPacketFactory.java:192:		else if((s.charAt(14) ==    )&&(s.charAt(15) ==    )&&(s.charAt(19) ==    )) { 
messenger/ICQ/ICQPacketFactory.java:193:			return new ICQSRV_UPDATEACKPacket(s);
messenger/ICQ/ICQPacketFactory.java:195:		else if((s.charAt(14) ==    )&&(s.charAt(15) ==    )&&(s.charAt(19) ==    )) { 
messenger/ICQ/ICQPacketFactory.java:196:			return new ICQSRV_REPLYLISTSPacket(s);
messenger/ICQ/ICQPacketFactory.java:198:		else if(s.length() < 51) {	
messenger/ICQ/ICQPacketFactory.java:199:			System.out.println(          +Utils.printableHexString(s));
messenger/ICQ/ICQPacketFactory.java:200:			throw new UnknownPacketException();
messenger/ICQ/ICQPacketFactory.java:202:		else if((s.charAt(15) ==    )&&(s.charAt(19) ==    )&&(s.charAt(48) ==    )&&(s.charAt(49) ==    )
messenger/ICQ/ICQPacketFactory.java:203:				&&(s.charAt(50) ==    )&&(s.charAt(51) ==    )) {                         
messenger/ICQ/ICQPacketFactory.java:204:			return new ICQSRV_RECVMSGV1Packet(s);
messenger/ICQ/ICQPacketFactory.java:206:		else if((s.charAt(15) ==    )&&(s.charAt(19) ==    )&&(s.charAt(48) ==    )&&(s.charAt(49) ==    )
messenger/ICQ/ICQPacketFactory.java:207:				&&(s.charAt(50) ==    )&&(s.charAt(51) ==    )) {                         
messenger/ICQ/ICQPacketFactory.java:208:			return new ICQSRV_RECVMSGV2Packet(s);
messenger/ICQ/ICQPacketFactory.java:211:			System.out.println(          +Utils.printableHexString(s));
messenger/ICQ/ICQPacketFactory.java:212:			throw new UnknownPacketException();	
messenger/ICQ/ICQSRV_FAMILIES2Packet.java:38:	public ICQSRV_FAMILIES2Packet (String s) {
messenger/ICQ/ICQSRV_FAMILIES2Packet.java:39:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_FAMILIES2Packet.java:40:		setKindOfPacket(               );
messenger/ICQ/ICQSRV_SRVACKMSGPacket.java:44:	public ICQSRV_SRVACKMSGPacket (String s) {
messenger/ICQ/ICQSRV_SRVACKMSGPacket.java:45:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_SRVACKMSGPacket.java:46:		setKindOfPacket(               );
messenger/ICQ/ICQCLI_SETUSERINFOPacket.java:45:	public ICQCLI_SETUSERINFOPacket(Vector arg) {
messenger/ICQ/ICQCLI_SETUSERINFOPacket.java:46:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_SETUSERINFOPacket.java:48:		setKindOfPacket(                 );
messenger/ICQ/ICQCLI_SETUSERINFOPacket.java:49:		updatePacket();
messenger/ICQ/ICQCLI_SETUSERINFOPacket.java:55:	private void updatePacket() {
messenger/ICQ/ICQCLI_SETUSERINFOPacket.java:64:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQCLI_REQROSTERPacket.java:52:	public ICQCLI_REQROSTERPacket(Vector arg) {
messenger/ICQ/ICQCLI_REQROSTERPacket.java:53:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_REQROSTERPacket.java:55:		setKindOfPacket(               );
messenger/ICQ/ICQCLI_REQROSTERPacket.java:56:		updatePacket();
messenger/ICQ/ICQCLI_REQROSTERPacket.java:62:	private void updatePacket() {
messenger/ICQ/ICQCLI_REQROSTERPacket.java:63:		Utils u = new Utils();
messenger/ICQ/ICQCLI_REQROSTERPacket.java:67:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQSRV_REFUSEDPacket.java:38:	public ICQSRV_REFUSEDPacket (String s) {
messenger/ICQ/ICQSRV_REFUSEDPacket.java:39:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_REFUSEDPacket.java:40:		setKindOfPacket(             );
messenger/ICQ/ICQCLI_SETICBMPacket.java:46:	public ICQCLI_SETICBMPacket(Vector arg) {
messenger/ICQ/ICQCLI_SETICBMPacket.java:47:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_SETICBMPacket.java:49:		setKindOfPacket(             );
messenger/ICQ/ICQCLI_SETICBMPacket.java:50:		updatePacket();
messenger/ICQ/ICQCLI_SETICBMPacket.java:56:	private void updatePacket() {
messenger/ICQ/ICQCLI_SETICBMPacket.java:62:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQSRV_REPLYLOCATIONPacket.java:38:	public ICQSRV_REPLYLOCATIONPacket (String s) {
messenger/ICQ/ICQSRV_REPLYLOCATIONPacket.java:39:		setContent(Utils.fromHexString(s));		
messenger/ICQ/ICQSRV_REPLYLOCATIONPacket.java:40:		setKindOfPacket(                   );
messenger/ICQ/ICQCLI_SENDMSGV1Packet.java:50:	public ICQCLI_SENDMSGV1Packet(Vector arg) {
messenger/ICQ/ICQCLI_SENDMSGV1Packet.java:51:		assert (arg.size() == 2);
messenger/ICQ/ICQCLI_SENDMSGV1Packet.java:53:		fUin = (String)arg.elementAt(0);
messenger/ICQ/ICQCLI_SENDMSGV1Packet.java:54:		fMessage = (String)arg.elementAt(1);
messenger/ICQ/ICQCLI_SENDMSGV1Packet.java:56:		setKindOfPacket(               );
messenger/ICQ/ICQCLI_SENDMSGV1Packet.java:57:		updatePacket();
messenger/ICQ/ICQCLI_SENDMSGV1Packet.java:59:		assert (fUin.length()/2 < 10);
messenger/ICQ/ICQCLI_SENDMSGV1Packet.java:60:		assert (fMessage !=   );
messenger/ICQ/ICQCLI_SENDMSGV1Packet.java:66:	private void updatePacket() {
messenger/ICQ/ICQCLI_SENDMSGV1Packet.java:69:									+Utils.TwoByteInt2FourCharString((fMessage.length()/2)+4)
messenger/ICQ/ICQCLI_SENDMSGV1Packet.java:82:								+Utils.intToHex(fUin.length()/2)+fUin
messenger/ICQ/ICQCLI_SENDMSGV1Packet.java:84:								+Utils.TwoByteInt2FourCharString(tlv0002.length()/2)
messenger/ICQ/ICQCLI_SENDMSGV1Packet.java:88:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQCLI_ADDCONTACTPacket.java:48:	public ICQCLI_ADDCONTACTPacket(Vector arg) {
messenger/ICQ/ICQCLI_ADDCONTACTPacket.java:52:		uins = new Vector(arg);
messenger/ICQ/ICQCLI_ADDCONTACTPacket.java:54:		setKindOfPacket(                );
messenger/ICQ/ICQCLI_ADDCONTACTPacket.java:55:		updatePacket();
messenger/ICQ/ICQCLI_ADDCONTACTPacket.java:61:	private void updatePacket() {
messenger/ICQ/ICQCLI_ADDCONTACTPacket.java:65:		for(int i = 0; i < uins.size(); i++) {
messenger/ICQ/ICQCLI_ADDCONTACTPacket.java:67:			ICQContact c = (ICQContact)uins.elementAt(i);
messenger/ICQ/ICQCLI_ADDCONTACTPacket.java:68:			String Uin = c.getUIN();
messenger/ICQ/ICQCLI_ADDCONTACTPacket.java:69:			body += Utils.TwoByteInt2FourCharString(Utils.UIN(Uin).length()/2)+Utils.UIN(Uin);                                    
messenger/ICQ/ICQCLI_ADDCONTACTPacket.java:72:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQCLI_REQINFOPacket.java:47:	public ICQCLI_REQINFOPacket(Vector arg) {
messenger/ICQ/ICQCLI_REQINFOPacket.java:48:		assert (arg.size() == 0);
messenger/ICQ/ICQCLI_REQINFOPacket.java:50:		setKindOfPacket(             );
messenger/ICQ/ICQCLI_REQINFOPacket.java:51:		updatePacket();
messenger/ICQ/ICQCLI_REQINFOPacket.java:57:	private void updatePacket() {
messenger/ICQ/ICQCLI_REQINFOPacket.java:61:		setContent(Utils.fromHexString(SNACS+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/ICQ/ICQPacket.java:113:	public ICQPacket() {
messenger/ICQ/ICQPacket.java:114:		fU = new Utils();
messenger/ICQ/ICQPacket.java:123:	protected void setKindOfPacket(String s) {                                                                                                  
messenger/ICQ/ICQPacket.java:134:	public String getKindOfPacket() {
messenger/ICQ/ICQCLI_IDENTPacket.java:54:	public ICQCLI_IDENTPacket(Vector arg) {
messenger/ICQ/ICQCLI_IDENTPacket.java:55:		assert (arg.size() == 3);
messenger/ICQ/ICQCLI_IDENTPacket.java:57:		fUin = (String)arg.elementAt(0);
messenger/ICQ/ICQCLI_IDENTPacket.java:58:		fPassword = (String)arg.elementAt(1);
messenger/ICQ/ICQCLI_IDENTPacket.java:59:		fVersion = (String)arg.elementAt(2);
messenger/ICQ/ICQCLI_IDENTPacket.java:64:		setKindOfPacket(           );
messenger/ICQ/ICQCLI_IDENTPacket.java:65:		updatePacket();
messenger/ICQ/ICQCLI_IDENTPacket.java:67:		assert (fUin.length()/2 < 10);                            
messenger/ICQ/ICQCLI_IDENTPacket.java:68:		assert (fPassword !=   );
messenger/ICQ/ICQCLI_IDENTPacket.java:74:	private void updatePacket() {
messenger/ICQ/ICQCLI_IDENTPacket.java:76:									+TLV1+Utils.TwoByteInt2FourCharString(fUin.length()/2)+fUin                                    
messenger/ICQ/ICQCLI_IDENTPacket.java:77:									+TLV2+Utils.TwoByteInt2FourCharString(fPassword.length()/2)+fPassword
messenger/ICQ/ICQCLI_IDENTPacket.java:78:									+TLV3+Utils.TwoByteInt2FourCharString(fVersion.length()/2)+fVersion
messenger/ICQ/ICQCLI_IDENTPacket.java:88:		setContent(Utils.fromHexString(LOGIN+Utils.TwoByteInt2FourCharString(SEQUENCE)+Utils.TwoByteInt2FourCharString(body.length()/2)+body));
messenger/PacketFactory.java:49:   public IPacketFactory getFactory(AProtocol ap) throws UnknownProtocolException {
messenger/PacketFactory.java:50:		if(ap instanceof ICQProtocol) {
messenger/PacketFactory.java:51:			return new ICQPacketFactory();
messenger/PacketFactory.java:53:		else if(ap instanceof MSNProtocol) {
messenger/PacketFactory.java:54:			return new MSNPacketFactory();
messenger/PacketFactory.java:56:		else if(ap instanceof YahooProtocol) {
messenger/PacketFactory.java:57:			return new YahooPacketFactory();
messenger/PacketFactory.java:60:			throw new UnknownProtocolException();
messenger/IncomingNullPacketException.java:36:	public IncomingNullPacketException() {
messenger/IncomingNullPacketException.java:37:		super();
messenger/IncomingNullPacketException.java:44:	public IncomingNullPacketException(String message) {
messenger/IncomingNullPacketException.java:45:		super(message);
messenger/IncomingNullPacketException.java:53:	public IncomingNullPacketException(String message, Throwable cause) {
messenger/IncomingNullPacketException.java:54:		super(message, cause);
messenger/IncomingNullPacketException.java:61:	public IncomingNullPacketException(Throwable cause) {
messenger/IncomingNullPacketException.java:62:		super(cause);
messenger/CorruptPacketException.java:42:	public CorruptPacketException() {
messenger/CorruptPacketException.java:43:		super();
messenger/CorruptPacketException.java:50:	public CorruptPacketException(String message) {
messenger/CorruptPacketException.java:51:		super(message);
messenger/CorruptPacketException.java:59:	public CorruptPacketException(String message, Throwable cause) {
messenger/CorruptPacketException.java:60:		super(message, cause);
messenger/CorruptPacketException.java:67:	public CorruptPacketException(Throwable cause) {
messenger/CorruptPacketException.java:68:		super(cause);
messenger/TimeOutException.java:40:	public TimeOutException() {
messenger/TimeOutException.java:41:		super();
messenger/TimeOutException.java:48:	public TimeOutException(String message) {
messenger/TimeOutException.java:49:		super(message);
messenger/TimeOutException.java:57:	public TimeOutException(String message, Throwable cause) {
messenger/TimeOutException.java:58:		super(message, cause);
messenger/TimeOutException.java:61:	public TimeOutException(Throwable cause) {
messenger/TimeOutException.java:62:		super(cause);
messenger/Yahoo/YahooSRV_HELLOPacket.java:37:	public YahooSRV_HELLOPacket (String s) {
messenger/Yahoo/YahooSRV_HELLOPacket.java:39:		setContent(Utils.fromHexString(s));	
messenger/Yahoo/YahooSRV_HELLOPacket.java:41:		setKindOfPacket(           );
messenger/Yahoo/YahooSRV_LOGONPacket.java:17:	public YahooSRV_LOGONPacket (String s) {
messenger/Yahoo/YahooSRV_LOGONPacket.java:18:		setContent(Utils.fromHexString(s));		
messenger/Yahoo/YahooSRV_LOGONPacket.java:19:		setKindOfPacket(           );
messenger/Yahoo/YahooSRV_LOGONPacket.java:21:	analyze();
messenger/Yahoo/YahooSRV_LOGONPacket.java:29:		public String getContact() {
messenger/Yahoo/YahooSRV_LOGONPacket.java:37:		public String getStatus() {
messenger/Yahoo/YahooSRV_LOGONPacket.java:41:	private void analyze() {
messenger/Yahoo/YahooSRV_LOGONPacket.java:43:		String s = getContentHex(), content =   ;
messenger/Yahoo/YahooSRV_LOGONPacket.java:45:		while(((i+7) < s.length())&&!((s.charAt(i) ==    )&&(s.charAt(i+1) ==    )&&(s.charAt(i+2) ==    )&&
messenger/Yahoo/YahooSRV_LOGONPacket.java:46:					(s.charAt(i+3) ==    )&&(s.charAt(i+4) ==    )&&(s.charAt(i+5) ==    ))) {		
messenger/Yahoo/YahooSRV_LOGONPacket.java:51:		while((i+3 < s.length())&&!((s.charAt(i) ==    )&&(s.charAt(i+1) ==    )&&(s.charAt(i+2) ==    )&&(s.charAt(i+3) ==    ))) {
messenger/Yahoo/YahooSRV_LOGONPacket.java:52:				content += s.charAt(i);	
messenger/Yahoo/YahooSRV_LOGONPacket.java:55:		fContact = Utils.HexString2AsciiString(content);
messenger/Yahoo/YahooSRV_ISBACKACKPacket.java:38:		public YahooSRV_ISBACKACKPacket (String s) {
messenger/Yahoo/YahooSRV_ISBACKACKPacket.java:39:		setContent(Utils.fromHexString(s));		
messenger/Yahoo/YahooSRV_ISBACKACKPacket.java:40:		setKindOfPacket(               );
messenger/Yahoo/YahooCLI_AUTHPacket.java:44:	public YahooCLI_AUTHPacket(Vector arg) {
messenger/Yahoo/YahooCLI_AUTHPacket.java:45:		assert (arg.size() == 1);
messenger/Yahoo/YahooCLI_AUTHPacket.java:47:		fUin = (String)arg.elementAt(0);
messenger/Yahoo/YahooCLI_AUTHPacket.java:49:		setKindOfPacket(          );
messenger/Yahoo/YahooCLI_AUTHPacket.java:50:		updatePacket();
messenger/Yahoo/YahooCLI_AUTHPacket.java:56:	private void updatePacket() {
messenger/Yahoo/YahooCLI_AUTHPacket.java:62:		this.setHeader(    , body.length());
messenger/Yahoo/YahooCLI_AUTHPacket.java:63:		this.setBody(body);
messenger/Yahoo/YahooCLI_AUTHPacket.java:64:		this.setContent();
messenger/Yahoo/YahooSRV_NOTIFYPacket.java:38:	public YahooSRV_NOTIFYPacket (String s) {
messenger/Yahoo/YahooSRV_NOTIFYPacket.java:39:		setContent(Utils.fromHexString(s));		
messenger/Yahoo/YahooSRV_NOTIFYPacket.java:40:		setKindOfPacket(            );
messenger/Yahoo/YahooCLI_0015Packet.java:38:	public YahooCLI_0015Packet(Vector arg) {
messenger/Yahoo/YahooCLI_0015Packet.java:39:		assert (arg.size() == 0);
messenger/Yahoo/YahooCLI_0015Packet.java:41:		setKindOfPacket(          );
messenger/Yahoo/YahooCLI_0015Packet.java:42:		updatePacket();
messenger/Yahoo/YahooCLI_0015Packet.java:48:	private void updatePacket() {
messenger/Yahoo/YahooCLI_0015Packet.java:55:		this.setHeader(    , body.length());
messenger/Yahoo/YahooCLI_0015Packet.java:56:		this.setBody(body);
messenger/Yahoo/YahooCLI_0015Packet.java:57:		this.setContent();
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:46:	public YahooCLI_ISAWAYPacket(Vector arg) throws BadArgumentException {
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:47:		assert (arg.size() == 1);
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:49:		setKindOfPacket(            );
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:51:		String s = (String)arg.elementAt(0);
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:52:		if(s.equals(        )) { fStatus =       ; }
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:53:		else if(s.equals(     )) { fStatus =       ; }
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:54:		else if(s.equals(      )) { fStatus =       ; }
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:55:		else if(s.equals(           )) { fStatus =       ; }
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:56:		else if(s.equals(           )) { fStatus =       ; }
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:57:		else if(s.equals(             )) { fStatus =       ; }
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:58:		else if(s.equals(         )) { fStatus =       ; }
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:59:		else if(s.equals(           )) { fStatus =       ; }
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:60:		else if(s.equals(         )) { fStatus =             ; }
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:61:		else { throw new BadArgumentException(); }
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:63:		updatePacket();
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:69:	private void updatePacket() {
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:75:		this.setHeader(    , body.length());
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:76:		this.setBody(body);
messenger/Yahoo/YahooCLI_ISAWAYPacket.java:77:		this.setContent();
messenger/Yahoo/YahooCLI_ISBACKPacket.java:43:	public YahooCLI_ISBACKPacket(Vector arg) {
messenger/Yahoo/YahooCLI_ISBACKPacket.java:44:		assert (arg.size() == 0);
messenger/Yahoo/YahooCLI_ISBACKPacket.java:46:		setKindOfPacket(            );
messenger/Yahoo/YahooCLI_ISBACKPacket.java:47:		setUNKNOWN(          );
messenger/Yahoo/YahooCLI_ISBACKPacket.java:48:		updatePacket();
messenger/Yahoo/YahooCLI_ISBACKPacket.java:54:	private void updatePacket() {
messenger/Yahoo/YahooCLI_ISBACKPacket.java:57:		this.setHeader(    , 0);
messenger/Yahoo/YahooCLI_ISBACKPacket.java:58:		this.setBody(null);
messenger/Yahoo/YahooCLI_ISBACKPacket.java:59:		this.setContent();
messenger/Yahoo/YahooEncrypt.java:69:		public Base64OutputStream(OutputStream out) {
messenger/Yahoo/YahooEncrypt.java:70:			super(out);
messenger/Yahoo/YahooEncrypt.java:73:	   public void write(int c) throws IOException {
messenger/Yahoo/YahooEncrypt.java:76:			if (i == 3) {
messenger/Yahoo/YahooEncrypt.java:77:				super.write(toBase64[(inbuf[0] & 0xFC) >> 2]);
messenger/Yahoo/YahooEncrypt.java:78:				super.write(toBase64[((inbuf[0] & 0x03) << 4) | ((inbuf[1] & 0xF0) >> 4)]);
messenger/Yahoo/YahooEncrypt.java:79:				super.write(toBase64[((inbuf[1] & 0x0F) << 2) | ((inbuf[2] & 0xC0) >> 6)]);
messenger/Yahoo/YahooEncrypt.java:80:				super.write(toBase64[inbuf[2] & 0x3F]);
messenger/Yahoo/YahooEncrypt.java:83:				if (col >= 76) {
messenger/Yahoo/YahooEncrypt.java:84:					super.write(    );
messenger/Yahoo/YahooEncrypt.java:90:		public void flush() throws IOException {
messenger/Yahoo/YahooEncrypt.java:91:			if (i == 1) {
messenger/Yahoo/YahooEncrypt.java:92:				super.write(toBase64[(inbuf[0] & 0xFC) >> 2]);
messenger/Yahoo/YahooEncrypt.java:93:				super.write(toBase64[(inbuf[0] & 0x03) << 4]);
messenger/Yahoo/YahooEncrypt.java:94:				super.write(   );
messenger/Yahoo/YahooEncrypt.java:95:				super.write(   );
messenger/Yahoo/YahooEncrypt.java:96:			} else if (i == 2) {
messenger/Yahoo/YahooEncrypt.java:97:				super.write(toBase64[(inbuf[0] & 0xFC) >> 2]);
messenger/Yahoo/YahooEncrypt.java:98:	         	super.write(toBase64[((inbuf[0] & 0x03) << 4) | ((inbuf[1] & 0xF0) >> 4)]);
messenger/Yahoo/YahooEncrypt.java:99:				super.write(toBase64[(inbuf[1] & 0x0F) << 2]);
messenger/Yahoo/YahooEncrypt.java:100:				super.write(   );
messenger/Yahoo/YahooEncrypt.java:106:	public String base64Encode2(byte[] s) {
messenger/Yahoo/YahooEncrypt.java:107:		ByteArrayOutputStream bOut = new ByteArrayOutputStream();
messenger/Yahoo/YahooEncrypt.java:108:		Base64OutputStream out = new Base64OutputStream(bOut);
messenger/Yahoo/YahooEncrypt.java:110:			out.write(s);
messenger/Yahoo/YahooEncrypt.java:111:			out.flush();
messenger/Yahoo/YahooEncrypt.java:112:		} catch (IOException exception) {
messenger/Yahoo/YahooEncrypt.java:113:			assert(false);
messenger/Yahoo/YahooEncrypt.java:117:		return bOut.toString();
messenger/Yahoo/YahooEncrypt.java:135:    public int Min (int a, int b) {
messenger/Yahoo/YahooEncrypt.java:136:	  if (a < b) {
messenger/Yahoo/YahooEncrypt.java:143:    public int Max (int a, int b) {
messenger/Yahoo/YahooEncrypt.java:144:	  if (a > b) {
messenger/Yahoo/YahooEncrypt.java:152:    public void b64_from_24bit(byte B2, byte B1, byte B0, int n) {
messenger/Yahoo/YahooEncrypt.java:153:	  int w = ((B2 & (0xFF)) << 16) | ((B1 & (0xFF)) << 8) | (B0 & (0xFF));
messenger/Yahoo/YahooEncrypt.java:154:	  while (n-- > 0                  ) {
messenger/Yahoo/YahooEncrypt.java:161:    public String yahooCrypt(String key, String salt) {
messenger/Yahoo/YahooEncrypt.java:167:	  if (salt.substring(0,3).equals(md5_salt_prefix)) {
messenger/Yahoo/YahooEncrypt.java:168:		salt = salt.substring(3);
messenger/Yahoo/YahooEncrypt.java:171:	  salt_len = Min(salt.indexOf(   ), 8);	                         
messenger/Yahoo/YahooEncrypt.java:172:	  key_len = key.length();
messenger/Yahoo/YahooEncrypt.java:175:		MessageDigest ctx = MessageDigest.getInstance(     );
messenger/Yahoo/YahooEncrypt.java:176:		ctx.reset();                    
messenger/Yahoo/YahooEncrypt.java:177:		ctx.update(key.getBytes(), 0, key_len);
messenger/Yahoo/YahooEncrypt.java:178:		ctx.update(md5_salt_prefix.getBytes(), 0, md5_salt_prefix.length());
messenger/Yahoo/YahooEncrypt.java:179:		ctx.update(salt.getBytes(), 0, salt_len);
messenger/Yahoo/YahooEncrypt.java:181:		MessageDigest alt_ctx = MessageDigest.getInstance(     );
messenger/Yahoo/YahooEncrypt.java:182:		alt_ctx.reset();                    
messenger/Yahoo/YahooEncrypt.java:183:		alt_ctx.update(key.getBytes(), 0, key_len);
messenger/Yahoo/YahooEncrypt.java:184:		alt_ctx.update(salt.getBytes(), 0, salt_len);
messenger/Yahoo/YahooEncrypt.java:185:		alt_ctx.update(key.getBytes(), 0, key_len);
messenger/Yahoo/YahooEncrypt.java:187:		alt_result = alt_ctx.digest();		                             
messenger/Yahoo/YahooEncrypt.java:190:		for (cnt = key_len; cnt > 16; cnt -= 16)
messenger/Yahoo/YahooEncrypt.java:191:			ctx.update(alt_result, 0, 16);
messenger/Yahoo/YahooEncrypt.java:192:	     ctx.update(alt_result, 0, cnt);
messenger/Yahoo/YahooEncrypt.java:200:		for (cnt = key_len; cnt > 0; cnt >>= 1) {
messenger/Yahoo/YahooEncrypt.java:201:		   ctx.update((cnt & 1) != 0 ? alt_result : key.getBytes(), 0, 1);
messenger/Yahoo/YahooEncrypt.java:205:		alt_result = ctx.digest();
messenger/Yahoo/YahooEncrypt.java:211:		for (cnt = 0; cnt < 1000; ++cnt) {
messenger/Yahoo/YahooEncrypt.java:213:		    ctx.reset();                    
messenger/Yahoo/YahooEncrypt.java:216:		    if ((cnt & 1) != 0)
messenger/Yahoo/YahooEncrypt.java:217:			    ctx.update(key.getBytes(), 0, key_len);
messenger/Yahoo/YahooEncrypt.java:219:			    ctx.update(alt_result, 0, 16);
messenger/Yahoo/YahooEncrypt.java:222:		    if (cnt % 3 != 0)
messenger/Yahoo/YahooEncrypt.java:223:			    ctx.update(salt.getBytes(), 0, salt_len);
messenger/Yahoo/YahooEncrypt.java:226:		    if (cnt % 7 != 0)
messenger/Yahoo/YahooEncrypt.java:227:			    ctx.update(key.getBytes(), 0, key_len);
messenger/Yahoo/YahooEncrypt.java:230:		    if ((cnt & 1) != 0)
messenger/Yahoo/YahooEncrypt.java:231:			    ctx.update(alt_result, 0, 16);
messenger/Yahoo/YahooEncrypt.java:233:			    ctx.update(key.getBytes(), 0, key_len);
messenger/Yahoo/YahooEncrypt.java:236:		    alt_result = ctx.digest();
messenger/Yahoo/YahooEncrypt.java:244:	    b64_from_24bit (alt_result[0], alt_result[6], alt_result[12], 4);
messenger/Yahoo/YahooEncrypt.java:245:	    b64_from_24bit (alt_result[1], alt_result[7], alt_result[13], 4);
messenger/Yahoo/YahooEncrypt.java:246:	    b64_from_24bit (alt_result[2], alt_result[8], alt_result[14], 4);
messenger/Yahoo/YahooEncrypt.java:247:	    b64_from_24bit (alt_result[3], alt_result[9], alt_result[15], 4);
messenger/Yahoo/YahooEncrypt.java:248:	    b64_from_24bit (alt_result[4], alt_result[10], alt_result[5], 4);
messenger/Yahoo/YahooEncrypt.java:249:	    b64_from_24bit ((byte) 0, (byte) 0, alt_result[11], 2);
messenger/Yahoo/YahooEncrypt.java:253:	  } catch (NoSuchAlgorithmException e) {
messenger/Yahoo/YahooEncrypt.java:254:		assert(false);
messenger/Yahoo/YahooEncrypt.java:260:    public String[] encrypt(String receivedAscii, String pass, String login) {     
messenger/Yahoo/YahooEncrypt.java:270:      sv = receivedAscii.charAt(15);
messenger/Yahoo/YahooEncrypt.java:274:		MessageDigest md1 = MessageDigest.getInstance(     );
messenger/Yahoo/YahooEncrypt.java:275:		md1.update(pass.getBytes(), 0, pass.length());
messenger/Yahoo/YahooEncrypt.java:276:		res = md1.digest();
messenger/Yahoo/YahooEncrypt.java:277:		passwordHash = base64Encode2(res);
messenger/Yahoo/YahooEncrypt.java:279:		MessageDigest md2 = MessageDigest.getInstance(     );
messenger/Yahoo/YahooEncrypt.java:280:		pass = yahooCrypt(pass,               );
messenger/Yahoo/YahooEncrypt.java:281:		md2.update(pass.getBytes(), 0, pass.length());
messenger/Yahoo/YahooEncrypt.java:282:		res = md2.digest();
messenger/Yahoo/YahooEncrypt.java:283:		passwordCryptHash = base64Encode2(res);
messenger/Yahoo/YahooEncrypt.java:286:	switch (sv) {
messenger/Yahoo/YahooEncrypt.java:289:		 checksum = receivedAscii.charAt(receivedAscii.charAt(9) % 16);
messenger/Yahoo/YahooEncrypt.java:295:		 checksum = receivedAscii.charAt(receivedAscii.charAt(15) % 16);
messenger/Yahoo/YahooEncrypt.java:300:		 checksum = receivedAscii.charAt(receivedAscii.charAt(1) % 16);
messenger/Yahoo/YahooEncrypt.java:305:		 checksum = receivedAscii.charAt(receivedAscii.charAt(3) % 16);
messenger/Yahoo/YahooEncrypt.java:311:		 checksum = receivedAscii.charAt(receivedAscii.charAt(7) % 16);
messenger/Yahoo/YahooEncrypt.java:318:	  MessageDigest md3 = MessageDigest.getInstance(     );
messenger/Yahoo/YahooEncrypt.java:319:	  md3.reset();
messenger/Yahoo/YahooEncrypt.java:320:	  md3.update(resultAscii1.getBytes(), 0, resultAscii1.length()); 
messenger/Yahoo/YahooEncrypt.java:321:	  res3 = md3.digest();
messenger/Yahoo/YahooEncrypt.java:322:	  String result1 = base64Encode2(res3);
messenger/Yahoo/YahooEncrypt.java:324:	  md3.reset();
messenger/Yahoo/YahooEncrypt.java:325:	  md3.update(resultAscii2.getBytes(), 0, resultAscii2.length()); 
messenger/Yahoo/YahooEncrypt.java:326:	  res3 = md3.digest();
messenger/Yahoo/YahooEncrypt.java:327:	  String result2 = base64Encode2(res3);
messenger/Yahoo/YahooEncrypt.java:333:      } catch (NoSuchAlgorithmException e) {
messenger/Yahoo/YahooEncrypt.java:334:      	assert(false);
messenger/Yahoo/YahooProtocol.java:63:	public YahooProtocol(DataBuffer controlData, String aUin, String password, String serverName, int port) {
messenger/Yahoo/YahooProtocol.java:64:		super(serverName, port);
messenger/Yahoo/YahooProtocol.java:66:		assert aUin.length() > 0;
messenger/Yahoo/YahooProtocol.java:69:		this.setLoginName(aUin);
messenger/Yahoo/YahooProtocol.java:71:		this.setEncPasswd(password);
messenger/Yahoo/YahooProtocol.java:73:		fContactList = new Vector();
messenger/Yahoo/YahooProtocol.java:76:			fFactory = new PacketFactory().getFactory(this);
messenger/Yahoo/YahooProtocol.java:78:		catch(UnknownProtocolException e) {
messenger/Yahoo/YahooProtocol.java:79:			assert(true);
messenger/Yahoo/YahooProtocol.java:82:		assert getLoginName() == aUin;
messenger/Yahoo/YahooProtocol.java:83:		assert getEncPasswd() !=   ;
messenger/Yahoo/YahooProtocol.java:86:	public DataBuffer getControlData() {
messenger/Yahoo/YahooProtocol.java:90:	public YahooProtocol(DataBuffer controlData, String serverName, int port) {
messenger/Yahoo/YahooProtocol.java:91:		super(serverName, port);
messenger/Yahoo/YahooProtocol.java:93:		fContactList = new Vector();
messenger/Yahoo/YahooProtocol.java:96:			fFactory = new PacketFactory().getFactory(this);
messenger/Yahoo/YahooProtocol.java:98:		catch(UnknownProtocolException e) {
messenger/Yahoo/YahooProtocol.java:99:			assert(true);
messenger/Yahoo/YahooProtocol.java:109:	protected int getNumberOfContacts() {
messenger/Yahoo/YahooProtocol.java:112:		return fContactList.size();
messenger/Yahoo/YahooProtocol.java:123:	public void addContact(YahooContact ic) {
messenger/Yahoo/YahooProtocol.java:125:		int old = this.getNumberOfContacts();
messenger/Yahoo/YahooProtocol.java:127:		fContactList.addElement(ic);
messenger/Yahoo/YahooProtocol.java:129:		assert this.getNumberOfContacts() == old + 1;	
messenger/Yahoo/YahooProtocol.java:137:	public Vector getContactList() {
messenger/Yahoo/YahooProtocol.java:150:	protected void sendPacket(IPacket packet) throws IOException {
messenger/Yahoo/YahooProtocol.java:151:			assert this.getServer() != null;
messenger/Yahoo/YahooProtocol.java:153:			assert packet.getLength() > 0;
messenger/Yahoo/YahooProtocol.java:155:			DataOutputStream fOutToServer = new DataOutputStream(getSocket().getOutputStream());
messenger/Yahoo/YahooProtocol.java:156:			YahooPacket p = (YahooPacket)packet;
messenger/Yahoo/YahooProtocol.java:157:			InetAddress ia = getSocket().getInetAddress();
messenger/Yahoo/YahooProtocol.java:160:       			fOutToServer.write(p.getContentByte(), 0, p.getLength());
messenger/Yahoo/YahooProtocol.java:162:       		catch (IOException e) {
messenger/Yahoo/YahooProtocol.java:164:       			System.out.println(                                                 );
messenger/Yahoo/YahooProtocol.java:166:       		catch (Exception e) {
messenger/Yahoo/YahooProtocol.java:167:       			System.out.println(                                      );
messenger/Yahoo/YahooProtocol.java:170:       		fControlData.setDump(             +ia.getHostAddress()+   
messenger/Yahoo/YahooProtocol.java:171:       												+p.getKindOfPacket()+    
messenger/Yahoo/YahooProtocol.java:172:       												+p.getLength()+             
messenger/Yahoo/YahooProtocol.java:173:       												+Utils.printableHexString(p.getContentHex()));  		
messenger/Yahoo/YahooProtocol.java:179:	public void login() throws YahooException {
messenger/Yahoo/YahooProtocol.java:185:			this.connect();
messenger/Yahoo/YahooProtocol.java:192:			fInFromServer = new DataInputStream(getSocket().getInputStream());
messenger/Yahoo/YahooProtocol.java:193:			InetAddress ia1 = getSocket().getInetAddress();
messenger/Yahoo/YahooProtocol.java:195:			Vector v = new Vector();	
messenger/Yahoo/YahooProtocol.java:196:     		YahooPacket cli_hello = (YahooPacket)fFactory.createOutgoingPacket(           , v);
messenger/Yahoo/YahooProtocol.java:197:    		sendPacket(cli_hello);
messenger/Yahoo/YahooProtocol.java:201:			s = getServerMessage();
messenger/Yahoo/YahooProtocol.java:202:			YahooPacket srv_hello = (YahooPacket)fFactory.createIncomingPacket(s);
messenger/Yahoo/YahooProtocol.java:210:     		v = new Vector(); 		
messenger/Yahoo/YahooProtocol.java:211:     		v.addElement(Utils.HexFromString(getLoginName()));
messenger/Yahoo/YahooProtocol.java:212:     		YahooPacket cli_login1 = (YahooPacket)fFactory.createOutgoingPacket(          , v);
messenger/Yahoo/YahooProtocol.java:213:    		sendPacket(cli_login1);
messenger/Yahoo/YahooProtocol.java:217:     		s = getServerMessage();
messenger/Yahoo/YahooProtocol.java:218:			YahooPacket srv_auth = (YahooPacket)fFactory.createIncomingPacket(s);
messenger/Yahoo/YahooProtocol.java:220:			fControlData.setDump(                 +ia1.getHostAddress()+   +srv_auth.getKindOfPacket()
messenger/Yahoo/YahooProtocol.java:221:														+    +srv_auth.getLength()+            +Utils.printableHexString(srv_auth.getContentHex()));
messenger/Yahoo/YahooProtocol.java:225:  			String[] strings = new YahooEncrypt().encrypt(((YahooSRV_AUTHPacket)srv_auth).getChallenge(), getEncPasswd(), getLoginName());
messenger/Yahoo/YahooProtocol.java:232:			v = new Vector();
messenger/Yahoo/YahooProtocol.java:233:			v.addElement(Utils.HexFromString(getLoginName()));
messenger/Yahoo/YahooProtocol.java:234:			v.addElement(Utils.HexFromString(strings[0]));
messenger/Yahoo/YahooProtocol.java:235:			v.addElement(Utils.HexFromString(strings[1]));		
messenger/Yahoo/YahooProtocol.java:236:			YahooPacket cli_auth_resp = (YahooPacket)fFactory.createOutgoingPacket(               , v);
messenger/Yahoo/YahooProtocol.java:237:			sendPacket(cli_auth_resp);
messenger/Yahoo/YahooProtocol.java:250:			s = getServerMessage();
messenger/Yahoo/YahooProtocol.java:252:			YahooPacket srv_list = (YahooPacket)fFactory.createIncomingPacket(s);
messenger/Yahoo/YahooProtocol.java:253:			fControlData.setDump(                 +ia1.getHostAddress()+   +srv_list.getKindOfPacket()
messenger/Yahoo/YahooProtocol.java:254:														+    +srv_list.getLength()+            +Utils.printableHexString(srv_list.getContentHex()));
messenger/Yahoo/YahooProtocol.java:256:  			Vector list = ((YahooSRV_LISTPacket)srv_list).getList();
messenger/Yahoo/YahooProtocol.java:257:  			for(int j = 0; j < list.size(); j++) {
messenger/Yahoo/YahooProtocol.java:258:  				YahooContact c = (YahooContact)list.elementAt(j);
messenger/Yahoo/YahooProtocol.java:259:				((YahooContact)list.elementAt(j)).setStatus(          );
messenger/Yahoo/YahooProtocol.java:260:				fContactList.addElement((YahooContact)list.elementAt(j));	
messenger/Yahoo/YahooProtocol.java:270:  			v = new Vector();
messenger/Yahoo/YahooProtocol.java:271:  			v.addElement(Utils.HexFromString(getLoginName()));
messenger/Yahoo/YahooProtocol.java:272:  			YahooPacket cli_pass = (YahooPacket)fFactory.createOutgoingPacket(                  , v);
messenger/Yahoo/YahooProtocol.java:273:			sendPacket(cli_pass);
messenger/Yahoo/YahooProtocol.java:276:  			v = new Vector();
messenger/Yahoo/YahooProtocol.java:277:  			YahooPacket cli_0015 = (YahooPacket)fFactory.createOutgoingPacket(          , v);
messenger/Yahoo/YahooProtocol.java:278:			sendPacket(cli_0015);
messenger/Yahoo/YahooProtocol.java:281:			v = new Vector();	
messenger/Yahoo/YahooProtocol.java:282:			YahooPacket cli_isback = (YahooPacket)fFactory.createOutgoingPacket(            , v);
messenger/Yahoo/YahooProtocol.java:283:			sendPacket(cli_isback);
messenger/Yahoo/YahooProtocol.java:286:  			this.setLoggedIn(true);
messenger/Yahoo/YahooProtocol.java:287:			this.setPriority(MIN_PRIORITY);
messenger/Yahoo/YahooProtocol.java:288:			fControlData.setDump(         );
messenger/Yahoo/YahooProtocol.java:289:			this.start();
messenger/Yahoo/YahooProtocol.java:291:		catch(IOException e) {
messenger/Yahoo/YahooProtocol.java:292:			this.setLoggedIn(false);
messenger/Yahoo/YahooProtocol.java:293:			System.out.println(             );
messenger/Yahoo/YahooProtocol.java:294:			throw new YahooException();
messenger/Yahoo/YahooProtocol.java:296:		catch(TimeOutException e) {
messenger/Yahoo/YahooProtocol.java:297:			this.setLoggedIn(false);
messenger/Yahoo/YahooProtocol.java:298:			System.out.println(         );
messenger/Yahoo/YahooProtocol.java:299:			throw new YahooException();
messenger/Yahoo/YahooProtocol.java:301:		catch(BadArgumentException e) {
messenger/Yahoo/YahooProtocol.java:302:			this.setLoggedIn(false);
messenger/Yahoo/YahooProtocol.java:303:			System.out.println(             );
messenger/Yahoo/YahooProtocol.java:304:			throw new YahooException();
messenger/Yahoo/YahooProtocol.java:306:		catch(UnknownPacketException e) {
messenger/Yahoo/YahooProtocol.java:307:			this.setLoggedIn(false);
messenger/Yahoo/YahooProtocol.java:308:			e.printStackTrace();
messenger/Yahoo/YahooProtocol.java:309:			System.out.println(               );
messenger/Yahoo/YahooProtocol.java:310:			throw new YahooException();
messenger/Yahoo/YahooProtocol.java:312:		catch (IncomingNullPacketException e) {
messenger/Yahoo/YahooProtocol.java:313:			this.setLoggedIn(false);
messenger/Yahoo/YahooProtocol.java:314:			System.out.println(                    );
messenger/Yahoo/YahooProtocol.java:315:			throw new YahooException();
messenger/Yahoo/YahooProtocol.java:317:		catch(Exception e) {
messenger/Yahoo/YahooProtocol.java:318:			this.setLoggedIn(false);
messenger/Yahoo/YahooProtocol.java:319:			System.out.println(           );
messenger/Yahoo/YahooProtocol.java:321:			throw new YahooException();
messenger/Yahoo/YahooProtocol.java:331:	public AContact getContact(String login) throws UnknownContactException {
messenger/Yahoo/YahooProtocol.java:332:		for(int i = 0; i < fContactList.size(); i++) {
messenger/Yahoo/YahooProtocol.java:333:			if(((AContact)fContactList.elementAt(i)).getLogin().equals(login)) {
messenger/Yahoo/YahooProtocol.java:334:				return (AContact)fContactList.elementAt(i);
messenger/Yahoo/YahooProtocol.java:337:		throw new UnknownContactException();
messenger/Yahoo/YahooProtocol.java:343:	public void addContact(String login, String nick) { }
messenger/Yahoo/YahooProtocol.java:348:	public void sendMessage(String target, String message) {
messenger/Yahoo/YahooProtocol.java:353:			DataOutputStream fOutToServer = new DataOutputStream(getSocket().getOutputStream());
messenger/Yahoo/YahooProtocol.java:354:		   	Vector v = new Vector();
messenger/Yahoo/YahooProtocol.java:355:		   	InetAddress ia = getSocket().getInetAddress();
messenger/Yahoo/YahooProtocol.java:357:		   	v.addElement(Utils.HexFromString(this.getLoginName()));
messenger/Yahoo/YahooProtocol.java:358:		   	v.addElement(Utils.HexFromString(target));
messenger/Yahoo/YahooProtocol.java:359:		   	v.addElement(Utils.HexFromString(message));
messenger/Yahoo/YahooProtocol.java:361:		 	AContact a = this.getContact(target);
messenger/Yahoo/YahooProtocol.java:363:		 	YahooPacket p = (YahooPacket)fFactory.createOutgoingPacket(             , v);
messenger/Yahoo/YahooProtocol.java:365:		   	sendPacket(p);
messenger/Yahoo/YahooProtocol.java:367:		  	fControlData.setToUser(           +message);
messenger/Yahoo/YahooProtocol.java:369:		catch(BadArgumentException e) {
messenger/Yahoo/YahooProtocol.java:370:			e.printStackTrace();
messenger/Yahoo/YahooProtocol.java:373:		catch(UnknownPacketException e) {
messenger/Yahoo/YahooProtocol.java:374:			e.printStackTrace();
messenger/Yahoo/YahooProtocol.java:377:		catch(IOException e) {
messenger/Yahoo/YahooProtocol.java:378:			e.printStackTrace();
messenger/Yahoo/YahooProtocol.java:381:		catch(StringIndexOutOfBoundsException e) {
messenger/Yahoo/YahooProtocol.java:382:			e.printStackTrace();
messenger/Yahoo/YahooProtocol.java:385:		catch(Exception e) {
messenger/Yahoo/YahooProtocol.java:386:			e.printStackTrace();
messenger/Yahoo/YahooProtocol.java:397:	public void changeStatus(String status) {
messenger/Yahoo/YahooProtocol.java:401:			Vector v = new Vector();
messenger/Yahoo/YahooProtocol.java:402:			v.addElement(status);
messenger/Yahoo/YahooProtocol.java:404:			YahooPacket cli_setstatus = (YahooPacket)fFactory.createOutgoingPacket(            , v);
messenger/Yahoo/YahooProtocol.java:406:			sendPacket(cli_setstatus);
messenger/Yahoo/YahooProtocol.java:408:		catch(BadArgumentException e) {
messenger/Yahoo/YahooProtocol.java:409:			System.out.println(               );
messenger/Yahoo/YahooProtocol.java:411:		catch(UnknownPacketException e) {
messenger/Yahoo/YahooProtocol.java:412:			System.out.println(                             );
messenger/Yahoo/YahooProtocol.java:414:		catch(IOException e) {
messenger/Yahoo/YahooProtocol.java:415:			System.out.println(                        );	
messenger/Yahoo/YahooProtocol.java:417:		catch(StringIndexOutOfBoundsException e) {
messenger/Yahoo/YahooProtocol.java:418:			System.out.println(                      );
messenger/Yahoo/YahooProtocol.java:421:		catch(Exception e) {
messenger/Yahoo/YahooProtocol.java:422:			System.out.println(                   );
messenger/Yahoo/YahooProtocol.java:427:	public void addContact(String uin) {
messenger/Yahoo/YahooProtocol.java:431:	public void logout() {
messenger/Yahoo/YahooProtocol.java:435:	public void shutdown() {
messenger/Yahoo/YahooProtocol.java:436:		this.interrupt();
messenger/Yahoo/YahooProtocol.java:445:	public boolean analyzePacket(String s)                           {
messenger/Yahoo/YahooProtocol.java:446:		InetAddress ia = getSocket().getInetAddress();
messenger/Yahoo/YahooProtocol.java:451:			YahooPacket p = (YahooPacket)fFactory.createIncomingPacket(s);
messenger/Yahoo/YahooProtocol.java:452:			fControlData.setDump(                 +ia.getHostAddress()+   +p.getKindOfPacket()
messenger/Yahoo/YahooProtocol.java:453:													+    +p.getLength()+            +Utils.printableHexString(p.getContentHex()));
messenger/Yahoo/YahooProtocol.java:455:			if(p instanceof YahooSRV_MESSAGEPacket) {
messenger/Yahoo/YahooProtocol.java:456:				YahooSRV_MESSAGEPacket srv_msg = (YahooSRV_MESSAGEPacket)p;
messenger/Yahoo/YahooProtocol.java:457:				if(!srv_msg.getMessage().equals(  )) {
messenger/Yahoo/YahooProtocol.java:458:					fControlData.setToUser(      +srv_msg.getLogin()+   +srv_msg.getMessage());	
messenger/Yahoo/YahooProtocol.java:462:			else if(p instanceof YahooSRV_ISBACKACKPacket) {
messenger/Yahoo/YahooProtocol.java:463:				YahooSRV_ISBACKACKPacket srv_iba = (YahooSRV_ISBACKACKPacket)p;
messenger/Yahoo/YahooProtocol.java:466:			else if(p instanceof YahooSRV_NOTIFYPacket) {
messenger/Yahoo/YahooProtocol.java:467:				YahooSRV_NOTIFYPacket srv_not = (YahooSRV_NOTIFYPacket)p;
messenger/Yahoo/YahooProtocol.java:470:			else if(p instanceof YahooSRV_LOGONPacket) {
messenger/Yahoo/YahooProtocol.java:474:								YahooSRV_LOGONPacket srv_useronline = (YahooSRV_LOGONPacket)p;
messenger/Yahoo/YahooProtocol.java:475:								while((!found)&&(i < fContactList.size())) {
messenger/Yahoo/YahooProtocol.java:476:									if(((YahooContact)fContactList.elementAt(i)).getUIN().equals(srv_useronline.getContact())) {
messenger/Yahoo/YahooProtocol.java:477:										((YahooContact)fContactList.elementAt(i)).setStatus(srv_useronline.getStatus());
messenger/Yahoo/YahooProtocol.java:485:								for(i = 0; i < fContactList.size(); i++) {
messenger/Yahoo/YahooProtocol.java:486:										AContact a = ((YahooContact)fContactList.elementAt(i));
messenger/Yahoo/YahooProtocol.java:491:								fControlData.setToUser(srv_useronline.getContact()+        +srv_useronline.getStatus());
messenger/Yahoo/YahooProtocol.java:492:								fControlData.setDump(         );                                                  
messenger/Yahoo/YahooProtocol.java:495:			else if(p instanceof YahooSRV_LOGONPacket) {
messenger/Yahoo/YahooProtocol.java:499:					YahooSRV_LOGOFFPacket srv_useroffline = (YahooSRV_LOGOFFPacket)p;
messenger/Yahoo/YahooProtocol.java:500:					while((!found)&&(i < fContactList.size())) {
messenger/Yahoo/YahooProtocol.java:501:						if(((YahooContact)fContactList.elementAt(i)).getUIN().equals(srv_useroffline.getContact())) {
messenger/Yahoo/YahooProtocol.java:502:							((YahooContact)fContactList.elementAt(i)).setStatus(srv_useroffline.getStatus());
messenger/Yahoo/YahooProtocol.java:510:					for(i = 0; i < fContactList.size(); i++) {
messenger/Yahoo/YahooProtocol.java:511:							AContact a = ((YahooContact)fContactList.elementAt(i));
messenger/Yahoo/YahooProtocol.java:516:					fControlData.setToUser(srv_useroffline.getContact()+        +srv_useroffline.getStatus());
messenger/Yahoo/YahooProtocol.java:517:					fControlData.setDump(         );                                                  
messenger/Yahoo/YahooProtocol.java:520:			else if(p instanceof YahooSRV_AUTH_RESPPacket) {
messenger/Yahoo/YahooProtocol.java:527:		catch(UnknownPacketException e) {
messenger/Yahoo/YahooProtocol.java:528:			System.out.println(                                );
messenger/Yahoo/YahooProtocol.java:531:		catch(IncomingNullPacketException e) {
messenger/Yahoo/YahooProtocol.java:532:			e.printStackTrace();
messenger/Yahoo/YahooProtocol.java:541:	private String getServerMessage() {
messenger/Yahoo/YahooProtocol.java:546:			DataInputStream fInFromServer = new DataInputStream(getSocket().getInputStream());
messenger/Yahoo/YahooProtocol.java:547:			empty = fInFromServer.read();
messenger/Yahoo/YahooProtocol.java:549:			if (empty == -1) {
messenger/Yahoo/YahooProtocol.java:553:				if(empty == 0) {
messenger/Yahoo/YahooProtocol.java:554:					s += Utils.intToHex((int) fInFromServer.read());	
messenger/Yahoo/YahooProtocol.java:557:					s += Utils.intToHex(empty);
messenger/Yahoo/YahooProtocol.java:561:				s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:562:				s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:563:				s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:564:				s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:568:				s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:571:				s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:572:				s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:576:				StringBuffer sb = new StringBuffer();
messenger/Yahoo/YahooProtocol.java:577:				int l1 = ((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:578:				s += Utils.intToHex(l1);
messenger/Yahoo/YahooProtocol.java:579:				sb.append(Utils.intToHex(l1));
messenger/Yahoo/YahooProtocol.java:581:				int l2 = ((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:582:				s += Utils.intToHex(l2);
messenger/Yahoo/YahooProtocol.java:583:				sb.append(Utils.intToHex(l2));
messenger/Yahoo/YahooProtocol.java:586:				int length = Utils.hexToInt(sb.toString());
messenger/Yahoo/YahooProtocol.java:588:				s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:589:				s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:590:				s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:591:				s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:592:				s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:593:				s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:594:				s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:595:				s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:596:				s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:597:				s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:599:				for (int i = 0; i < length; ++i) {
messenger/Yahoo/YahooProtocol.java:600:					s += Utils.intToHex((int) fInFromServer.read());
messenger/Yahoo/YahooProtocol.java:605:		catch (Exception e) {
messenger/Yahoo/YahooProtocol.java:606:			System.out.println(           );
messenger/Yahoo/YahooProtocol.java:619:	public void run() {
messenger/Yahoo/YahooProtocol.java:622:		while(true) {
messenger/Yahoo/YahooProtocol.java:623:			s = getServerMessage();
messenger/Yahoo/YahooProtocol.java:625:			if(s !=   ) {
messenger/Yahoo/YahooProtocol.java:627:					if(analyzePacket(s)) {
messenger/Yahoo/YahooProtocol.java:631:						System.out.println(                ); 
messenger/Yahoo/YahooProtocol.java:643:				sleep(300);
messenger/Yahoo/YahooProtocol.java:645:			catch(InterruptedException e) {
messenger/Yahoo/YahooContact.java:55:	public YahooContact(String login, String nick, String IP) {
messenger/Yahoo/YahooContact.java:58:		assert (IP.length() >= 7)&&(IP.length() <= 15);
messenger/Yahoo/YahooContact.java:60:		this.setLogin(login);
messenger/Yahoo/YahooContact.java:61:		this.setNick(nick);
messenger/Yahoo/YahooContact.java:64:		assert this.getUIN() == login;
messenger/Yahoo/YahooContact.java:65:		assert this.getNick().equals(nick);
messenger/Yahoo/YahooContact.java:66:		assert this.getIP().equals(IP);
messenger/Yahoo/YahooContact.java:73:	public YahooContact(String login) {
messenger/Yahoo/YahooContact.java:75:		setLogin(login);
messenger/Yahoo/YahooContact.java:81:	public void setLogin(String login) {
messenger/Yahoo/YahooContact.java:84:		super.setLogin(login);
messenger/Yahoo/YahooContact.java:91:	public String getUIN() {
messenger/Yahoo/YahooContact.java:92:		return getLogin();
messenger/Yahoo/YahooContact.java:99:	public String getIP() {
messenger/Yahoo/YahooContact.java:107:	public void setIP(String ip) {
messenger/Yahoo/YahooCLI_HELLOPacket.java:43:	public YahooCLI_HELLOPacket(Vector arg) {
messenger/Yahoo/YahooCLI_HELLOPacket.java:44:		assert (arg.size() == 0);
messenger/Yahoo/YahooCLI_HELLOPacket.java:46:		setKindOfPacket(           );
messenger/Yahoo/YahooCLI_HELLOPacket.java:47:		updatePacket();
messenger/Yahoo/YahooCLI_HELLOPacket.java:53:	private void updatePacket() {
messenger/Yahoo/YahooCLI_HELLOPacket.java:54:		this.setHeader(    , 0);
messenger/Yahoo/YahooCLI_HELLOPacket.java:55:		this.setBody(null);
messenger/Yahoo/YahooCLI_HELLOPacket.java:56:		this.setContent();
messenger/Yahoo/YahooSRV_LISTPacket.java:41:	public YahooSRV_LISTPacket (String s) {
messenger/Yahoo/YahooSRV_LISTPacket.java:42:		setContent(Utils.fromHexString(s));		
messenger/Yahoo/YahooSRV_LISTPacket.java:43:		setKindOfPacket(          );
messenger/Yahoo/YahooSRV_LISTPacket.java:45:		fContactList = new Vector();
messenger/Yahoo/YahooSRV_LISTPacket.java:47:		analyze();
messenger/Yahoo/YahooSRV_LISTPacket.java:50:	private void analyze() {
messenger/Yahoo/YahooSRV_LISTPacket.java:51:		String s = getContentHex();
messenger/Yahoo/YahooSRV_LISTPacket.java:56:		while(i < s.length()) {
messenger/Yahoo/YahooSRV_LISTPacket.java:57:			if((s.charAt(i) ==    )&&(s.charAt(i+1) ==    )&&(s.charAt(i+2) ==    )&&(s.charAt(i+3) ==    )
messenger/Yahoo/YahooSRV_LISTPacket.java:58:				&&(s.charAt(i+4) ==    )&&(s.charAt(i+5) ==    )&&(s.charAt(i+6) ==    )&&(s.charAt(i+7) ==    )) {
messenger/Yahoo/YahooSRV_LISTPacket.java:61:				while(!((s.charAt(i) ==    )&&(s.charAt(i+1) ==    ))) {
messenger/Yahoo/YahooSRV_LISTPacket.java:66:				while((i+3 < s.length())&&!((s.charAt(i) ==    )&&(s.charAt(i+1) ==    ))) {
messenger/Yahoo/YahooSRV_LISTPacket.java:67:						content += s.charAt(i);
messenger/Yahoo/YahooSRV_LISTPacket.java:69:						if((content.length() >= 2) && (content.charAt(content.length()-1) ==    ) 
messenger/Yahoo/YahooSRV_LISTPacket.java:70:															&& (content.charAt(content.length()-2) ==    )) {
messenger/Yahoo/YahooSRV_LISTPacket.java:72:							String contact = Utils.HexString2AsciiString(content.substring(0, content.length()-2));
messenger/Yahoo/YahooSRV_LISTPacket.java:74:							aContact = new YahooContact(contact);
messenger/Yahoo/YahooSRV_LISTPacket.java:75:							aContact.setNick(contact);
messenger/Yahoo/YahooSRV_LISTPacket.java:76:							fContactList.add(aContact);
messenger/Yahoo/YahooSRV_LISTPacket.java:83:				String contact = Utils.HexString2AsciiString(content);
messenger/Yahoo/YahooSRV_LISTPacket.java:85:				aContact = new YahooContact(contact);
messenger/Yahoo/YahooSRV_LISTPacket.java:86:				aContact.setNick(contact);
messenger/Yahoo/YahooSRV_LISTPacket.java:87:				fContactList.add(aContact);
messenger/Yahoo/YahooSRV_LISTPacket.java:115:	public Vector getList() {
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:41:	public YahooSRV_MESSAGEPacket (String s) {
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:42:		setContent(Utils.fromHexString(s));		
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:43:		setKindOfPacket(             );
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:45:		analyze();
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:48:	private void analyze() {
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:49:		String s = getContentHex();
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:53:		while(((i+6) < s.length())&&(!((s.charAt(i) ==    )&&(s.charAt(i+1) ==    )
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:54:											&&(s.charAt(i+2) ==    )&&(s.charAt(i+3) ==    )  
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:55:											&&(s.charAt(i+4) ==    )&&(s.charAt(i+5) ==    )))) {
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:60:		if(!((i+6) < s.length())) {
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:65:			while(!((s.charAt(i) ==    )&&(s.charAt(i+1) ==    )&&(s.charAt(i+2) ==    )&&(s.charAt(i+3) ==    ))) {
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:66:				nick += s.charAt(i);
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:70:			fNick = Utils.HexString2AsciiString(nick);	
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:74:			while(((i+7)<s.length())&&(!((s.charAt(i) ==    )&&(s.charAt(i+1) ==    )
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:75:												&&(s.charAt(i+2) ==    )&&(s.charAt(i+3) ==    )
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:76:												&&(s.charAt(i+4) ==    )&&(s.charAt(i+5) ==    )
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:77:												&&(s.charAt(i+6) ==    )&&(s.charAt(i+7) ==    )))) {
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:83:			while((i+4 < s.length())&&(!((s.charAt(i) ==    )&&(s.charAt(i+1) ==    )&&(s.charAt(i+2) ==    )&&(s.charAt(i+3) ==    )))) {
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:84:				if(((i%2 == 0)&&(s.charAt(i) ==    )&&(s.charAt(i+1) ==    ))) {                              
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:85:					while(!((i%2 == 0)&&(s.charAt(i) ==    )&&(s.charAt(i+1) ==    )))  {
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:90:				message += s.charAt(i);
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:95:			fMessage = Utils.HexString2AsciiString(message);					
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:101:	public String getLogin() {
messenger/Yahoo/YahooSRV_MESSAGEPacket.java:105:	public String getMessage() {
messenger/Yahoo/YahooCLI_PASSTHROUGH2Packet.java:43:	public YahooCLI_PASSTHROUGH2Packet(Vector arg) {
messenger/Yahoo/YahooCLI_PASSTHROUGH2Packet.java:44:		assert (arg.size() == 1);
messenger/Yahoo/YahooCLI_PASSTHROUGH2Packet.java:46:		fUin = (String)arg.elementAt(0);
messenger/Yahoo/YahooCLI_PASSTHROUGH2Packet.java:47:		setKindOfPacket(                  );
messenger/Yahoo/YahooCLI_PASSTHROUGH2Packet.java:48:		updatePacket();
messenger/Yahoo/YahooCLI_PASSTHROUGH2Packet.java:54:	private void updatePacket() {
messenger/Yahoo/YahooCLI_PASSTHROUGH2Packet.java:67:		this.setHeader(    , body.length());
messenger/Yahoo/YahooCLI_PASSTHROUGH2Packet.java:68:		this.setBody(body);
messenger/Yahoo/YahooCLI_PASSTHROUGH2Packet.java:69:		this.setContent();
messenger/Yahoo/YahooSRV_LOGOFFPacket.java:16:	public YahooSRV_LOGOFFPacket (String s) {
messenger/Yahoo/YahooSRV_LOGOFFPacket.java:17:		setContent(Utils.fromHexString(s));		
messenger/Yahoo/YahooSRV_LOGOFFPacket.java:18:		setKindOfPacket(            );
messenger/Yahoo/YahooSRV_LOGOFFPacket.java:20:		analyze();
messenger/Yahoo/YahooSRV_LOGOFFPacket.java:28:	public String getContact() {
messenger/Yahoo/YahooSRV_LOGOFFPacket.java:36:	public String getStatus() {
messenger/Yahoo/YahooSRV_LOGOFFPacket.java:41:	private void analyze() {
messenger/Yahoo/YahooSRV_LOGOFFPacket.java:43:		String s = getContentHex(), content =   ;
messenger/Yahoo/YahooSRV_LOGOFFPacket.java:45:		while(((i+7) < s.length())&&!((s.charAt(i) ==    )&&(s.charAt(i+1) ==    )&&(s.charAt(i+2) ==    )&&
messenger/Yahoo/YahooSRV_LOGOFFPacket.java:46:					(s.charAt(i+3) ==    )&&(s.charAt(i+4) ==    )&&(s.charAt(i+5) ==    ))) {		
messenger/Yahoo/YahooSRV_LOGOFFPacket.java:51:		while((i+3 < s.length())&&!((s.charAt(i) ==    )&&(s.charAt(i+1) ==    )&&(s.charAt(i+2) ==    )&&(s.charAt(i+3) ==    ))) {
messenger/Yahoo/YahooSRV_LOGOFFPacket.java:52:				content += s.charAt(i);	
messenger/Yahoo/YahooSRV_LOGOFFPacket.java:55:		fContact = Utils.HexString2AsciiString(content);
messenger/Yahoo/YahooPacketFactory.java:47:	public IPacket createOutgoingPacket(String packet, Vector arg) throws UnknownPacketException, BadArgumentException {
messenger/Yahoo/YahooPacketFactory.java:48:		if(packet.equals(           )) {
messenger/Yahoo/YahooPacketFactory.java:49:			return new YahooCLI_HELLOPacket(arg);
messenger/Yahoo/YahooPacketFactory.java:51:		else if(packet.equals(          )) {
messenger/Yahoo/YahooPacketFactory.java:52:			return new YahooCLI_AUTHPacket(arg);
messenger/Yahoo/YahooPacketFactory.java:54:		else if(packet.equals(               )) {
messenger/Yahoo/YahooPacketFactory.java:55:			return new YahooCLI_AUTH_RESPPacket(arg);	
messenger/Yahoo/YahooPacketFactory.java:57:		else if(packet.equals(                  )) {
messenger/Yahoo/YahooPacketFactory.java:58:			return new YahooCLI_PASSTHROUGH2Packet(arg);	
messenger/Yahoo/YahooPacketFactory.java:60:		else if(packet.equals(          )) {
messenger/Yahoo/YahooPacketFactory.java:61:			return new YahooCLI_0015Packet(arg);	
messenger/Yahoo/YahooPacketFactory.java:63:		else if(packet.equals(            )) {
messenger/Yahoo/YahooPacketFactory.java:64:			return new YahooCLI_ISBACKPacket(arg);	
messenger/Yahoo/YahooPacketFactory.java:66:		else if(packet.equals(            )) {
messenger/Yahoo/YahooPacketFactory.java:67:			return new YahooCLI_ISAWAYPacket(arg);	
messenger/Yahoo/YahooPacketFactory.java:69:		else if(packet.equals(             )) {
messenger/Yahoo/YahooPacketFactory.java:70:			return new YahooCLI_MESSAGEPacket(arg);	
messenger/Yahoo/YahooPacketFactory.java:73:	  		 throw new UnknownPacketException();
messenger/Yahoo/YahooPacketFactory.java:80:	public IPacket createIncomingPacket(String s) throws UnknownPacketException {
messenger/Yahoo/YahooPacketFactory.java:82:		if(s.length() < 23) {
messenger/Yahoo/YahooPacketFactory.java:85:			throw new UnknownPacketException();
messenger/Yahoo/YahooPacketFactory.java:87:		else if((s.charAt(22) ==    ) && (s.charAt(23) ==    )) {
messenger/Yahoo/YahooPacketFactory.java:88:			return new YahooSRV_LOGONPacket(s);	
messenger/Yahoo/YahooPacketFactory.java:90:		else if((s.charAt(22) ==    )&&(s.charAt(23) ==    )) { 
messenger/Yahoo/YahooPacketFactory.java:91:			return new YahooSRV_LOGOFFPacket(s);
messenger/Yahoo/YahooPacketFactory.java:93:		else if((s.charAt(22) ==    )&&(s.charAt(23) ==    )) { 
messenger/Yahoo/YahooPacketFactory.java:94:			return new YahooSRV_ISBACKACKPacket(s);
messenger/Yahoo/YahooPacketFactory.java:96:		else if((s.charAt(22) ==    )&&(s.charAt(23) ==    )) { 
messenger/Yahoo/YahooPacketFactory.java:97:			return new YahooSRV_MESSAGEPacket(s);
messenger/Yahoo/YahooPacketFactory.java:99:		else if((s.charAt(22) ==    )&&(s.charAt(23) ==    )) { 
messenger/Yahoo/YahooPacketFactory.java:100:			return new YahooSRV_NOTIFYPacket(s);
messenger/Yahoo/YahooPacketFactory.java:102:		else if((s.charAt(22) ==    )&&(s.charAt(23) ==    )) { 
messenger/Yahoo/YahooPacketFactory.java:103:			System.out.println(                );
messenger/Yahoo/YahooPacketFactory.java:104:			return new YahooSRV_HELLOPacket(s);
messenger/Yahoo/YahooPacketFactory.java:106:		else if((s.charAt(22) ==    ) && (s.charAt(23) ==    )) {
messenger/Yahoo/YahooPacketFactory.java:107:			return new YahooSRV_AUTH_RESPPacket(s);	
messenger/Yahoo/YahooPacketFactory.java:109:		else if((s.charAt(22) ==    ) && (s.charAt(23) ==    )) {
messenger/Yahoo/YahooPacketFactory.java:110:			return new YahooSRV_LISTPacket(s);	
messenger/Yahoo/YahooPacketFactory.java:112:		else if((s.charAt(22) ==    )&&(s.charAt(23) ==    )) {
messenger/Yahoo/YahooPacketFactory.java:113:			return new YahooSRV_AUTHPacket(s);
messenger/Yahoo/YahooPacketFactory.java:118:			System.out.println(                                   +s.charAt(22)+   +s.charAt(23));
messenger/Yahoo/YahooPacketFactory.java:119:	  		 throw new UnknownPacketException();
messenger/Yahoo/YahooSRV_AUTH_RESPPacket.java:38:	public YahooSRV_AUTH_RESPPacket (String s) {	
messenger/Yahoo/YahooSRV_AUTH_RESPPacket.java:39:		setContent(Utils.fromHexString(s));	
messenger/Yahoo/YahooSRV_AUTH_RESPPacket.java:40:		setKindOfPacket(               );
messenger/Yahoo/YahooExceptions/YahooException.java:40:	public YahooException() {
messenger/Yahoo/YahooExceptions/YahooException.java:41:		super(           +
messenger/Yahoo/YahooExceptions/YahooException.java:53:	public YahooException(String message) {
messenger/Yahoo/YahooExceptions/YahooException.java:54:		super(message);
messenger/Yahoo/YahooCLI_AUTH_RESPPacket.java:43:	public YahooCLI_AUTH_RESPPacket(Vector arg) {
messenger/Yahoo/YahooCLI_AUTH_RESPPacket.java:44:		assert (arg.size() == 3);
messenger/Yahoo/YahooCLI_AUTH_RESPPacket.java:46:		fUin = (String)arg.elementAt(0);
messenger/Yahoo/YahooCLI_AUTH_RESPPacket.java:47:		fString1 = (String)arg.elementAt(1);
messenger/Yahoo/YahooCLI_AUTH_RESPPacket.java:48:		fString2 = (String)arg.elementAt(2);
messenger/Yahoo/YahooCLI_AUTH_RESPPacket.java:53:		setKindOfPacket(               );
messenger/Yahoo/YahooCLI_AUTH_RESPPacket.java:54:		updatePacket();
messenger/Yahoo/YahooCLI_AUTH_RESPPacket.java:60:	private void updatePacket() {
messenger/Yahoo/YahooCLI_AUTH_RESPPacket.java:82:		this.setHeader(    , body.length());
messenger/Yahoo/YahooCLI_AUTH_RESPPacket.java:83:		this.setBody(body);
messenger/Yahoo/YahooCLI_AUTH_RESPPacket.java:84:		this.setContent();
messenger/Yahoo/YahooCLI_MESSAGEPacket.java:44:	public YahooCLI_MESSAGEPacket(Vector arg) {
messenger/Yahoo/YahooCLI_MESSAGEPacket.java:45:		assert (arg.size() == 3);
messenger/Yahoo/YahooCLI_MESSAGEPacket.java:47:		fLogin = (String)arg.elementAt(0);
messenger/Yahoo/YahooCLI_MESSAGEPacket.java:48:		fTarget = (String)arg.elementAt(1);
messenger/Yahoo/YahooCLI_MESSAGEPacket.java:49:		fMessage = (String)arg.elementAt(2);
messenger/Yahoo/YahooCLI_MESSAGEPacket.java:51:		setKindOfPacket(               );
messenger/Yahoo/YahooCLI_MESSAGEPacket.java:52:		updatePacket();
messenger/Yahoo/YahooCLI_MESSAGEPacket.java:58:	private void updatePacket() {
messenger/Yahoo/YahooCLI_MESSAGEPacket.java:88:		this.setHeader(    , body.length());
messenger/Yahoo/YahooCLI_MESSAGEPacket.java:89:		this.setBody(body);
messenger/Yahoo/YahooCLI_MESSAGEPacket.java:90:		this.setContent();
messenger/Yahoo/YahooSRV_AUTHPacket.java:43:	public YahooSRV_AUTHPacket (String s) {
messenger/Yahoo/YahooSRV_AUTHPacket.java:44:		setContent(Utils.fromHexString(s));		
messenger/Yahoo/YahooSRV_AUTHPacket.java:45:		setKindOfPacket(          );
messenger/Yahoo/YahooSRV_AUTHPacket.java:47:		analyze();
messenger/Yahoo/YahooSRV_AUTHPacket.java:53:	private void analyze() {
messenger/Yahoo/YahooSRV_AUTHPacket.java:54:		String s = getContentHex();
messenger/Yahoo/YahooSRV_AUTHPacket.java:60:		for(int k = 32; k < 40; k++) {
messenger/Yahoo/YahooSRV_AUTHPacket.java:62:			sessionid += s.charAt(k);
messenger/Yahoo/YahooSRV_AUTHPacket.java:66:		setSessionID(sessionid);
messenger/Yahoo/YahooSRV_AUTHPacket.java:69:		for(int j = 0; j < 3; ++j) {
messenger/Yahoo/YahooSRV_AUTHPacket.java:70:			while(((i+4)<s.length())&&(!((s.charAt(i) ==    )&&(s.charAt(i+1) ==    )&&(s.charAt(i+2) ==    )&&(s.charAt(i+3) ==    )))) {
messenger/Yahoo/YahooSRV_AUTHPacket.java:82:		while(i < start+48) {
messenger/Yahoo/YahooSRV_AUTHPacket.java:83:			challenge += s.charAt(i);
messenger/Yahoo/YahooSRV_AUTHPacket.java:87:		fChallenge = Utils.HexString2AsciiString(challenge);					
messenger/Yahoo/YahooSRV_AUTHPacket.java:97:	public String getChallenge() {
messenger/Yahoo/YahooSRV_AUTHPacket.java:98:		assert fChallenge.length() == 24;
messenger/Yahoo/YahooPacket.java:57:	public YahooPacket() {
messenger/Yahoo/YahooPacket.java:66:	public void setHeader(String type, int length) {
messenger/Yahoo/YahooPacket.java:72:					+ Utils.TwoByteInt2FourCharString(length/2)
messenger/Yahoo/YahooPacket.java:83:	public void setUNKNOWN(String s) {
messenger/Yahoo/YahooPacket.java:84:		assert s.length() == 8;
messenger/Yahoo/YahooPacket.java:93:	public void setBody(String body) {
messenger/Yahoo/YahooPacket.java:101:	public void setSessionID(String sessionID) {
messenger/Yahoo/YahooPacket.java:102:		assert sessionID.length() == 8;
messenger/Yahoo/YahooPacket.java:110:	public void setContent() {
messenger/Yahoo/YahooPacket.java:111:		if ((fBody == null) || (fBody.equals(  ))) {
messenger/Yahoo/YahooPacket.java:112:			this.setContent(Utils.fromHexString(fHeader));
messenger/Yahoo/YahooPacket.java:114:			this.setContent(Utils.fromHexString(fHeader + fBody));
messenger/Yahoo/YahooPacket.java:122:	protected void setKindOfPacket(String s) {                                                                                                  
messenger/Yahoo/YahooPacket.java:132:	public String getKindOfPacket() {
messenger/UnknownProtocolException.java:41:	public UnknownProtocolException() {
messenger/UnknownProtocolException.java:42:		super();
messenger/UnknownProtocolException.java:49:	public UnknownProtocolException(String message) {
messenger/UnknownProtocolException.java:50:		super(message);
messenger/UnknownProtocolException.java:58:	public UnknownProtocolException(String message, Throwable cause) {
messenger/UnknownProtocolException.java:59:		super(message, cause);
messenger/UnknownProtocolException.java:66:	public UnknownProtocolException(Throwable cause) {
messenger/UnknownProtocolException.java:67:		super(cause);
messenger/Protocols.java:46:	public Protocols() {
messenger/Protocols.java:47:		protocolList = new Vector();
messenger/Protocols.java:54:	public Protocols(Vector protocols) {
messenger/Protocols.java:64:		assert protocols.size() == this.getNumberOfProtocols();
messenger/Protocols.java:71:	public void addProtocol(AProtocol mess) {
messenger/Protocols.java:73:		int old = this.getNumberOfProtocols();
messenger/Protocols.java:75:		protocolList.addElement(mess);
messenger/Protocols.java:77:		assert this.getNumberOfProtocols() == old + 1;
messenger/Protocols.java:85:	public AProtocol getProtocol(int i) {
messenger/Protocols.java:86:		return (AProtocol)protocolList.elementAt(i);
messenger/Protocols.java:89:	public AProtocol getProtocol(String contact) throws UnknownAccountException {
messenger/Protocols.java:92:		for(int i = 0; i < protocolList.size(); i++) {
messenger/Protocols.java:93:			if(((AProtocol)protocolList.elementAt(i)).getLoginName().equals(contact)) {
messenger/Protocols.java:94:				return (AProtocol)protocolList.elementAt(i);
messenger/Protocols.java:97:		throw new UnknownAccountException();
messenger/Protocols.java:100:	public AProtocol getProtocolContainingContact(String contact) throws UnknownContactException {
messenger/Protocols.java:103:		for(int i = 0; i < protocolList.size(); i++) {
messenger/Protocols.java:104:			for(int j = 0; j < ((AProtocol)protocolList.elementAt(i)).getContactList().size(); j++) {
messenger/Protocols.java:105:				AProtocol p = (AProtocol)protocolList.elementAt(i);
messenger/Protocols.java:106:				if(((AContact)p.getContactList().elementAt(j)).getLogin().equals(contact)) {
messenger/Protocols.java:111:		throw new UnknownContactException();	
messenger/Protocols.java:114:	public Vector getContactList() {
messenger/Protocols.java:115:		Vector v = new Vector();
messenger/Protocols.java:116:		for(int i = 0; i < protocolList.size(); i++) {
messenger/Protocols.java:117:			v.addAll(((AProtocol)protocolList.elementAt(i)).getContactList());
messenger/Protocols.java:122:	public int getNumberOfProtocols() {
messenger/Protocols.java:123:		return protocolList.size();
messenger/Protocols.java:131:	public void removeProtocol(String protocol) { 
messenger/Protocols.java:140:	public void refreshProtocol(int i) {
messenger/Protocols.java:141:		switch (i) {
messenger/Protocols.java:142:			case 0: ICQProtocol icq = (ICQProtocol)protocolList.get(i);
messenger/Protocols.java:143:						protocolList.removeElementAt(i);
messenger/Protocols.java:144:						protocolList.insertElementAt(new ICQProtocol(icq.getControlData(),                , 5190), i);
messenger/Protocols.java:146:			case 1:	MSNProtocol msn = (MSNProtocol)protocolList.get(i);
messenger/Protocols.java:147:						protocolList.removeElementAt(i);
messenger/Protocols.java:148:						protocolList.insertElementAt(new MSNProtocol(msn.getControlData(),                        , 1863), i);
messenger/Protocols.java:150:			case 2: YahooProtocol yahoo = (YahooProtocol)protocolList.get(i);
messenger/Protocols.java:151:						protocolList.removeElementAt(i);
messenger/Protocols.java:152:						protocolList.insertElementAt(new YahooProtocol(yahoo.getControlData(),                 , 5050), i);
messenger/Protocols.java:157:	public void sendMessage(String contact, String message) throws UnknownContactException, ProtocolException {
messenger/Protocols.java:161:		for(int i = 0; i < protocolList.size(); i++) {
messenger/Protocols.java:162:			AProtocol aProtocol = (AProtocol)protocolList.elementAt(i);
messenger/Protocols.java:163:			for(int j = 0; j < aProtocol.getContactList().size(); j++) {
messenger/Protocols.java:164:				if(((AContact)aProtocol.getContactList().elementAt(i)).getLogin().equals(contact)) {
messenger/Protocols.java:165:					aProtocol.sendMessage(contact, message);
messenger/Protocols.java:169:		throw new UnknownContactException();
messenger/Timer.java:43:     public Timer(long delay) {
messenger/Timer.java:45:             t  = new Thread(this);
messenger/Timer.java:46:             t.start();
messenger/Timer.java:49:	public void interrupt() {
messenger/Timer.java:50:   		t.interrupt();	
messenger/Timer.java:54:    public synchronized boolean isTimedOut() {
messenger/Timer.java:58:     private synchronized void setTimedOut() {
messenger/Timer.java:62:     public void run() {
messenger/Timer.java:65:             Thread.currentThread().sleep(delay);
messenger/Timer.java:69:         catch (InterruptedException ie) {}
messenger/Timer.java:70:         setTimedOut();
messenger/BadArgumentException.java:41:	public BadArgumentException() {
messenger/BadArgumentException.java:42:		super();
messenger/BadArgumentException.java:49:	public BadArgumentException(String message) {
messenger/BadArgumentException.java:50:		super(message);
messenger/BadArgumentException.java:58:	public BadArgumentException(String message, Throwable cause) {
messenger/BadArgumentException.java:59:		super(message, cause);
messenger/BadArgumentException.java:62:	public BadArgumentException(Throwable cause) {
messenger/BadArgumentException.java:63:		super(cause);
messenger/ProtocolException.java:39:	public ProtocolException() {
messenger/ProtocolException.java:40:		super();
messenger/ProtocolException.java:47:	public ProtocolException(String message) {
messenger/ProtocolException.java:48:		super(message);
messenger/ProtocolException.java:56:	public ProtocolException(String message, Throwable cause) {
messenger/ProtocolException.java:57:		super(message, cause);
messenger/ProtocolException.java:64:	public ProtocolException(Throwable cause) {
messenger/ProtocolException.java:65:		super(cause);
messenger/DataBuffer.java:46:	public DataBuffer() {
messenger/DataBuffer.java:58:	public synchronized void setToUser(String s) {
messenger/DataBuffer.java:61:		while (fDataForUser == true) {
messenger/DataBuffer.java:64:				wait();
messenger/DataBuffer.java:66:			} catch (InterruptedException e) {
messenger/DataBuffer.java:67:	        	System.out.println(                       + e.getMessage());
messenger/DataBuffer.java:83:	public synchronized String getToUser() {
messenger/DataBuffer.java:84:		while (fDataForUser == false) {
messenger/DataBuffer.java:87:				wait();
messenger/DataBuffer.java:89:			} catch (InterruptedException e) {
messenger/DataBuffer.java:90:	                System.out.println(                       + e.getMessage());
messenger/DataBuffer.java:104:	public synchronized void setDump(String s) {
messenger/DataBuffer.java:107:		while (fIsDump == true) {
messenger/DataBuffer.java:110:				wait();
messenger/DataBuffer.java:112:			} catch (InterruptedException e) {
messenger/DataBuffer.java:113:	                System.out.println(                       + e.toString());
messenger/DataBuffer.java:119:		notifyAll();	
messenger/DataBuffer.java:127:	public synchronized String getDump() {
messenger/DataBuffer.java:129:		while (fIsDump == false) {
messenger/DataBuffer.java:132:				wait();
messenger/DataBuffer.java:134:			} catch (InterruptedException e) {
messenger/DataBuffer.java:135:	                System.out.println(                       + e.toString());
messenger/DataBuffer.java:139:		notifyAll();
messenger/DataBuffer.java:148:	public synchronized boolean ExistsDump() {
messenger/DataBuffer.java:158:	public synchronized boolean ExistsUserData() {
messenger/AProtocol.java:56:	public AProtocol() {
messenger/AProtocol.java:67:	public AProtocol(String server, int port) {
messenger/AProtocol.java:69:		assert !server.equals(  );
messenger/AProtocol.java:79:	public void connect() throws TimeOutException {
messenger/AProtocol.java:81:			System.out.println(fServer +     + fPort +                          );
messenger/AProtocol.java:82:			fSocket = new TimeOutSocket(fServer, fPort);
messenger/AProtocol.java:83:			System.out.println(fServer +     + fPort +                           );
messenger/AProtocol.java:84:		} catch (TimeOutException e) {
messenger/AProtocol.java:85:			throw new TimeOutException(fServer +     + fPort +                         );
messenger/AProtocol.java:92:	public void disconnect() {
messenger/AProtocol.java:94:		fSocket.close();
messenger/AProtocol.java:103:	public Socket getSocket() {
messenger/AProtocol.java:105:		return fSocket.getServer();
messenger/AProtocol.java:112:	public void setLoggedIn(boolean loggedin) {
messenger/AProtocol.java:120:	public void setLoginName(String login) {
messenger/AProtocol.java:128:	public void setEncPasswd(String encpasswd) {
messenger/AProtocol.java:136:	public boolean getLoggedIn() {
messenger/AProtocol.java:144:	public String getLoginName() {
messenger/AProtocol.java:152:	public String getEncPasswd() {
messenger/AProtocol.java:160:	public boolean isConnected() {
messenger/AProtocol.java:161:		return fSocket.isConnected();
messenger/AProtocol.java:168:	public void setServer(String server) {
messenger/AProtocol.java:169:		assert(!server.equals(  ));
messenger/AProtocol.java:173:		assert fServer.equals(server);
messenger/AProtocol.java:180:	public String getServer() {
messenger/AProtocol.java:192:	public void setPort(int port) {
messenger/AProtocol.java:198:		assert getPort() == port;
messenger/AProtocol.java:207:	public AContact getContact(String login) throws UnknownContactException {
messenger/AProtocol.java:208:		for(int i = 0; i < fContactList.size(); i++) {
messenger/AProtocol.java:209:			if(((AContact)fContactList.elementAt(i)).getLogin().equals(login)) {
messenger/AProtocol.java:210:				return (AContact)fContactList.elementAt(i);
messenger/AProtocol.java:213:		throw new UnknownContactException();
messenger/AProtocol.java:220:	public int getPort() {
messenger/AProtocol.java:228:	protected abstract int getNumberOfContacts();
messenger/AProtocol.java:240:	public abstract void sendMessage(String contact, String message) throws ProtocolException;
messenger/AProtocol.java:246:	public abstract Vector getContactList();
messenger/AProtocol.java:253:	public abstract void addContact(String login, String nick);
messenger/TimeOutSocket.java:50:	public TimeOutSocket(String server, int port) throws TimeOutException {
messenger/TimeOutSocket.java:54:		t = new Timer(10000);
messenger/TimeOutSocket.java:56: 		while (!t.isTimedOut() && !isConnected()) {
messenger/TimeOutSocket.java:58: 			if(running) {
messenger/TimeOutSocket.java:64:					s = new Socket(fServer, fPort);
messenger/TimeOutSocket.java:67:				catch(IllegalArgumentException e) {
messenger/TimeOutSocket.java:68:					System.out.println(e.getMessage());	
messenger/TimeOutSocket.java:70:		catch(IOException e) {		
messenger/TimeOutSocket.java:71:			System.out.println(             );
messenger/TimeOutSocket.java:77: 			if(t == null) {
messenger/TimeOutSocket.java:78: 				System.out.println(            );
messenger/TimeOutSocket.java:80: 			else if(this == null) {
messenger/TimeOutSocket.java:81: 				System.out.println(               );
messenger/TimeOutSocket.java:88:		if(t.isTimedOut()) {
messenger/TimeOutSocket.java:89:			if(t == null) {
messenger/TimeOutSocket.java:90: 				System.out.println(            );
messenger/TimeOutSocket.java:93:			t.interrupt();
messenger/TimeOutSocket.java:95:			if(t == null) {
messenger/TimeOutSocket.java:96: 				System.out.println(            );
messenger/TimeOutSocket.java:99:			throw new TimeOutException();
messenger/TimeOutSocket.java:103:			t.interrupt();	
messenger/TimeOutSocket.java:107:	private boolean running() {
messenger/TimeOutSocket.java:111:	public void close() {
messenger/TimeOutSocket.java:113:			s.close();
messenger/TimeOutSocket.java:115:		catch(IOException e) {
messenger/TimeOutSocket.java:120:	public Socket getServer() {
messenger/TimeOutSocket.java:125:	public boolean isConnected() {
messenger/TimeOutSocket.java:126:		if(s == null) {
messenger/TimeOutSocket.java:130:			return s.isConnected();
messenger/Utils.java:50:	private static int charToNibble ( char c )
messenger/Utils.java:52:	if (     <= c && c <=     )
messenger/Utils.java:56:	else if (     <= c && c <=     )
messenger/Utils.java:60:	else if (     <= c && c <=     )
messenger/Utils.java:66:	throw new IllegalArgumentException (                           + c ) ;
messenger/Utils.java:82:	public static byte[] fromHexString ( String s ) {
messenger/Utils.java:83:		assert s.length()%2 == 0;                                                      
messenger/Utils.java:87:		int stringLength = s.length() ;
messenger/Utils.java:91:		if ( (stringLength & 0x1) != 0 ) {
messenger/Utils.java:92:			throw new IllegalArgumentException (                                                           );
messenger/Utils.java:97:		for ( int i=0 ,j= 0; i< stringLength; i+= 2,j ++ )
messenger/Utils.java:99:			int high= charToNibble(s.charAt ( i ));
messenger/Utils.java:100:			int low = charToNibble( s.charAt ( i+1 ) );
messenger/Utils.java:101:			b[ j ] = (byte ) ( ( high << 4 ) | low );
messenger/Utils.java:107:	public static String HexFromString(String message) {	
messenger/Utils.java:113:		for(int i = 0; i < message.length(); i++) {
messenger/Utils.java:115:			Integer v = new Integer((int)(message.charAt(i)));
messenger/Utils.java:117:			if(v.intValue() < 16) {
messenger/Utils.java:119:				blah += Integer.toHexString(v.intValue());
messenger/Utils.java:122:				blah += Integer.toHexString(v.intValue());
messenger/Utils.java:131:		assert blah.length() == 2*message.length();
messenger/Utils.java:135:	public static int hexToInt ( String value ) {
messenger/Utils.java:136:	    value = value.toUpperCase();
messenger/Utils.java:139:	    for ( int i=0; i<value.length(); i++ ) {
messenger/Utils.java:140:	         int n = (int) value.charAt ( i );
messenger/Utils.java:142:	         if ( n > 9 ) {
messenger/Utils.java:146:	         res = ( res * 16 ) + n;
messenger/Utils.java:151:	public static byte hexToByte ( String value ) {
messenger/Utils.java:152:	    value = value.toUpperCase();
messenger/Utils.java:155:	    for ( int i=0; i<value.length(); i++ ) {
messenger/Utils.java:156:	         int n = (int) value.charAt ( i );
messenger/Utils.java:158:	         if ( n > 9 ) {
messenger/Utils.java:162:	         res = ( res * 16 ) + n;
messenger/Utils.java:164:	    return (byte)res;
messenger/Utils.java:173:	public static String byteToHex(byte[] data) {
messenger/Utils.java:174:		StringBuffer buf = new StringBuffer();
messenger/Utils.java:175:		for ( int i = 0; i < data.length; i++ ) {
messenger/Utils.java:176:			buf.append( byteToHex(data[i]) );
messenger/Utils.java:178:		return(buf.toString());
messenger/Utils.java:187:	public static String byteToHex(byte data)
messenger/Utils.java:189:		StringBuffer buf = new StringBuffer();
messenger/Utils.java:190:		buf.append(toHexChar((data>>>4)&0x0F));
messenger/Utils.java:191:		buf.append(toHexChar(data&0x0F));
messenger/Utils.java:192:		return buf.toString();
messenger/Utils.java:202:	public static char toHexChar(int i)
messenger/Utils.java:204:		if ((0 <= i) && (i <= 9 ))
messenger/Utils.java:205:			return (char)(    + i);
messenger/Utils.java:207:			return (char)(    + (i-10));
messenger/Utils.java:225:	public static String intToHex (int value) {
messenger/Utils.java:226:		Integer i = new Integer(value);
messenger/Utils.java:227:		if(value < 16) {
messenger/Utils.java:228:			return (   + Integer.toHexString(value));
messenger/Utils.java:231:			return Integer.toHexString(value);
messenger/Utils.java:236:	public static String ICQEncryptPass(String pass) {
messenger/Utils.java:237:		StringBuffer sb = new StringBuffer();
messenger/Utils.java:239:		char[] temp = pass.toCharArray();
messenger/Utils.java:241:		for (int i = 0; i < temp.length; i++) {
messenger/Utils.java:243:			sb.append(temp[i]);			
messenger/Utils.java:246:		return HexFromString(sb.toString());
messenger/Utils.java:249:	public static String MD5Encrypt(String s) {
messenger/Utils.java:251:			MessageDigest md = MessageDigest.getInstance(     );
messenger/Utils.java:252:			md.reset();                    
messenger/Utils.java:253:			md.update(s.getBytes());
messenger/Utils.java:254:			byte[] digest = md.digest();
messenger/Utils.java:256:			return byteToHex(digest);
messenger/Utils.java:257:		} catch (NoSuchAlgorithmException e) {
messenger/Utils.java:258:			assert(false);
messenger/Utils.java:266:	public static String TwoByteInt2FourCharString(int i) {
messenger/Utils.java:272:		if(i < 256) {
messenger/Utils.java:273:			s =     +intToHex(i);
messenger/Utils.java:275:		else if(i < 4096) {
messenger/Utils.java:276:			s =    +intToHex(i);
messenger/Utils.java:279:			s = intToHex(i);
messenger/Utils.java:286:	public static int HexChar2Int(char ch) throws IllegalConversionException {
messenger/Utils.java:287:		if(ch ==    ) { return 0; }
messenger/Utils.java:288:		else if(ch ==    ) { return 1; }
messenger/Utils.java:289:		else if(ch ==    ) { return 2; }
messenger/Utils.java:290:		else if(ch ==    ) { return 3; }
messenger/Utils.java:291:		else if(ch ==    ) { return 4; }
messenger/Utils.java:292:		else if(ch ==    ) { return 5; }
messenger/Utils.java:293:		else if(ch ==    ) { return 6; }
messenger/Utils.java:294:		else if(ch ==    ) { return 7; }
messenger/Utils.java:295:		else if(ch ==    ) { return 8; }
messenger/Utils.java:296:		else if(ch ==    ) { return 9; }
messenger/Utils.java:297:		else if((ch ==    )||(ch ==    )) { return 10; }
messenger/Utils.java:298:		else if((ch ==    )||(ch ==    )) { return 11; }
messenger/Utils.java:299:		else if((ch ==    )||(ch ==    )) { return 12; }
messenger/Utils.java:300:		else if((ch ==    )||(ch ==    )) { return 13; }
messenger/Utils.java:301:		else if((ch ==    )||(ch ==    )) { return 14; }
messenger/Utils.java:302:		else if((ch ==    )||(ch ==    )) { return 15; }
messenger/Utils.java:304:			throw new IllegalConversionException(                 );
messenger/Utils.java:308:	public static String HexString2AsciiString(String s) {
messenger/Utils.java:310:		for(int i = 0; i < s.length()-1; i+=2) {                             
messenger/Utils.java:312:			for(int j = 0; j < 2; j++) {
messenger/Utils.java:313:				if(j == 0) {
messenger/Utils.java:315:						value = 16*HexChar2Int(s.charAt(i));
messenger/Utils.java:317:					catch(IllegalConversionException e) {
messenger/Utils.java:323:						value += HexChar2Int(s.charAt(i+1));
messenger/Utils.java:325:					catch(IllegalConversionException e) {
messenger/Utils.java:330:			result += (char)value;
messenger/Utils.java:335:	public static String UIN(String uin) {
messenger/Utils.java:340:		while (i < uin.length()) {
messenger/Utils.java:341:			result +=     + uin.charAt(i);
messenger/Utils.java:345:		assert 2*uin.length() == result.length();
messenger/Utils.java:349:	public static String URLQuoted2PlainText(String s) {
messenger/Utils.java:351:		int index = res.indexOf(   );
messenger/Utils.java:353:		while (index != -1) {
messenger/Utils.java:354:			String i = res.substring(index+1, index+3);
messenger/Utils.java:355:			char ascii = (char)hexToInt(i);
messenger/Utils.java:356:			res = res.substring(0, index) + ascii + res.substring(index+3);
messenger/Utils.java:357:			index = res.indexOf(   );
messenger/Utils.java:363:	public static String AsciiString2HexString(String s) {
messenger/Utils.java:365:		for(int i = 0; i < s.length(); i++) {
messenger/Utils.java:366:			int j = (int)s.charAt(i);
messenger/Utils.java:367:			result += intToHex(j);
messenger/Utils.java:375:	public static String printableHexString(String hex) {
messenger/Utils.java:379:		while(i < hex.length()) {
messenger/Utils.java:380:			s += hex.charAt(i-1);
messenger/Utils.java:381:			s += hex.charAt(i);
messenger/Utils.java:383:			if(h%16 == 0) {
messenger/Utils.java:384:				s += (    );
messenger/Utils.java:386:			else if(h%8 == 0) {
messenger/Utils.java:387:				s += (   );
messenger/Utils.java:392:		s += (    );
messenger/MSN/MSNIncomingNLNPacket.java:43:	public MSNIncomingNLNPacket(String receivedPacket) {
messenger/MSN/MSNIncomingNLNPacket.java:44:		super(receivedPacket);
messenger/MSN/MSNIncomingNLNPacket.java:46:		fStatus = (String)tokens.elementAt(1);
messenger/MSN/MSNIncomingNLNPacket.java:47:		fContact = (String)tokens.elementAt(2);
messenger/MSN/MSNIncomingNLNPacket.java:48:		fContactNick = (String)tokens.elementAt(3);
messenger/MSN/MSNIncomingNLNPacket.java:55:	public String getContact() {
messenger/MSN/MSNIncomingNLNPacket.java:63:	public String getStatus() {
messenger/MSN/MSNIncomingNLNPacket.java:64:		if (fStatus.equals(     )) {
messenger/MSN/MSNIncomingNLNPacket.java:67:		else if (fStatus.equals(     )) {
messenger/MSN/MSNIncomingNLNPacket.java:70:		else if (fStatus.equals(     )) {
messenger/MSN/MSNIncomingNLNPacket.java:73:		else if (fStatus.equals(     )) {
messenger/MSN/MSNIncomingNLNPacket.java:76:		else if (fStatus.equals(     )) {
messenger/MSN/MSNIncomingNLNPacket.java:79:		else if (fStatus.equals(     )) {
messenger/MSN/MSNIncomingNLNPacket.java:82:		else if (fStatus.equals(     )) {
messenger/MSN/MSNIncomingNLNPacket.java:85:		else if (fStatus.equals(     )) {
messenger/MSN/MSNIncomingNLNPacket.java:99:	public String getContactNick() {
messenger/MSN/MSNIncomingVERPacket.java:45:	public MSNIncomingVERPacket(String receivedPacket) {
messenger/MSN/MSNIncomingVERPacket.java:46:		super(receivedPacket);
messenger/MSN/MSNIncomingVERPacket.java:48:		fArgument1 = (String)tokens.elementAt(2);
messenger/MSN/MSNIncomingVERPacket.java:49:		fArgument2 = (String)tokens.elementAt(3);
messenger/MSN/MSNIncomingVERPacket.java:50:		fArgument3 = (String)tokens.elementAt(4);
messenger/MSN/MSNIncomingVERPacket.java:51:		fArgument4 = (String)tokens.elementAt(5);
messenger/MSN/MSNIncomingVERPacket.java:52:		fArgument5 = (String)tokens.elementAt(6);
messenger/MSN/MSNOutgoingUSRIPacket.java:49:	public MSNOutgoingUSRIPacket(Vector arg) {
messenger/MSN/MSNOutgoingUSRIPacket.java:50:		assert arg.size() == 3;
messenger/MSN/MSNOutgoingUSRIPacket.java:53:		fTrID = (Long)arg.elementAt(0);
messenger/MSN/MSNOutgoingUSRIPacket.java:54:		fEncryption = (String)arg.elementAt(1);
messenger/MSN/MSNOutgoingUSRIPacket.java:55:		fUserName = (String)arg.elementAt(2);
messenger/MSN/MSNOutgoingUSRIPacket.java:57:		setCommand(fCmd);
messenger/MSN/MSNOutgoingUSRIPacket.java:58:		setTrID(fTrID);
messenger/MSN/MSNOutgoingUSRIPacket.java:59:		addArgument(fEncryption);
messenger/MSN/MSNOutgoingUSRIPacket.java:60:		addArgument(   );
messenger/MSN/MSNOutgoingUSRIPacket.java:61:		addArgument(fUserName);
messenger/MSN/MSNOutgoingCALPacket.java:47:	public MSNOutgoingCALPacket(Vector arg) {
messenger/MSN/MSNOutgoingCALPacket.java:48:		assert arg.size() == 2;
messenger/MSN/MSNOutgoingCALPacket.java:51:		fTrID 		=	(Long)arg.elementAt(0);
messenger/MSN/MSNOutgoingCALPacket.java:52:		fContact	=	(String)arg.elementAt(1);
messenger/MSN/MSNOutgoingCALPacket.java:54:		setCommand(fCmd);
messenger/MSN/MSNOutgoingCALPacket.java:55:		setTrID(fTrID);
messenger/MSN/MSNOutgoingCALPacket.java:56:		addArgument(fContact);
messenger/MSN/MSNOutgoingBYEPacket.java:40:	public MSNOutgoingBYEPacket(Vector arg) {
messenger/MSN/MSNOutgoingBYEPacket.java:43:		fLogin 	=	(String)arg.elementAt(0);
messenger/MSN/MSNOutgoingBYEPacket.java:45:		setCommand(fCmd);
messenger/MSN/MSNOutgoingBYEPacket.java:46:		addArgument(fLogin);
messenger/MSN/MSNIncomingMSGPacket.java:48:	public MSNIncomingMSGPacket(String receivedPacket) {
messenger/MSN/MSNIncomingMSGPacket.java:49:		super(receivedPacket);
messenger/MSN/MSNIncomingMSGPacket.java:51:		fContact = (String)tokens.elementAt(1);
messenger/MSN/MSNIncomingMSGPacket.java:52:		fContactNick = (String)tokens.elementAt(2);
messenger/MSN/MSNIncomingMSGPacket.java:53:		fLength = new Integer((String)tokens.elementAt(3)).intValue();	
messenger/MSN/MSNIncomingMSGPacket.java:54:		this.parse();
messenger/MSN/MSNIncomingMSGPacket.java:57:	private void parse() {
messenger/MSN/MSNIncomingMSGPacket.java:58:		int index = tokens.lastIndexOf(               );
messenger/MSN/MSNIncomingMSGPacket.java:61:		if (index != -1) {
messenger/MSN/MSNIncomingMSGPacket.java:62:			type = (String)tokens.elementAt(index + 1);
messenger/MSN/MSNIncomingMSGPacket.java:63:			if (type.endsWith(   )) {
messenger/MSN/MSNIncomingMSGPacket.java:64:				type = type.substring(0, type.length() - 1);
messenger/MSN/MSNIncomingMSGPacket.java:68:		if (type.equals(                      )) {
messenger/MSN/MSNIncomingMSGPacket.java:70:		} else if (type.equals(                      )) {
messenger/MSN/MSNIncomingMSGPacket.java:72:		} else if (type.equals(                                       )) {
messenger/MSN/MSNIncomingMSGPacket.java:75:			fNrOfUnreadMsgs = this.extractInfo(               );
messenger/MSN/MSNIncomingMSGPacket.java:78:		} else if (type.equals(                                )) {
messenger/MSN/MSNIncomingMSGPacket.java:81:			fFromName = this.extractInfo(       );
messenger/MSN/MSNIncomingMSGPacket.java:83:		} else if (type.equals(                                     )) {
messenger/MSN/MSNIncomingMSGPacket.java:88:	private String extractInfo(String info) {
messenger/MSN/MSNIncomingMSGPacket.java:89:		int index = tokens.lastIndexOf(info);
messenger/MSN/MSNIncomingMSGPacket.java:92:		if (index != -1) {
messenger/MSN/MSNIncomingMSGPacket.java:93:			s = (String)tokens.elementAt(index + 1);
messenger/MSN/MSNIncomingMSGPacket.java:94:			if (s.endsWith(   )) {
messenger/MSN/MSNIncomingMSGPacket.java:95:				s = s.substring(0, s.length() - 1);
messenger/MSN/MSNIncomingMSGPacket.java:104:	public String getFromName() {
messenger/MSN/MSNIncomingMSGPacket.java:108:	public String getNrOfUnreadMsgs() {
messenger/MSN/MSNIncomingMSGPacket.java:112:	public String getType() {
messenger/MSN/MSNIncomingMSGPacket.java:120:	public String getContact() {
messenger/MSN/MSNIncomingMSGPacket.java:128:	public String getContactNick() {
messenger/MSN/MSNIncomingMSGPacket.java:135:	public int getLength() {
messenger/MSN/MSNOutgoingLSTPacket.java:45:	public MSNOutgoingLSTPacket(Vector arg) {
messenger/MSN/MSNOutgoingLSTPacket.java:46:		assert arg.size() == 1;
messenger/MSN/MSNOutgoingLSTPacket.java:49:		fTrID = (Long)arg.elementAt(0);
messenger/MSN/MSNOutgoingLSTPacket.java:51:		setCommand(fCmd);
messenger/MSN/MSNOutgoingLSTPacket.java:52:		setTrID(fTrID);
messenger/MSN/MSNOutgoingLSTPacket.java:53:		addArgument(    );
messenger/MSN/MSNOutgoingANSPacket.java:49:	public MSNOutgoingANSPacket(Vector arg) {
messenger/MSN/MSNOutgoingANSPacket.java:50:		assert arg.size() == 4;
messenger/MSN/MSNOutgoingANSPacket.java:53:		fTrID 			=	(Long)arg.elementAt(0);
messenger/MSN/MSNOutgoingANSPacket.java:54:		fLogin			=	(String)arg.elementAt(1);
messenger/MSN/MSNOutgoingANSPacket.java:55:		fCKI				=	(String)arg.elementAt(2);
messenger/MSN/MSNOutgoingANSPacket.java:56:		fSessionID	=	(String)arg.elementAt(3);
messenger/MSN/MSNOutgoingANSPacket.java:58:		setCommand(fCmd);
messenger/MSN/MSNOutgoingANSPacket.java:59:		setTrID(fTrID);
messenger/MSN/MSNOutgoingANSPacket.java:60:		addArgument(fLogin);
messenger/MSN/MSNOutgoingANSPacket.java:61:		addArgument(fCKI);
messenger/MSN/MSNOutgoingANSPacket.java:62:		addArgument(fSessionID);		
messenger/MSN/MSNOutgoingXFRPacket.java:45:	public MSNOutgoingXFRPacket(Vector arg) {
messenger/MSN/MSNOutgoingXFRPacket.java:46:		assert arg.size() == 1;
messenger/MSN/MSNOutgoingXFRPacket.java:49:		fTrID	=	(Long)arg.elementAt(0);
messenger/MSN/MSNOutgoingXFRPacket.java:51:		setCommand(fCmd);
messenger/MSN/MSNOutgoingXFRPacket.java:52:		setTrID(fTrID);
messenger/MSN/MSNOutgoingXFRPacket.java:53:		addArgument(    );
messenger/MSN/MSNOutgoingCHGPacket.java:48:	public MSNOutgoingCHGPacket(Vector arg) {
messenger/MSN/MSNOutgoingCHGPacket.java:49:		assert arg.size() == 2;
messenger/MSN/MSNOutgoingCHGPacket.java:54:		fTrID 		= 	(Long)arg.elementAt(0);
messenger/MSN/MSNOutgoingCHGPacket.java:55:		fStatus		=	(String)arg.elementAt(1);
messenger/MSN/MSNOutgoingCHGPacket.java:57:		setCommand(fCmd);
messenger/MSN/MSNOutgoingCHGPacket.java:58:		setTrID(fTrID);
messenger/MSN/MSNOutgoingCHGPacket.java:59:		addArgument(fStatus);
messenger/MSN/MSNOutgoingOUTPacket.java:39:	public MSNOutgoingOUTPacket(Vector arg) {
messenger/MSN/MSNOutgoingOUTPacket.java:42:		setCommand(fCmd);
messenger/MSN/MSNIncomingRNGPacket.java:45:	public MSNIncomingRNGPacket(String receivedPacket) {
messenger/MSN/MSNIncomingRNGPacket.java:46:		super(receivedPacket);
messenger/MSN/MSNIncomingRNGPacket.java:48:		fSessionID = (String)tokens.elementAt(1);
messenger/MSN/MSNIncomingRNGPacket.java:50:		String SBIpAndPort = (String)tokens.elementAt(2);
messenger/MSN/MSNIncomingRNGPacket.java:51:		int index = SBIpAndPort.indexOf(   );
messenger/MSN/MSNIncomingRNGPacket.java:52:		fSwitchBoardIp = SBIpAndPort.substring(0, index);
messenger/MSN/MSNIncomingRNGPacket.java:54:		fCKI = (String)tokens.elementAt(4);
messenger/MSN/MSNIncomingRNGPacket.java:55:		fContact = (String)tokens.elementAt(5);
messenger/MSN/MSNIncomingRNGPacket.java:56:		fContactNick = (String)tokens.elementAt(6);
messenger/MSN/MSNIncomingRNGPacket.java:63:	public String getSessionID() {
messenger/MSN/MSNIncomingRNGPacket.java:71:	public String getSwitchBoardIp() {
messenger/MSN/MSNIncomingRNGPacket.java:79:	public String getCKI() {
messenger/MSN/MSNIncomingRNGPacket.java:87:	public String getContact() {
messenger/MSN/MSNIncomingRNGPacket.java:95:	public String getContactNick() {
messenger/MSN/MSNIncomingFLNPacket.java:41:	public MSNIncomingFLNPacket(String receivedPacket) {
messenger/MSN/MSNIncomingFLNPacket.java:42:		super(receivedPacket);
messenger/MSN/MSNIncomingFLNPacket.java:44:		fContact = (String)tokens.elementAt(1);
messenger/MSN/MSNIncomingFLNPacket.java:51:	public String getContact() {
messenger/MSN/MSNIncomingBPRPacket.java:17:	public MSNIncomingBPRPacket(String receivedPacket) {
messenger/MSN/MSNIncomingBPRPacket.java:18:		super(receivedPacket);
messenger/MSN/MSNContact.java:45:	public MSNContact(String loginName, String nick) {
messenger/MSN/MSNContact.java:51:		this.setLogin(loginName);
messenger/MSN/MSNContact.java:52:		this.setNick(Utils.URLQuoted2PlainText(nick));
messenger/MSN/MSNContact.java:54:		assert this.getLogin() == loginName;
messenger/MSN/MSNContact.java:55:		assert this.getNick().equals(nick);
messenger/MSN/MSNContact.java:62:	public MSNContact(String loginName) {
messenger/MSN/MSNContact.java:66:		this.setLogin(loginName);
messenger/MSN/MSNContact.java:68:		assert this.getLogin() == loginName;
messenger/MSN/MSNIncomingCHGPacket.java:40:	public MSNIncomingCHGPacket(String receivedPacket) {
messenger/MSN/MSNIncomingCHGPacket.java:41:		super(receivedPacket);
messenger/MSN/MSNException.java:42:	public MSNException() {
messenger/MSN/MSNException.java:43:		super();
messenger/MSN/MSNException.java:50:	public MSNException(String message) {
messenger/MSN/MSNException.java:51:		super(message);
messenger/MSN/MSNException.java:59:	public MSNException(String message, Throwable cause) {
messenger/MSN/MSNException.java:60:		super(message, cause);
messenger/MSN/MSNException.java:67:	public MSNException(Throwable cause) {
messenger/MSN/MSNException.java:68:		super(cause);
messenger/MSN/MSNSession.java:58:	private Long fTrID = new Long(1);
messenger/MSN/MSNSession.java:71:	public MSNSession(String login, String contact, String cki, DataBuffer controlData, IPacketFactory pf) {
messenger/MSN/MSNSession.java:85:	public void connect(String switchboardServer, int port) {
messenger/MSN/MSNSession.java:87:			fTrID = new Long(1);
messenger/MSN/MSNSession.java:88:			fServer = new Socket(switchboardServer, port);
messenger/MSN/MSNSession.java:89:			fOutToServer =  new PrintWriter(new OutputStreamWriter(fServer.getOutputStream(),        ));
messenger/MSN/MSNSession.java:90:			fInFromServer = new BufferedReader(new InputStreamReader(fServer.getInputStream(),        ));
messenger/MSN/MSNSession.java:91:		} catch (IOException e) {
messenger/MSN/MSNSession.java:92:			System.out.println(                       + e.getMessage());
messenger/MSN/MSNSession.java:99:	public void setupOutgoingSession() throws MSNException {
messenger/MSN/MSNSession.java:103:			v = new Vector();
messenger/MSN/MSNSession.java:104:			v.add(fTrID);
messenger/MSN/MSNSession.java:105:			increaseTrID();
messenger/MSN/MSNSession.java:106:			v.add(fLogin);
messenger/MSN/MSNSession.java:107:			v.add(fCKI);
messenger/MSN/MSNSession.java:108:			IPacket packet = fFactory.createOutgoingPacket(         , v);
messenger/MSN/MSNSession.java:109:			sendPacket(packet);
messenger/MSN/MSNSession.java:110:			receivePacket();
messenger/MSN/MSNSession.java:111:			fControlData.setDump(                  + fReceived);
messenger/MSN/MSNSession.java:113:			v.clear();
messenger/MSN/MSNSession.java:114:			v.add(fTrID);
messenger/MSN/MSNSession.java:115:			increaseTrID();
messenger/MSN/MSNSession.java:116:			v.add(fContact);
messenger/MSN/MSNSession.java:117:			packet = fFactory.createOutgoingPacket(         , v);
messenger/MSN/MSNSession.java:118:			sendPacket(packet);
messenger/MSN/MSNSession.java:119:			receivePacket();			
messenger/MSN/MSNSession.java:120:			packet = fFactory.createIncomingPacket(fReceived);
messenger/MSN/MSNSession.java:121:			fControlData.setDump(                  +  ((MSNPacket)packet).getContent());
messenger/MSN/MSNSession.java:122:			fSessionID = ((MSNIncomingCALPacket)packet).getSessionID();
messenger/MSN/MSNSession.java:125:			receivePacket();
messenger/MSN/MSNSession.java:126:			fControlData.setDump(                  + fReceived);
messenger/MSN/MSNSession.java:127:		} catch (BadArgumentException e) {
messenger/MSN/MSNSession.java:128:			System.out.println(                       + e.getMessage());
messenger/MSN/MSNSession.java:129:		} catch (UnknownPacketException e) {
messenger/MSN/MSNSession.java:130:			System.out.println(                       + e.getMessage());
messenger/MSN/MSNSession.java:131:		} catch (MSNException e) {
messenger/MSN/MSNSession.java:132:			throw new MSNException(e.getMessage());
messenger/MSN/MSNSession.java:133:		} catch (IncomingNullPacketException e) {
messenger/MSN/MSNSession.java:134:			throw new MSNException(e.getMessage());
messenger/MSN/MSNSession.java:144:	public void setupIncomingSession(String sessionID) throws MSNException {
messenger/MSN/MSNSession.java:145:		Vector v = new Vector();
messenger/MSN/MSNSession.java:149:			v.addElement(fTrID);
messenger/MSN/MSNSession.java:150:			increaseTrID();
messenger/MSN/MSNSession.java:151:			v.addElement(fLogin);
messenger/MSN/MSNSession.java:152:			v.addElement(fCKI);
messenger/MSN/MSNSession.java:153:			v.addElement(fSessionID);
messenger/MSN/MSNSession.java:154:			IPacket packet = fFactory.createOutgoingPacket(         , v);
messenger/MSN/MSNSession.java:155:			sendPacket(packet);
messenger/MSN/MSNSession.java:156:			receivePacket();
messenger/MSN/MSNSession.java:157:			fControlData.setDump(                  + fReceived);
messenger/MSN/MSNSession.java:158:			receivePacket();
messenger/MSN/MSNSession.java:159:			fControlData.setDump(                  + fReceived);
messenger/MSN/MSNSession.java:160:		} catch (MSNException e) {
messenger/MSN/MSNSession.java:161:			throw new MSNException(e.getMessage());
messenger/MSN/MSNSession.java:162:		} catch (UnknownPacketException e) {
messenger/MSN/MSNSession.java:163:			System.out.println(                       + e.getMessage());
messenger/MSN/MSNSession.java:164:		}  catch (BadArgumentException e) {
messenger/MSN/MSNSession.java:165:			System.out.println(                       + e.getMessage());
messenger/MSN/MSNSession.java:174:	protected void sendPacket(IPacket packet) {
messenger/MSN/MSNSession.java:175:		MSNPacket mp = (MSNPacket)packet;
messenger/MSN/MSNSession.java:176:		String s = mp.getContent();
messenger/MSN/MSNSession.java:177:		fOutToServer.print(s);
messenger/MSN/MSNSession.java:178:		if (s.substring(0,3).equals(     )) {
messenger/MSN/MSNSession.java:181:			fOutToServer.print(      );
messenger/MSN/MSNSession.java:183:		fOutToServer.flush();
messenger/MSN/MSNSession.java:184:		fControlData.setDump(                  + mp.getContent());
messenger/MSN/MSNSession.java:193:	public void sendMessage(String contact, String message) {
messenger/MSN/MSNSession.java:195:			Vector v = new Vector();
messenger/MSN/MSNSession.java:196:			v.add(fTrID);
messenger/MSN/MSNSession.java:197:			increaseTrID();
messenger/MSN/MSNSession.java:198:			v.add(message);
messenger/MSN/MSNSession.java:199:			IPacket packet = fFactory.createOutgoingPacket(         , v);
messenger/MSN/MSNSession.java:200:			this.sendPacket(packet);
messenger/MSN/MSNSession.java:201:		} catch(BadArgumentException e) {
messenger/MSN/MSNSession.java:202:			System.out.println(                       + e.getMessage());
messenger/MSN/MSNSession.java:203:		} catch (UnknownPacketException e){
messenger/MSN/MSNSession.java:204:			System.out.println(                       + e.getMessage());
messenger/MSN/MSNSession.java:208:	public void sendOutMessage() {
messenger/MSN/MSNSession.java:210:			IPacket packet = fFactory.createOutgoingPacket(         , null);
messenger/MSN/MSNSession.java:211:			this.sendPacket(packet);
messenger/MSN/MSNSession.java:212:			this.shutdown();
messenger/MSN/MSNSession.java:213:		} catch(BadArgumentException e) {
messenger/MSN/MSNSession.java:214:			System.out.println(                       + e.getMessage());
messenger/MSN/MSNSession.java:215:		} catch (UnknownPacketException e){
messenger/MSN/MSNSession.java:216:			System.out.println(                       + e.getMessage());
messenger/MSN/MSNSession.java:225:	public void receivePacket() throws MSNException {
messenger/MSN/MSNSession.java:227:			fReceived = fInFromServer.readLine( );
messenger/MSN/MSNSession.java:228:		} catch (IOException e) { 
messenger/MSN/MSNSession.java:229:			System.out.println(                       + e.getMessage());
messenger/MSN/MSNSession.java:238:	public String getContact() {
messenger/MSN/MSNSession.java:246:	public String getSessionID() {
messenger/MSN/MSNSession.java:254:	public void increaseTrID() {
messenger/MSN/MSNSession.java:255:		fTrID = new Long(fTrID.longValue() + 1);
messenger/MSN/MSNSession.java:261:	public void run() {
messenger/MSN/MSNSession.java:267:			while (true) {
messenger/MSN/MSNSession.java:269:					sleep(150);
messenger/MSN/MSNSession.java:271:				catch(InterruptedException e) {
messenger/MSN/MSNSession.java:276:				if ((s = fInFromServer.readLine()) != null) {
messenger/MSN/MSNSession.java:277:					st = new StringTokenizer(s);
messenger/MSN/MSNSession.java:278:					tokens = new Vector();
messenger/MSN/MSNSession.java:280:					while (st.hasMoreTokens()) {
messenger/MSN/MSNSession.java:281:						tokens.add(st.nextToken());
messenger/MSN/MSNSession.java:284:					String cmd = (String)tokens.elementAt(0);
messenger/MSN/MSNSession.java:285:					String sender = (String)tokens.elementAt(1);
messenger/MSN/MSNSession.java:287:					if	(cmd.indexOf(   ) != -1) {
messenger/MSN/MSNSession.java:289:						Integer len = new Integer((String)tokens.lastElement());
messenger/MSN/MSNSession.java:291:						sb = new StringBuffer();
messenger/MSN/MSNSession.java:292:						sb.append(s);
messenger/MSN/MSNSession.java:293:						sb.append(      );
messenger/MSN/MSNSession.java:294:						for (int i = 0; i < len.intValue(); ++i) {
messenger/MSN/MSNSession.java:295:							char c = (char)fInFromServer.read();
messenger/MSN/MSNSession.java:296:							sb.append(c);
messenger/MSN/MSNSession.java:299:						String message = sb.toString();
messenger/MSN/MSNSession.java:302:						int index = message.indexOf(CRLF);
messenger/MSN/MSNSession.java:303:						String header = message.substring(0, index);
messenger/MSN/MSNSession.java:304:						String body = message.substring(index + CRLF.length());
messenger/MSN/MSNSession.java:306:						if (header.indexOf(        ) != -1) {
messenger/MSN/MSNSession.java:307:							fControlData.setToUser(       + sender);
messenger/MSN/MSNSession.java:309:							fControlData.setToUser(       + sender +     + body);
messenger/MSN/MSNSession.java:312:					else if (cmd.indexOf(   ) != -1) {
messenger/MSN/MSNSession.java:313:						fControlData.setToUser(       + sender);
messenger/MSN/MSNSession.java:314:						this.shutdown();
messenger/MSN/MSNSession.java:319:		} catch (IOException e) {
messenger/MSN/MSNSession.java:324:	public void shutdown() {
messenger/MSN/MSNSession.java:326:			fServer.close();
messenger/MSN/MSNSession.java:327:			if (fSessionListener != null) {
messenger/MSN/MSNSession.java:328:				fSessionListener.removeSession(fContact);
messenger/MSN/MSNSession.java:330:		} catch (Exception e) {
messenger/MSN/MSNSession.java:335:	public void setListener(MSNSessionListener sessionListener) {
messenger/MSN/MSNSession.java:339:	public MSNSessionListener getListener() {
messenger/MSN/MSNOutgoingADDPacket.java:41:	public MSNOutgoingADDPacket(Vector arg) {
messenger/MSN/MSNOutgoingADDPacket.java:42:		assert arg.size() == 3;
messenger/MSN/MSNOutgoingADDPacket.java:45:		fTrID = (Long)arg.elementAt(0);
messenger/MSN/MSNOutgoingADDPacket.java:46:		fListType = (String)arg.elementAt(1);
messenger/MSN/MSNOutgoingADDPacket.java:47:		fPassport = (String)arg.elementAt(2);
messenger/MSN/MSNOutgoingADDPacket.java:49:		setCommand(fCmd);
messenger/MSN/MSNOutgoingADDPacket.java:50:		setTrID(fTrID);
messenger/MSN/MSNOutgoingADDPacket.java:51:		addArgument(fListType);
messenger/MSN/MSNOutgoingADDPacket.java:53:		addArgument(fPassport);
messenger/MSN/MSNOutgoingADDPacket.java:54:		addArgument(fPassport);
messenger/MSN/MSNOutgoingINFPacket.java:46:	public MSNOutgoingINFPacket(Vector arg) {
messenger/MSN/MSNOutgoingINFPacket.java:47:		assert arg.size() == 1;
messenger/MSN/MSNOutgoingINFPacket.java:50:		fTrID = (Long)arg.elementAt(0);
messenger/MSN/MSNOutgoingINFPacket.java:52:		setCommand(fCmd);
messenger/MSN/MSNOutgoingINFPacket.java:53:		setTrID(fTrID);
messenger/MSN/MSNProtocol.java:58:	private Long fTrID = new Long(0);
messenger/MSN/MSNProtocol.java:77:	public MSNProtocol(DataBuffer controlData, String login, String password, String servername, int port) {
messenger/MSN/MSNProtocol.java:78:		super(servername, port);
messenger/MSN/MSNProtocol.java:80:		setLoginName(login);
messenger/MSN/MSNProtocol.java:81:		setEncPasswd(password);
messenger/MSN/MSNProtocol.java:84:		fContactList = new Vector();
messenger/MSN/MSNProtocol.java:86:		fSessionMap = new HashMap();
messenger/MSN/MSNProtocol.java:87:		PacketFactory f = new PacketFactory();
messenger/MSN/MSNProtocol.java:89:			fFactory = f.getFactory(this);
messenger/MSN/MSNProtocol.java:91:		catch (UnknownProtocolException e) {
messenger/MSN/MSNProtocol.java:103:	public MSNProtocol(DataBuffer controlData,  String serverName, int port) {
messenger/MSN/MSNProtocol.java:104:		super(serverName, port);
messenger/MSN/MSNProtocol.java:106:		fContactList = new Vector();
messenger/MSN/MSNProtocol.java:108:		fSessionMap = new HashMap();
messenger/MSN/MSNProtocol.java:109:		PacketFactory f = new PacketFactory();
messenger/MSN/MSNProtocol.java:111:			fFactory = new PacketFactory().getFactory(this);
messenger/MSN/MSNProtocol.java:113:		catch(UnknownProtocolException e) {
messenger/MSN/MSNProtocol.java:118:	public DataBuffer getControlData() {
messenger/MSN/MSNProtocol.java:122:	public void login() throws Exception {
messenger/MSN/MSNProtocol.java:123:		fTrID = new Long(0);
messenger/MSN/MSNProtocol.java:125:		this.connect();
messenger/MSN/MSNProtocol.java:127:		fSessionMap = new HashMap();
messenger/MSN/MSNProtocol.java:128:		fOutToServer =  new PrintWriter(new OutputStreamWriter(getSocket().getOutputStream(),        ));
messenger/MSN/MSNProtocol.java:129:		fInFromServer = new BufferedReader(new InputStreamReader(getSocket().getInputStream(),        ));
messenger/MSN/MSNProtocol.java:131:		Vector v = new Vector();
messenger/MSN/MSNProtocol.java:132:		v.add(fTrID);
messenger/MSN/MSNProtocol.java:133:		this.increaseTrID();
messenger/MSN/MSNProtocol.java:134:		IPacket packet = fFactory.createOutgoingPacket(         , v);
messenger/MSN/MSNProtocol.java:135:		this.sendPacket(packet);
messenger/MSN/MSNProtocol.java:138:		this.start();
messenger/MSN/MSNProtocol.java:141:	public void sendByeMessage(String contact) {
messenger/MSN/MSNProtocol.java:142:		MSNSession msnsession = (MSNSession)fSessionMap.get(contact);
messenger/MSN/MSNProtocol.java:143:		if (msnsession != null) {
messenger/MSN/MSNProtocol.java:144:			msnsession.sendOutMessage();
messenger/MSN/MSNProtocol.java:153:	public void sendMessage(String contact, String message) throws MSNException {
messenger/MSN/MSNProtocol.java:157:		MSNSession session = (MSNSession)fSessionMap.get(contact);
messenger/MSN/MSNProtocol.java:158:		if (session != null) {
messenger/MSN/MSNProtocol.java:159:			session.sendMessage(contact, message);
messenger/MSN/MSNProtocol.java:164:				v = new Vector();
messenger/MSN/MSNProtocol.java:165:				v.addElement(fTrID);
messenger/MSN/MSNProtocol.java:166:				increaseTrID();
messenger/MSN/MSNProtocol.java:167:				IPacket packet = fFactory.createOutgoingPacket(         , v);
messenger/MSN/MSNProtocol.java:168:				sendPacket(packet);
messenger/MSN/MSNProtocol.java:169:			} catch(BadArgumentException e) {
messenger/MSN/MSNProtocol.java:170:				throw new MSNException(                                              );
messenger/MSN/MSNProtocol.java:171:			} catch (UnknownPacketException e) {
messenger/MSN/MSNProtocol.java:172:				throw new MSNException(                                  );
messenger/MSN/MSNProtocol.java:180:	public void sendPacket(IPacket packet) {
messenger/MSN/MSNProtocol.java:181:		MSNPacket mp = (MSNPacket)packet;
messenger/MSN/MSNProtocol.java:182:		String s = mp.getContent();
messenger/MSN/MSNProtocol.java:183:		fOutToServer.print(mp.getContent());
messenger/MSN/MSNProtocol.java:184:		if (s.substring(0,3).equals(     )) {
messenger/MSN/MSNProtocol.java:187:			fOutToServer.print(      );
messenger/MSN/MSNProtocol.java:189:		fOutToServer.flush();
messenger/MSN/MSNProtocol.java:190:		fControlData.setDump(                   + mp.getContent());
messenger/MSN/MSNProtocol.java:194:	public String receiveMessagePacket(String firstLine) throws IOException {
messenger/MSN/MSNProtocol.java:195:		StringTokenizer st = new StringTokenizer(firstLine);
messenger/MSN/MSNProtocol.java:196:		Vector tokens = new Vector();
messenger/MSN/MSNProtocol.java:198:		while (st.hasMoreTokens()) {
messenger/MSN/MSNProtocol.java:199:			tokens.add(st.nextToken());
messenger/MSN/MSNProtocol.java:202:		String cmd = (String)tokens.elementAt(0);
messenger/MSN/MSNProtocol.java:204:		Integer len = new Integer((String)tokens.lastElement());
messenger/MSN/MSNProtocol.java:206:		StringBuffer sb = new StringBuffer();
messenger/MSN/MSNProtocol.java:207:		sb.append(firstLine);
messenger/MSN/MSNProtocol.java:208:		sb.append(      );
messenger/MSN/MSNProtocol.java:209:		for (int i = 0; i < len.intValue(); ++i) {
messenger/MSN/MSNProtocol.java:210:			char c = (char)fInFromServer.read();
messenger/MSN/MSNProtocol.java:211:			sb.append(c);
messenger/MSN/MSNProtocol.java:214:		return sb.toString();
messenger/MSN/MSNProtocol.java:222:	public void analyzePacket(String s) throws MSNException {
messenger/MSN/MSNProtocol.java:224:		Vector v = new Vector();
messenger/MSN/MSNProtocol.java:227:		if (s == null) throw new MSNException(             );
messenger/MSN/MSNProtocol.java:230:			cmd = s.substring(0,3);
messenger/MSN/MSNProtocol.java:232:			if (! cmd.equals(     )) {
messenger/MSN/MSNProtocol.java:233:				packet = fFactory.createIncomingPacket(s);
messenger/MSN/MSNProtocol.java:234:				fControlData.setDump(                   + ((MSNPacket)packet).getContent());
messenger/MSN/MSNProtocol.java:237:			if (cmd.equals(     )) {
messenger/MSN/MSNProtocol.java:239:				v.clear();
messenger/MSN/MSNProtocol.java:240:				v.addElement(fTrID);
messenger/MSN/MSNProtocol.java:241:				increaseTrID();
messenger/MSN/MSNProtocol.java:242:				packet = fFactory.createOutgoingPacket(         , v);
messenger/MSN/MSNProtocol.java:243:				sendPacket(packet);
messenger/MSN/MSNProtocol.java:246:			else if (cmd.equals(     )) {
messenger/MSN/MSNProtocol.java:248:				v.clear();
messenger/MSN/MSNProtocol.java:249:				v.addElement(fTrID);
messenger/MSN/MSNProtocol.java:250:				increaseTrID();
messenger/MSN/MSNProtocol.java:251:				v.addElement(     );
messenger/MSN/MSNProtocol.java:252:				v.addElement(getLoginName());
messenger/MSN/MSNProtocol.java:253:				packet = fFactory.createOutgoingPacket(          , v);
messenger/MSN/MSNProtocol.java:254:				sendPacket(packet);
messenger/MSN/MSNProtocol.java:257:			else if (cmd.equals(     )) {
messenger/MSN/MSNProtocol.java:258:				MSNIncomingUSRPacket usr = (MSNIncomingUSRPacket)packet;
messenger/MSN/MSNProtocol.java:259:				String auth = usr.getAuth();
messenger/MSN/MSNProtocol.java:261:				if (auth.equals(    )) {
messenger/MSN/MSNProtocol.java:262:					this.changeStatus(     );					
messenger/MSN/MSNProtocol.java:263:					this.getServerContactList();
messenger/MSN/MSNProtocol.java:264:				} else if (auth.equals(     )) {
messenger/MSN/MSNProtocol.java:265:					v.clear();
messenger/MSN/MSNProtocol.java:266:					v.addElement(fTrID);
messenger/MSN/MSNProtocol.java:267:					increaseTrID();
messenger/MSN/MSNProtocol.java:268:					setEncPasswd(Utils.MD5Encrypt(((MSNIncomingUSRPacket)packet).getHash() + getEncPasswd()));
messenger/MSN/MSNProtocol.java:269:					v.addElement(     );
messenger/MSN/MSNProtocol.java:270:					v.addElement(getEncPasswd());
messenger/MSN/MSNProtocol.java:271:					packet = fFactory.createOutgoingPacket(          , v);
messenger/MSN/MSNProtocol.java:272:					sendPacket(packet);
messenger/MSN/MSNProtocol.java:277:			else if (cmd.equals(     )) {
messenger/MSN/MSNProtocol.java:281:			else if (cmd.equals(     )) {
messenger/MSN/MSNProtocol.java:282:				MSNIncomingNLNPacket p = (MSNIncomingNLNPacket)packet;
messenger/MSN/MSNProtocol.java:283:				String contact = p.getContact();
messenger/MSN/MSNProtocol.java:284:				for (int i = 0; i < fContactList.size(); i++) {
messenger/MSN/MSNProtocol.java:285:					MSNContact msncontact = (MSNContact)fContactList.elementAt(i);
messenger/MSN/MSNProtocol.java:286:					if (msncontact.getLogin().equals(contact)) {
messenger/MSN/MSNProtocol.java:287:						msncontact.setStatus(p.getStatus());
messenger/MSN/MSNProtocol.java:288:						fContactList.setElementAt(msncontact, i);
messenger/MSN/MSNProtocol.java:291:				fControlData.setDump(         );
messenger/MSN/MSNProtocol.java:294:			else if (cmd.equals(     )) {
messenger/MSN/MSNProtocol.java:295:				MSNIncomingFLNPacket p = (MSNIncomingFLNPacket)packet;
messenger/MSN/MSNProtocol.java:296:				String contact = p.getContact();
messenger/MSN/MSNProtocol.java:297:				for (int i = 0; i < fContactList.size(); i++) {
messenger/MSN/MSNProtocol.java:298:					MSNContact msncontact = (MSNContact)fContactList.elementAt(i);
messenger/MSN/MSNProtocol.java:299:					if (msncontact.getLogin().equals(contact)) {
messenger/MSN/MSNProtocol.java:300:						msncontact.setStatus(     );
messenger/MSN/MSNProtocol.java:301:						fContactList.setElementAt(msncontact, i);
messenger/MSN/MSNProtocol.java:304:				fControlData.setDump(         );
messenger/MSN/MSNProtocol.java:307:			else if (cmd.equals(     )) {
messenger/MSN/MSNProtocol.java:308:				MSNIncomingILNPacket p = (MSNIncomingILNPacket)packet;
messenger/MSN/MSNProtocol.java:309:				MSNContact contact = new MSNContact(p.getContact(), p.getContactNick());
messenger/MSN/MSNProtocol.java:310:				contact.setStatus(p.getStatus());
messenger/MSN/MSNProtocol.java:311:				fContactList.add(contact);
messenger/MSN/MSNProtocol.java:312:				fControlData.setDump(                   + contact.getLogin() +      + contact.getNick() +         + contact.getStatus());
messenger/MSN/MSNProtocol.java:315:			else if (cmd.equals(     )) {
messenger/MSN/MSNProtocol.java:319:			else if (cmd.equals(     )) {
messenger/MSN/MSNProtocol.java:320:				MSNIncomingADDPacket p = (MSNIncomingADDPacket)packet;
messenger/MSN/MSNProtocol.java:321:				fControlData.setDump(                   + ((MSNPacket)packet).getContent());
messenger/MSN/MSNProtocol.java:324:			else if (cmd.equals(     )) {
messenger/MSN/MSNProtocol.java:325:				MSNIncomingLSTPacket p = (MSNIncomingLSTPacket)packet;
messenger/MSN/MSNProtocol.java:326:				MSNContact contact = new MSNContact(p.getContact(), p.getContactNick());
messenger/MSN/MSNProtocol.java:330:				for (int i = 0; i < fContactList.size(); i++) {
messenger/MSN/MSNProtocol.java:331:					msncontact = (MSNContact)fContactList.elementAt(i);
messenger/MSN/MSNProtocol.java:332:					if (msncontact.getLogin().equals(contact.getLogin())) {
messenger/MSN/MSNProtocol.java:337:				if (! contactAlreadyAdded) {
messenger/MSN/MSNProtocol.java:338:					contact.setStatus(     );
messenger/MSN/MSNProtocol.java:339:					fContactList.add(contact);
messenger/MSN/MSNProtocol.java:340:					fControlData.setDump(                   + contact.getLogin() +      + contact.getNick() +         + contact.getStatus());
messenger/MSN/MSNProtocol.java:343:				if (p.getNrOfContacts() == p.getTotalNrOfContacts()) {
messenger/MSN/MSNProtocol.java:348:			else if (cmd.equals(     )) {
messenger/MSN/MSNProtocol.java:350:					MSNIncomingRNGPacket rng = (MSNIncomingRNGPacket)packet;
messenger/MSN/MSNProtocol.java:352:					MSNSession session = new MSNSession(getLoginName(), rng.getContact(), rng.getCKI(), fControlData, fFactory);
messenger/MSN/MSNProtocol.java:353:					session.connect(rng.getSwitchBoardIp(), getPort());
messenger/MSN/MSNProtocol.java:355:					session.setupIncomingSession(rng.getSessionID());
messenger/MSN/MSNProtocol.java:357:					fSessionMap.put(rng.getContact(), session);
messenger/MSN/MSNProtocol.java:358:					((MSNSession)fSessionMap.get(rng.getContact())).setListener(this);
messenger/MSN/MSNProtocol.java:359:					((MSNSession)fSessionMap.get(rng.getContact())).start();
messenger/MSN/MSNProtocol.java:360:				} catch (StringIndexOutOfBoundsException e) {
messenger/MSN/MSNProtocol.java:361:					throw new MSNException(                      );
messenger/MSN/MSNProtocol.java:365:			else if (cmd.equals(     )) {
messenger/MSN/MSNProtocol.java:366:				 v = new Vector();
messenger/MSN/MSNProtocol.java:367:				v.addElement(fTrID);
messenger/MSN/MSNProtocol.java:368:				increaseTrID();
messenger/MSN/MSNProtocol.java:369:				v.addElement(((MSNIncomingCHLPacket)packet).getChallenge());
messenger/MSN/MSNProtocol.java:371:				packet = fFactory.createOutgoingPacket(         , v);
messenger/MSN/MSNProtocol.java:372:				sendPacket(packet);
messenger/MSN/MSNProtocol.java:375:			else if (cmd.equals(     )) {
messenger/MSN/MSNProtocol.java:376:				MSNIncomingXFRPacket xfr = (MSNIncomingXFRPacket)packet;
messenger/MSN/MSNProtocol.java:378:				String nf = xfr.getNF();
messenger/MSN/MSNProtocol.java:380:				if (nf.equals(    )) {
messenger/MSN/MSNProtocol.java:381:					String notificationServer = xfr.getIp();
messenger/MSN/MSNProtocol.java:382:					setServer(notificationServer);
messenger/MSN/MSNProtocol.java:383:					this.connect();
messenger/MSN/MSNProtocol.java:385:					fOutToServer =  new PrintWriter(new OutputStreamWriter(getSocket().getOutputStream(),        ));
messenger/MSN/MSNProtocol.java:386:					fInFromServer = new BufferedReader(new InputStreamReader(getSocket().getInputStream(),        ));
messenger/MSN/MSNProtocol.java:388:					v = new Vector();
messenger/MSN/MSNProtocol.java:389:					v.add(fTrID);
messenger/MSN/MSNProtocol.java:390:					increaseTrID();
messenger/MSN/MSNProtocol.java:391:					packet = fFactory.createOutgoingPacket(         , v);
messenger/MSN/MSNProtocol.java:392:					sendPacket(packet);
messenger/MSN/MSNProtocol.java:393:				} else if (nf.equals(    )) {
messenger/MSN/MSNProtocol.java:395:					String switchboardServer = ((MSNIncomingXFRPacket)packet).getIp();
messenger/MSN/MSNProtocol.java:396:					String cki = ((MSNIncomingXFRPacket)packet).getCKI();
messenger/MSN/MSNProtocol.java:398:					MSNSession session = new MSNSession(getLoginName(), fContact, cki, fControlData, fFactory);
messenger/MSN/MSNProtocol.java:399:					session.connect(switchboardServer, getPort());
messenger/MSN/MSNProtocol.java:401:					session.setupOutgoingSession();
messenger/MSN/MSNProtocol.java:403:					fSessionMap.put(fContact, session);
messenger/MSN/MSNProtocol.java:404:					if (fMessage != null) session.sendMessage(fContact, fMessage);		                                        
messenger/MSN/MSNProtocol.java:405:					((MSNSession)fSessionMap.get(fContact)).setListener(this);
messenger/MSN/MSNProtocol.java:406:					((MSNSession)fSessionMap.get(fContact)).start();
messenger/MSN/MSNProtocol.java:410:			else if (cmd.equals(     )) {
messenger/MSN/MSNProtocol.java:411:				MSNIncomingMSGPacket msgpacket = ((MSNIncomingMSGPacket)packet);
messenger/MSN/MSNProtocol.java:412:				String type = msgpacket.getType();
messenger/MSN/MSNProtocol.java:413:				if (type.equals(                          )) {
messenger/MSN/MSNProtocol.java:414:					fControlData.setToUser(       +                              + msgpacket.getNrOfUnreadMsgs());
messenger/MSN/MSNProtocol.java:415:				} else if (type.equals(                   )) {
messenger/MSN/MSNProtocol.java:416:					fControlData.setToUser(       +                    + msgpacket.getFromName());
messenger/MSN/MSNProtocol.java:417:				} else if (type.equals(                        )) {
messenger/MSN/MSNProtocol.java:422:			else if (cmd.equals(     )) {
messenger/MSN/MSNProtocol.java:427:				throw new MSNException(                                     + s);
messenger/MSN/MSNProtocol.java:429:		} catch (StringIndexOutOfBoundsException e) {
messenger/MSN/MSNProtocol.java:430:			throw new MSNException(                            + s +                );
messenger/MSN/MSNProtocol.java:431:		} catch (UnknownPacketException e) {
messenger/MSN/MSNProtocol.java:432:			throw new MSNException(e.getMessage());
messenger/MSN/MSNProtocol.java:433:		} catch (BadArgumentException e) {
messenger/MSN/MSNProtocol.java:434:			throw new MSNException(                            + s);
messenger/MSN/MSNProtocol.java:435:		} catch (MSNException e) {
messenger/MSN/MSNProtocol.java:436:			throw new MSNException(e.getMessage());
messenger/MSN/MSNProtocol.java:437:		} catch (IOException e) {
messenger/MSN/MSNProtocol.java:438:			throw new MSNException(e.getMessage());
messenger/MSN/MSNProtocol.java:439:		}  catch (IncomingNullPacketException e) {
messenger/MSN/MSNProtocol.java:440:			throw new MSNException(e.getMessage());
messenger/MSN/MSNProtocol.java:441:		} catch (TimeOutException e) {
messenger/MSN/MSNProtocol.java:442:			throw new MSNException(e.getMessage());
messenger/MSN/MSNProtocol.java:446:	public void run() {
messenger/MSN/MSNProtocol.java:449:			while (true) {
messenger/MSN/MSNProtocol.java:451:				if ((r = fInFromServer.readLine()) != null) {
messenger/MSN/MSNProtocol.java:453:						String msg = r.substring(0,3);
messenger/MSN/MSNProtocol.java:454:						if (msg.equals(     )) {
messenger/MSN/MSNProtocol.java:455:							r = this.receiveMessagePacket(r);
messenger/MSN/MSNProtocol.java:457:						this.analyzePacket(r);
messenger/MSN/MSNProtocol.java:458:					} catch (IOException e) {
messenger/MSN/MSNProtocol.java:459:						System.out.println(             + e.getMessage()); e.printStackTrace();
messenger/MSN/MSNProtocol.java:464:					sleep(100);
messenger/MSN/MSNProtocol.java:465:				} catch(InterruptedException e) {
messenger/MSN/MSNProtocol.java:470:		} catch (IOException e) {
messenger/MSN/MSNProtocol.java:472:		} catch (Exception e) {
messenger/MSN/MSNProtocol.java:473:			fControlData.setToUser(                   e.getMessage());
messenger/MSN/MSNProtocol.java:478:	public void shutdown() {
messenger/MSN/MSNProtocol.java:480:			if (this.isConnected()) {
messenger/MSN/MSNProtocol.java:481:				IPacket packet = fFactory.createOutgoingPacket(         , null);
messenger/MSN/MSNProtocol.java:482:				sendPacket(packet);
messenger/MSN/MSNProtocol.java:484:				if (! fSessionMap.isEmpty()) {
messenger/MSN/MSNProtocol.java:485:					Collection c = (Collection)fSessionMap.values();
messenger/MSN/MSNProtocol.java:487:					Iterator iterator = c.iterator();
messenger/MSN/MSNProtocol.java:489:					while (iterator.hasNext()) {
messenger/MSN/MSNProtocol.java:490:						MSNSession session = (MSNSession)iterator.next();
messenger/MSN/MSNProtocol.java:491:						session.sendOutMessage();
messenger/MSN/MSNProtocol.java:496:				fContactList = new Vector();
messenger/MSN/MSNProtocol.java:498:				this.interrupt();
messenger/MSN/MSNProtocol.java:499:				disconnect();
messenger/MSN/MSNProtocol.java:502:		catch(Exception e) {
messenger/MSN/MSNProtocol.java:507:	public Vector getContactList() {
messenger/MSN/MSNProtocol.java:511:	public void getServerContactList() throws MSNException {
messenger/MSN/MSNProtocol.java:513:			Vector v = new Vector();
messenger/MSN/MSNProtocol.java:514:			v.add(fTrID);
messenger/MSN/MSNProtocol.java:515:			increaseTrID();
messenger/MSN/MSNProtocol.java:516:			IPacket packet = fFactory.createOutgoingPacket(         , v);
messenger/MSN/MSNProtocol.java:517:			sendPacket(packet);
messenger/MSN/MSNProtocol.java:518:		} catch (BadArgumentException e) {
messenger/MSN/MSNProtocol.java:519:			System.out.println(e.getMessage());
messenger/MSN/MSNProtocol.java:520:		} catch (UnknownPacketException e) {
messenger/MSN/MSNProtocol.java:521:			System.out.println(e.getMessage());
messenger/MSN/MSNProtocol.java:525:	public void changeStatus(String status) {		
messenger/MSN/MSNProtocol.java:527:			Vector v = new Vector();
messenger/MSN/MSNProtocol.java:528:			v.add(fTrID);
messenger/MSN/MSNProtocol.java:529:			increaseTrID();
messenger/MSN/MSNProtocol.java:530:			v.add(status);
messenger/MSN/MSNProtocol.java:531:			IPacket packet = fFactory.createOutgoingPacket(         , v);
messenger/MSN/MSNProtocol.java:532:			sendPacket(packet);
messenger/MSN/MSNProtocol.java:533:		} catch (UnknownPacketException e) {
messenger/MSN/MSNProtocol.java:534:			System.out.println(e.getMessage());
messenger/MSN/MSNProtocol.java:535:		} catch (BadArgumentException e) {
messenger/MSN/MSNProtocol.java:536:			System.out.println(e.getMessage());
messenger/MSN/MSNProtocol.java:541:	public void addContact(String contact, String nick) {
messenger/MSN/MSNProtocol.java:543:			Vector v = new Vector();
messenger/MSN/MSNProtocol.java:544:			v.add(fTrID);
messenger/MSN/MSNProtocol.java:545:			increaseTrID();
messenger/MSN/MSNProtocol.java:546:			v.add(    );
messenger/MSN/MSNProtocol.java:547:			v.add(contact);
messenger/MSN/MSNProtocol.java:548:			IPacket packet = fFactory.createOutgoingPacket(         , v);
messenger/MSN/MSNProtocol.java:549:			sendPacket(packet);
messenger/MSN/MSNProtocol.java:551:			v = new Vector();
messenger/MSN/MSNProtocol.java:552:			v.add(fTrID);
messenger/MSN/MSNProtocol.java:553:			increaseTrID();
messenger/MSN/MSNProtocol.java:554:			v.add(    );
messenger/MSN/MSNProtocol.java:555:			v.add(contact);
messenger/MSN/MSNProtocol.java:556:			packet = fFactory.createOutgoingPacket(         , v);
messenger/MSN/MSNProtocol.java:557:			sendPacket(packet);
messenger/MSN/MSNProtocol.java:558:		} catch (UnknownPacketException e) {
messenger/MSN/MSNProtocol.java:559:			System.out.println(e.getMessage());
messenger/MSN/MSNProtocol.java:560:		} catch (BadArgumentException e) {
messenger/MSN/MSNProtocol.java:561:			System.out.println(e.getMessage());
messenger/MSN/MSNProtocol.java:566:	public void increaseTrID() {
messenger/MSN/MSNProtocol.java:567:		fTrID = new Long(fTrID.longValue() + 1);
messenger/MSN/MSNProtocol.java:570:	public int getNumberOfContacts() {
messenger/MSN/MSNProtocol.java:571:		return fContactList.size();
messenger/MSN/MSNProtocol.java:574:	public void removeSession(String contact) {
messenger/MSN/MSNProtocol.java:575:		fSessionMap.remove(contact);
messenger/MSN/MSNProtocol.java:578:	public boolean contactListRetrieved() {
messenger/MSN/MSNIncomingINFPacket.java:41:	public MSNIncomingINFPacket(String receivedPacket) {
messenger/MSN/MSNIncomingINFPacket.java:42:		super(receivedPacket);
messenger/MSN/MSNIncomingINFPacket.java:44:		fEncryption = (String)tokens.elementAt(2);
messenger/MSN/MSNIncomingINFPacket.java:51:	public String getEncryption() {
messenger/MSN/MSNIncomingCALPacket.java:41:	public MSNIncomingCALPacket(String receivedPacket) {
messenger/MSN/MSNIncomingCALPacket.java:42:		super(receivedPacket);
messenger/MSN/MSNIncomingCALPacket.java:44:		fSessionID = (String)tokens.elementAt(3);
messenger/MSN/MSNIncomingCALPacket.java:51:	public String getSessionID() {
messenger/MSN/MSNIncomingILNPacket.java:43:	public MSNIncomingILNPacket(String receivedPacket) {
messenger/MSN/MSNIncomingILNPacket.java:44:		super(receivedPacket);
messenger/MSN/MSNIncomingILNPacket.java:46:		fStatus = (String)tokens.elementAt(2);
messenger/MSN/MSNIncomingILNPacket.java:47:		fContact = (String)tokens.elementAt(3);
messenger/MSN/MSNIncomingILNPacket.java:48:		fContactNick = (String)tokens.elementAt(4);
messenger/MSN/MSNIncomingILNPacket.java:55:	public String getContact() {
messenger/MSN/MSNIncomingILNPacket.java:63:	public String getStatus() {
messenger/MSN/MSNIncomingILNPacket.java:64:		if (fStatus.equals(     )) {
messenger/MSN/MSNIncomingILNPacket.java:67:		else if (fStatus.equals(     )) {
messenger/MSN/MSNIncomingILNPacket.java:70:		else if (fStatus.equals(     )) {
messenger/MSN/MSNIncomingILNPacket.java:73:		else if (fStatus.equals(     )) {
messenger/MSN/MSNIncomingILNPacket.java:76:		else if (fStatus.equals(     )) {
messenger/MSN/MSNIncomingILNPacket.java:79:		else if (fStatus.equals(     )) {
messenger/MSN/MSNIncomingILNPacket.java:82:		else if (fStatus.equals(     )) {
messenger/MSN/MSNIncomingILNPacket.java:85:		else if (fStatus.equals(     )) {
messenger/MSN/MSNIncomingILNPacket.java:99:	public String getContactNick() {
messenger/MSN/MSNOutgoingMSGPacket.java:53:	public MSNOutgoingMSGPacket(Vector arg) {
messenger/MSN/MSNOutgoingMSGPacket.java:54:		assert arg.size() == 2;
messenger/MSN/MSNOutgoingMSGPacket.java:63:		fTrID		=	(Long)arg.elementAt(0);
messenger/MSN/MSNOutgoingMSGPacket.java:64:		fMessage	=	(String)arg.elementAt(1);
messenger/MSN/MSNOutgoingMSGPacket.java:65:		fLength		=	 fHeader.length() + fMessage.length() - 2;
messenger/MSN/MSNOutgoingMSGPacket.java:67:		setCommand(fCmd);
messenger/MSN/MSNOutgoingMSGPacket.java:68:		setTrID(fTrID);
messenger/MSN/MSNOutgoingMSGPacket.java:69:		addArgument(fAcknowledge);
messenger/MSN/MSNOutgoingMSGPacket.java:70:		addArgument(new Integer(fLength).toString());
messenger/MSN/MSNOutgoingMSGPacket.java:71:		addArgumentNoSpace(fHeader);
messenger/MSN/MSNOutgoingMSGPacket.java:72:		addArgumentNoSpace(fMessage);
messenger/MSN/MSNOutgoingMSGPacket.java:79:	public String getMessage() {
messenger/MSN/MSNPacket.java:45:	public void setCommand(String cmd) {
messenger/MSN/MSNPacket.java:47:		addContent(fCmd);
messenger/MSN/MSNPacket.java:55:	public void addArgument(String arg) {
messenger/MSN/MSNPacket.java:56:		addContent(   );		                                  
messenger/MSN/MSNPacket.java:57:		addContent(arg);
messenger/MSN/MSNPacket.java:64:	public void setTrID(Long trID) {
messenger/MSN/MSNPacket.java:65:		addContent(   );
messenger/MSN/MSNPacket.java:66:		addContent(trID.toString());
messenger/MSN/MSNIncomingUSRPacket.java:42:	public MSNIncomingUSRPacket(String receivedPacket) {
messenger/MSN/MSNIncomingUSRPacket.java:43:		super(receivedPacket);
messenger/MSN/MSNIncomingUSRPacket.java:45:		fHash =	(String)tokens.elementAt(4);
messenger/MSN/MSNIncomingUSRPacket.java:48:	public String getAuth() {
messenger/MSN/MSNIncomingUSRPacket.java:49:		return (String)tokens.elementAt(2);
messenger/MSN/MSNIncomingUSRPacket.java:56:	public String getHash() {
messenger/MSN/MSNIncomingQRYPacket.java:41:	public MSNIncomingQRYPacket(String receivedPacket) {
messenger/MSN/MSNIncomingQRYPacket.java:42:		super(receivedPacket);
messenger/MSN/MSNOutgoingUSRPacket.java:49:	public MSNOutgoingUSRPacket(Vector arg) {
messenger/MSN/MSNOutgoingUSRPacket.java:50:		assert arg.size() == 3;
messenger/MSN/MSNOutgoingUSRPacket.java:53:		fTrID	=	(Long)arg.elementAt(0);
messenger/MSN/MSNOutgoingUSRPacket.java:54:		fLogin	=	(String)arg.elementAt(1);
messenger/MSN/MSNOutgoingUSRPacket.java:55:		fCKI		=	(String)arg.elementAt(2);
messenger/MSN/MSNOutgoingUSRPacket.java:57:		setCommand(fCmd);
messenger/MSN/MSNOutgoingUSRPacket.java:58:		setTrID(fTrID);
messenger/MSN/MSNOutgoingUSRPacket.java:59:		addArgument(fLogin);
messenger/MSN/MSNOutgoingUSRPacket.java:60:		addArgument(fCKI);
messenger/MSN/MSNSessionListener.java:38:	public void removeSession(String contact);
messenger/MSN/MSNIncomingPacket.java:45:	public MSNIncomingPacket(String received) {
messenger/MSN/MSNIncomingPacket.java:46:		StringTokenizer st = new StringTokenizer(received);
messenger/MSN/MSNIncomingPacket.java:47:   		tokens = new Vector();
messenger/MSN/MSNIncomingPacket.java:49:   		while (st.hasMoreTokens()) {
messenger/MSN/MSNIncomingPacket.java:50:    		tokens.add(st.nextToken());
messenger/MSN/MSNIncomingPacket.java:53:		setCommand((String)tokens.elementAt(0));
messenger/MSN/MSNIncomingPacket.java:55:   		for (int i = 1; i < tokens.size(); ++i) {
messenger/MSN/MSNIncomingPacket.java:56:   			addArgument((String)tokens.elementAt(i));
messenger/MSN/MSNIncomingPacket.java:60:	public String getCommand() {
messenger/MSN/MSNIncomingXFRPacket.java:47:	public MSNIncomingXFRPacket(String receivedPacket) {
messenger/MSN/MSNIncomingXFRPacket.java:48:		super(receivedPacket);
messenger/MSN/MSNIncomingXFRPacket.java:50:		fNF					=	(String)tokens.elementAt(2);
messenger/MSN/MSNIncomingXFRPacket.java:51:		fNFIpAndPort	=	(String)tokens.elementAt(3);
messenger/MSN/MSNIncomingXFRPacket.java:53:		int index = fNFIpAndPort.indexOf(   );
messenger/MSN/MSNIncomingXFRPacket.java:54:		fNFIp = fNFIpAndPort.substring(0, index);
messenger/MSN/MSNIncomingXFRPacket.java:55:		fNFPort = (new Integer(fNFIpAndPort.substring(index+1))).intValue();
messenger/MSN/MSNIncomingXFRPacket.java:58:	public String getNF() {
messenger/MSN/MSNIncomingXFRPacket.java:66:	public String getIp() {
messenger/MSN/MSNIncomingXFRPacket.java:74:	public String getCKI() {
messenger/MSN/MSNIncomingXFRPacket.java:75:		return (String)tokens.elementAt(5);
messenger/MSN/MSNIncomingLSTPacket.java:42:	public MSNIncomingLSTPacket(String receivedPacket) {
messenger/MSN/MSNIncomingLSTPacket.java:43:		super(receivedPacket);
messenger/MSN/MSNIncomingLSTPacket.java:45:		fContact = (String)tokens.elementAt(6);
messenger/MSN/MSNIncomingLSTPacket.java:46:		fNick = (String)tokens.elementAt(7);
messenger/MSN/MSNIncomingLSTPacket.java:53:	public String getContact() {
messenger/MSN/MSNIncomingLSTPacket.java:57:	public String getContactNick() {
messenger/MSN/MSNIncomingLSTPacket.java:61:	public int getNrOfContacts() {
messenger/MSN/MSNIncomingLSTPacket.java:62:		return (new Integer((String)tokens.elementAt(4)).intValue());
messenger/MSN/MSNIncomingLSTPacket.java:65:	public int getTotalNrOfContacts() {
messenger/MSN/MSNIncomingLSTPacket.java:66:		return (new Integer((String)tokens.elementAt(5)).intValue());
messenger/MSN/MSNIncomingCHLPacket.java:41:	public MSNIncomingCHLPacket(String receivedPacket) {
messenger/MSN/MSNIncomingCHLPacket.java:42:		super(receivedPacket);
messenger/MSN/MSNIncomingCHLPacket.java:44:		fChallenge = (String)tokens.elementAt(2);
messenger/MSN/MSNIncomingCHLPacket.java:51:	public String getChallenge() {
messenger/MSN/MSNOutgoingQRYPacket.java:48:	public MSNOutgoingQRYPacket(Vector arg) {
messenger/MSN/MSNOutgoingQRYPacket.java:49:		assert arg.size() == 2;
messenger/MSN/MSNOutgoingQRYPacket.java:52:		fTrID = (Long)arg.elementAt(0);
messenger/MSN/MSNOutgoingQRYPacket.java:53:		fHash = (String)arg.elementAt(1);
messenger/MSN/MSNOutgoingQRYPacket.java:54:		fHash = Utils.MD5Encrypt(fHash +                   );
messenger/MSN/MSNOutgoingQRYPacket.java:56:		setCommand(fCmd);
messenger/MSN/MSNOutgoingQRYPacket.java:57:		setTrID(fTrID);
messenger/MSN/MSNOutgoingQRYPacket.java:58:		addArgument(                    );
messenger/MSN/MSNOutgoingQRYPacket.java:59:		addArgument(    );
messenger/MSN/MSNOutgoingQRYPacket.java:60:		addArgument(      );
messenger/MSN/MSNOutgoingQRYPacket.java:61:		addArgumentNoSpace(fHash);
messenger/MSN/MSNIncomingADDPacket.java:40:	public MSNIncomingADDPacket(String receivedPacket) {
messenger/MSN/MSNIncomingADDPacket.java:41:		super(receivedPacket);
messenger/MSN/MSNOutgoingUSRSPacket.java:48:	public MSNOutgoingUSRSPacket(Vector arg) {
messenger/MSN/MSNOutgoingUSRSPacket.java:49:		assert arg.size() == 3;
messenger/MSN/MSNOutgoingUSRSPacket.java:52:		fTrID			=	(Long)arg.elementAt(0);
messenger/MSN/MSNOutgoingUSRSPacket.java:53:		fEncryption	=	(String)arg.elementAt(1);
messenger/MSN/MSNOutgoingUSRSPacket.java:54:		fHash			=	(String)arg.elementAt(2);
messenger/MSN/MSNOutgoingUSRSPacket.java:56:		setCommand(fCmd);
messenger/MSN/MSNOutgoingUSRSPacket.java:57:		setTrID(fTrID);
messenger/MSN/MSNOutgoingUSRSPacket.java:58:		addArgument(fEncryption);
messenger/MSN/MSNOutgoingUSRSPacket.java:59:		addArgument(   );
messenger/MSN/MSNOutgoingUSRSPacket.java:60:		addArgument(fHash);
messenger/MSN/MSNOutgoingPacket.java:41:	public void addArgumentNoSpace(String arg) {
messenger/MSN/MSNOutgoingPacket.java:42:		addContent(arg);
messenger/MSN/MSNPacketFactory.java:47:	public IPacket createOutgoingPacket(String packet, Vector arg) throws UnknownPacketException, BadArgumentException {
messenger/MSN/MSNPacketFactory.java:49:		if(packet.equals(         )) {
messenger/MSN/MSNPacketFactory.java:50:			return new MSNOutgoingVERPacket(arg);
messenger/MSN/MSNPacketFactory.java:52:		else if(packet.equals(         )) {
messenger/MSN/MSNPacketFactory.java:53:			return new MSNOutgoingINFPacket(arg);
messenger/MSN/MSNPacketFactory.java:55:		else if(packet.equals(          )) {
messenger/MSN/MSNPacketFactory.java:56:			return new MSNOutgoingUSRIPacket(arg);
messenger/MSN/MSNPacketFactory.java:58:		else if(packet.equals(          )) {
messenger/MSN/MSNPacketFactory.java:59:			return new MSNOutgoingUSRSPacket(arg);
messenger/MSN/MSNPacketFactory.java:61:		else if(packet.equals(         )) {
messenger/MSN/MSNPacketFactory.java:62:			return new MSNOutgoingCHGPacket(arg);
messenger/MSN/MSNPacketFactory.java:64:		else if(packet.equals(         )) {
messenger/MSN/MSNPacketFactory.java:65:			return new MSNOutgoingMSGPacket(arg);
messenger/MSN/MSNPacketFactory.java:67:		else if(packet.equals(         )) {
messenger/MSN/MSNPacketFactory.java:68:			return new MSNOutgoingXFRPacket(arg);
messenger/MSN/MSNPacketFactory.java:70:		else if(packet.equals(         )) {
messenger/MSN/MSNPacketFactory.java:71:			return new MSNOutgoingUSRPacket(arg);
messenger/MSN/MSNPacketFactory.java:73:		else if(packet.equals(         )) {
messenger/MSN/MSNPacketFactory.java:74:			return new MSNOutgoingCALPacket(arg);
messenger/MSN/MSNPacketFactory.java:76:		else if(packet.equals(         )) {
messenger/MSN/MSNPacketFactory.java:77:			return new MSNOutgoingANSPacket(arg);
messenger/MSN/MSNPacketFactory.java:79:		else if(packet.equals(         )) {
messenger/MSN/MSNPacketFactory.java:80:			return new MSNOutgoingQRYPacket(arg);
messenger/MSN/MSNPacketFactory.java:82:		else if(packet.equals(         )) {
messenger/MSN/MSNPacketFactory.java:83:			return new MSNOutgoingLSTPacket(arg);
messenger/MSN/MSNPacketFactory.java:85:		else if(packet.equals(         )) {
messenger/MSN/MSNPacketFactory.java:86:			return new MSNOutgoingADDPacket(arg);
messenger/MSN/MSNPacketFactory.java:88:		else if(packet.equals(         )) {
messenger/MSN/MSNPacketFactory.java:89:			return new MSNOutgoingOUTPacket(arg);
messenger/MSN/MSNPacketFactory.java:91:		else if(packet.equals(         )) {
messenger/MSN/MSNPacketFactory.java:92:			return new MSNOutgoingBYEPacket(arg);
messenger/MSN/MSNPacketFactory.java:95:	  		 throw new UnknownPacketException(                );
messenger/MSN/MSNPacketFactory.java:102:	public IPacket createIncomingPacket(String receivedPacket) throws UnknownPacketException, IncomingNullPacketException {
messenger/MSN/MSNPacketFactory.java:105:		if (receivedPacket == null) throw new IncomingNullPacketException(                        );
messenger/MSN/MSNPacketFactory.java:108:			cmd = receivedPacket.substring(0,3);
messenger/MSN/MSNPacketFactory.java:109:		} catch (StringIndexOutOfBoundsException e) {
messenger/MSN/MSNPacketFactory.java:110:			throw new UnknownPacketException(                          + receivedPacket);
messenger/MSN/MSNPacketFactory.java:113:		if (((cmd.charAt(0) > 47) && (cmd.charAt(0) < 58))
messenger/MSN/MSNPacketFactory.java:114:				&& ((cmd.charAt(1) > 47) && (cmd.charAt(1) < 58))
messenger/MSN/MSNPacketFactory.java:115:				&& ((cmd.charAt(2) > 47) && (cmd.charAt(2) < 58))) {
messenger/MSN/MSNPacketFactory.java:117:				if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:118:					throw new UnknownPacketException(              );
messenger/MSN/MSNPacketFactory.java:119:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:120:					throw new UnknownPacketException(                   );
messenger/MSN/MSNPacketFactory.java:121:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:122:					throw new UnknownPacketException(              );
messenger/MSN/MSNPacketFactory.java:123:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:124:					throw new UnknownPacketException(                     );
messenger/MSN/MSNPacketFactory.java:125:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:126:					throw new UnknownPacketException(                   );
messenger/MSN/MSNPacketFactory.java:127:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:128:					throw new UnknownPacketException(                  );
messenger/MSN/MSNPacketFactory.java:129:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:130:					throw new UnknownPacketException(                   );
messenger/MSN/MSNPacketFactory.java:131:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:132:					throw new UnknownPacketException(                );
messenger/MSN/MSNPacketFactory.java:133:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:134:					throw new UnknownPacketException(                    );
messenger/MSN/MSNPacketFactory.java:135:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:136:					throw new UnknownPacketException(                      );
messenger/MSN/MSNPacketFactory.java:137:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:138:					throw new UnknownPacketException(                 );
messenger/MSN/MSNPacketFactory.java:139:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:140:					throw new UnknownPacketException(                 );
messenger/MSN/MSNPacketFactory.java:141:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:142:					throw new UnknownPacketException(                              );
messenger/MSN/MSNPacketFactory.java:143:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:144:					throw new UnknownPacketException(                    );
messenger/MSN/MSNPacketFactory.java:145:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:146:					throw new UnknownPacketException(                                );
messenger/MSN/MSNPacketFactory.java:147:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:148:					throw new UnknownPacketException(                        );
messenger/MSN/MSNPacketFactory.java:149:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:150:					throw new UnknownPacketException(               );
messenger/MSN/MSNPacketFactory.java:151:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:152:					throw new UnknownPacketException(                       );
messenger/MSN/MSNPacketFactory.java:153:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:154:					throw new UnknownPacketException(                       );
messenger/MSN/MSNPacketFactory.java:155:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:156:					throw new UnknownPacketException(                       );
messenger/MSN/MSNPacketFactory.java:157:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:158:					throw new UnknownPacketException(                          );
messenger/MSN/MSNPacketFactory.java:159:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:160:					throw new UnknownPacketException(                );
messenger/MSN/MSNPacketFactory.java:161:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:162:					throw new UnknownPacketException(                       );
messenger/MSN/MSNPacketFactory.java:163:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:164:					throw new UnknownPacketException(                         );
messenger/MSN/MSNPacketFactory.java:165:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:166:					throw new UnknownPacketException(                            );
messenger/MSN/MSNPacketFactory.java:167:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:168:					throw new UnknownPacketException(                      );
messenger/MSN/MSNPacketFactory.java:169:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:170:					throw new UnknownPacketException(                             );
messenger/MSN/MSNPacketFactory.java:171:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:172:					throw new UnknownPacketException(                   );
messenger/MSN/MSNPacketFactory.java:173:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:174:					throw new UnknownPacketException(                       );
messenger/MSN/MSNPacketFactory.java:175:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:176:					throw new UnknownPacketException(                       );
messenger/MSN/MSNPacketFactory.java:177:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:178:					throw new UnknownPacketException(                   );
messenger/MSN/MSNPacketFactory.java:179:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:180:					throw new UnknownPacketException(              );
messenger/MSN/MSNPacketFactory.java:181:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:182:					throw new UnknownPacketException(                 );
messenger/MSN/MSNPacketFactory.java:183:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:184:					throw new UnknownPacketException(                       );
messenger/MSN/MSNPacketFactory.java:185:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:186:					throw new UnknownPacketException(                          );
messenger/MSN/MSNPacketFactory.java:187:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:188:					throw new UnknownPacketException(                         );
messenger/MSN/MSNPacketFactory.java:189:				} else if (cmd.equals(     )) {
messenger/MSN/MSNPacketFactory.java:190:					throw new UnknownPacketException(                                   );
messenger/MSN/MSNPacketFactory.java:192:					throw new UnknownPacketException(                          );
messenger/MSN/MSNPacketFactory.java:195:		else if (cmd.equals(     )){
messenger/MSN/MSNPacketFactory.java:196:			return new MSNIncomingVERPacket(receivedPacket);
messenger/MSN/MSNPacketFactory.java:198:		else if (cmd.equals(     )){
messenger/MSN/MSNPacketFactory.java:199:			return new MSNIncomingXFRPacket(receivedPacket);
messenger/MSN/MSNPacketFactory.java:201:		else if (cmd.equals(     )){
messenger/MSN/MSNPacketFactory.java:202:			return new MSNIncomingCHGPacket(receivedPacket);
messenger/MSN/MSNPacketFactory.java:204:		else if (cmd.equals(     )){
messenger/MSN/MSNPacketFactory.java:205:			return new MSNIncomingCHLPacket(receivedPacket);
messenger/MSN/MSNPacketFactory.java:207:		else if (cmd.equals(     )){
messenger/MSN/MSNPacketFactory.java:208:			return new MSNIncomingILNPacket(receivedPacket);
messenger/MSN/MSNPacketFactory.java:210:		else if (cmd.equals(     )){
messenger/MSN/MSNPacketFactory.java:211:			return new MSNIncomingLSTPacket(receivedPacket);
messenger/MSN/MSNPacketFactory.java:213:		else if (cmd.equals(     )){
messenger/MSN/MSNPacketFactory.java:214:			return new MSNIncomingMSGPacket(receivedPacket);
messenger/MSN/MSNPacketFactory.java:216:		else if (cmd.equals(     )){
messenger/MSN/MSNPacketFactory.java:217:			return new MSNIncomingUSRPacket(receivedPacket);
messenger/MSN/MSNPacketFactory.java:219:		else if (cmd.equals(     )) { 
messenger/MSN/MSNPacketFactory.java:220:			return new MSNIncomingINFPacket(receivedPacket);
messenger/MSN/MSNPacketFactory.java:222:		else if (cmd.equals(     )) { 
messenger/MSN/MSNPacketFactory.java:223:			return new MSNIncomingRNGPacket(receivedPacket);
messenger/MSN/MSNPacketFactory.java:225:		else if (cmd.equals(     )) { 
messenger/MSN/MSNPacketFactory.java:226:			return new MSNIncomingQRYPacket(receivedPacket);
messenger/MSN/MSNPacketFactory.java:228:		else if (cmd.equals(     )) { 
messenger/MSN/MSNPacketFactory.java:229:			return new MSNIncomingNLNPacket(receivedPacket);
messenger/MSN/MSNPacketFactory.java:231:		else if (cmd.equals(     )) { 
messenger/MSN/MSNPacketFactory.java:232:			return new MSNIncomingFLNPacket(receivedPacket);
messenger/MSN/MSNPacketFactory.java:234:		else if (cmd.equals(     )) { 
messenger/MSN/MSNPacketFactory.java:235:			return new MSNIncomingADDPacket(receivedPacket);
messenger/MSN/MSNPacketFactory.java:237:		else if (cmd.equals(     )) { 
messenger/MSN/MSNPacketFactory.java:238:			return new MSNIncomingCALPacket(receivedPacket);
messenger/MSN/MSNPacketFactory.java:240:		else if (cmd.equals(     )) { 
messenger/MSN/MSNPacketFactory.java:241:			return new MSNIncomingBPRPacket(receivedPacket);
messenger/MSN/MSNPacketFactory.java:244:			throw new UnknownPacketException(                   + receivedPacket);
messenger/MSN/MSNOutgoingVERPacket.java:51:	public MSNOutgoingVERPacket(Vector arg) {
messenger/MSN/MSNOutgoingVERPacket.java:52:		assert arg.size() == 1;
messenger/MSN/MSNOutgoingVERPacket.java:55:		fTrID	=	(Long)arg.elementAt(0);
messenger/MSN/MSNOutgoingVERPacket.java:57:		setCommand(fCmd);
messenger/MSN/MSNOutgoingVERPacket.java:58:		setTrID(fTrID);
messenger/MSN/MSNOutgoingVERPacket.java:59:		addArgument(fArgument1);
messenger/MSN/MSNOutgoingVERPacket.java:60:		addArgument(fArgument2);
messenger/MSN/MSNOutgoingVERPacket.java:61:		addArgument(fArgument3);
messenger/MSN/MSNOutgoingVERPacket.java:62:		addArgument(fArgument4);
messenger/MSN/MSNOutgoingVERPacket.java:63:		addArgument(fArgument5);
messenger/UnknownContactException.java:39:	public UnknownContactException() {
messenger/UnknownContactException.java:40:		super();
messenger/UnknownContactException.java:47:	public UnknownContactException(String message) {
messenger/UnknownContactException.java:48:		super(message);
messenger/UnknownContactException.java:56:	public UnknownContactException(String message, Throwable cause) {
messenger/UnknownContactException.java:57:		super(message, cause);
messenger/UnknownContactException.java:60:	public UnknownContactException(Throwable cause) {
messenger/UnknownContactException.java:61:		super(cause);
messenger/Mess.java:58:	public Mess() {
messenger/Mess.java:59:		fICQData = new DataBuffer();
messenger/Mess.java:61:		fMSNData = new DataBuffer();
messenger/Mess.java:62:		fYahooData = new DataBuffer();
messenger/Mess.java:63:		v  = new Vector();
messenger/Mess.java:66:		icq = new ICQProtocol(fICQData,                , 5190);                     
messenger/Mess.java:67:		msn = new MSNProtocol(fMSNData,                            ,             ,                       , 1863);                     
messenger/Mess.java:68:		yahoo = new YahooProtocol(fYahooData,                 , 5050); 
messenger/Mess.java:73:		v.addElement(icq);
messenger/Mess.java:74:		v.addElement(msn);
messenger/Mess.java:75:		v.addElement(yahoo);
messenger/Mess.java:78:		mess = new Protocols(v);
messenger/Mess.java:79:		fUpdate = new UpdateUser(fICQData, fMSNData, fYahooData);
messenger/Mess.java:80:		fUpdate.start();
messenger/Mess.java:81:		this.start();
messenger/Mess.java:84:	public void run() {
messenger/Mess.java:85:		BufferedReader console = new BufferedReader(new InputStreamReader(System.in));
messenger/Mess.java:89:		while(!quit) {
messenger/Mess.java:91:				System.out.println(                      );
messenger/Mess.java:92:				r = console.readLine();                                      
messenger/Mess.java:95:				if(r.equals(          )) {                                   
messenger/Mess.java:100:					System.out.println(                                    );
messenger/Mess.java:101:					port = (new Integer((String)console.readLine())).intValue();
messenger/Mess.java:102:					icq.setPort(port);
messenger/Mess.java:104:					System.out.println(                     );
messenger/Mess.java:105:					uin = console.readLine();
messenger/Mess.java:106:					icq.setLoginName(uin);
messenger/Mess.java:109:					System.out.println(                                     );
messenger/Mess.java:110:					passwd = console.readLine();
messenger/Mess.java:111:					icq.setEncPasswd(Utils.ICQEncryptPass(passwd));
messenger/Mess.java:114:						icq.login();
messenger/Mess.java:116:					catch(ICQException e) {
messenger/Mess.java:117:						System.out.println(e.getMessage());
messenger/Mess.java:119:					catch(Exception e) {
messenger/Mess.java:120:						e.printStackTrace();
messenger/Mess.java:124:			else if(r.equals(        )) {
messenger/Mess.java:128:					System.out.println(                                           );
messenger/Mess.java:130:						contact = console.readLine();
messenger/Mess.java:132:					catch(IOException e) {
messenger/Mess.java:135:					System.out.println(                     );
messenger/Mess.java:137:						message = console.readLine();
messenger/Mess.java:139:					catch(IOException e) {
messenger/Mess.java:144:						icq.sendMessage(contact, message);
messenger/Mess.java:146:					catch(ICQException e) {
messenger/Mess.java:147:						System.out.println(e.getMessage());
messenger/Mess.java:150:				} else if(r.equals(           )) {
messenger/Mess.java:153:					System.out.println(                      );
messenger/Mess.java:154:					status = console.readLine();
messenger/Mess.java:156:					icq.changeStatus(status);
messenger/Mess.java:158:				catch(ICQException e) {
messenger/Mess.java:159:					System.out.println(e.getMessage());
messenger/Mess.java:163:			else if(r.equals(                      )) {
messenger/Mess.java:166:				icq.getContactListFromServer();
messenger/Mess.java:169:			else if(r.equals(                    )) {
messenger/Mess.java:172:					icq.retrieveContactList();
messenger/Mess.java:174:				catch(ICQException e) {
messenger/Mess.java:175:					System.out.println(e.getMessage());
messenger/Mess.java:180:			 else if(r.equals(                )) {
messenger/Mess.java:181:					icq.getContactList();
messenger/Mess.java:183:				} else if(r.equals(               )) {
messenger/Mess.java:187:					System.out.println(                                );
messenger/Mess.java:188:					uin = console.readLine();
messenger/Mess.java:190:					icq.addContact(uin);											
messenger/Mess.java:192:			else if(r.equals(            )) {                                     
messenger/Mess.java:197:					System.out.println(                                    );
messenger/Mess.java:198:					port = (new Integer((String)console.readLine())).intValue();
messenger/Mess.java:199:					yahoo.setPort(port);
messenger/Mess.java:201:					System.out.println(                         );
messenger/Mess.java:202:					loginname = console.readLine();
messenger/Mess.java:203:					yahoo.setLoginName(loginname);
messenger/Mess.java:206:					System.out.println(                                       );
messenger/Mess.java:207:					passwd = console.readLine();
messenger/Mess.java:208:					yahoo.setEncPasswd(passwd);
messenger/Mess.java:210:					yahoo.login();
messenger/Mess.java:213:			else if(r.equals(        )) {
messenger/Mess.java:220:				yahoo.setLoginName(user);
messenger/Mess.java:221:				yahoo.setEncPasswd(paswoord);
messenger/Mess.java:222:				yahoo.login();
messenger/Mess.java:224:			else if(r.equals(             )) {
messenger/Mess.java:227:					System.out.println(                        );
messenger/Mess.java:228:					status = console.readLine();
messenger/Mess.java:230:					yahoo.changeStatus(status);
messenger/Mess.java:233:			else if(r.equals(          )) {
messenger/Mess.java:238:					System.out.println(                                    );
messenger/Mess.java:239:					port = (new Integer((String)console.readLine())).intValue();
messenger/Mess.java:241:					System.out.println(                           );
messenger/Mess.java:243:					user = console.readLine();
messenger/Mess.java:245:					System.out.println(                                     );
messenger/Mess.java:246:					paswoord = console.readLine();
messenger/Mess.java:248:					msn.login();
messenger/Mess.java:250:				} else if(r.equals(           )) {
messenger/Mess.java:253:					System.out.println(                );
messenger/Mess.java:254:					status = console.readLine();
messenger/Mess.java:256:					msn.changeStatus(status);
messenger/Mess.java:258:				} else if(r.equals(        )) {
messenger/Mess.java:264:					System.out.println(                                     );
messenger/Mess.java:265:					contact = console.readLine();
messenger/Mess.java:267:					System.out.println(                     );
messenger/Mess.java:268:					message = console.readLine();
messenger/Mess.java:270:					msn.sendMessage(contact, message);
messenger/Mess.java:272:				} else if (r.equals(                )) {
messenger/Mess.java:273:					msn.getServerContactList();
messenger/Mess.java:275:				} else if(r.equals(      )) {
messenger/Mess.java:277:					System.out.println(         );
messenger/Mess.java:279:				} else if(r.equals(        )) {
messenger/Mess.java:281:					System.out.println(          );
messenger/Mess.java:284:			else if(r.equals(      )) {
messenger/Mess.java:286:				System.out.println(         );
messenger/Mess.java:288:			else if(r.equals(        )) {
messenger/Mess.java:290:				System.out.println(          );
messenger/Mess.java:292:			else if(r.equals(      )) {
messenger/Mess.java:293:				System.out.println(                     );
messenger/Mess.java:294:				System.out.println(             );
messenger/Mess.java:295:				System.out.println(           );
messenger/Mess.java:296:				System.out.println(                         );
messenger/Mess.java:297:				System.out.println(                       );
messenger/Mess.java:298:				System.out.println(             );
messenger/Mess.java:299:				System.out.println(              );
messenger/Mess.java:300:				System.out.println(           );
messenger/Mess.java:301:				System.out.println(                );
messenger/Mess.java:302:				System.out.println(                   );
messenger/Mess.java:303:				System.out.println(              );
messenger/Mess.java:304:				System.out.println(         );
messenger/Mess.java:306:			else if(r.equals(      )) {
messenger/Mess.java:316:			catch(IOException e) {
messenger/Mess.java:317:				System.out.println(e.getMessage());	
messenger/Mess.java:318:			} catch (MSNException e) {
messenger/Mess.java:319:				System.out.println(e.getMessage());
messenger/Mess.java:320:			} catch (Exception e) {
messenger/Mess.java:321:				System.out.println(e.getMessage());
messenger/Mess.java:326:				sleep(300);
messenger/Mess.java:328:			catch(InterruptedException e) {
messenger/Mess.java:332:		System.exit(0);
messenger/Mess.java:349:		public UpdateUser(DataBuffer icq,           DataBuffer msn, DataBuffer yahoo) {
messenger/Mess.java:355:		public void run() {
messenger/Mess.java:356:			while(true) {				
messenger/Mess.java:357:				if(fICQData.ExistsUserData()) {
messenger/Mess.java:358:					System.out.print(       );
messenger/Mess.java:359:					System.out.println(fICQData.getToUser());
messenger/Mess.java:361:				if(fICQData.ExistsDump()) {
messenger/Mess.java:362:					String output = fICQData.getDump();
messenger/Mess.java:363:					if(fDump) {
messenger/Mess.java:364:						System.out.println(output);
messenger/Mess.java:367:				if(fYahooData.ExistsUserData()) {
messenger/Mess.java:368:					System.out.print(         );
messenger/Mess.java:369:					System.out.println(fYahooData.getToUser());
messenger/Mess.java:371:				if(fYahooData.ExistsDump()) {
messenger/Mess.java:372:					String output = fYahooData.getDump();
messenger/Mess.java:373:					if(fDump) {
messenger/Mess.java:374:						System.out.println(output);
messenger/Mess.java:377:				if (fMSNData.ExistsUserData()) {
messenger/Mess.java:378:					String s = fMSNData.getToUser();
messenger/Mess.java:379:					if (! s.equals(  )) {
messenger/Mess.java:380:						System.out.println(        + s);
messenger/Mess.java:383:				if (fMSNData.ExistsDump()) {
messenger/Mess.java:384:					String s = fMSNData.getDump();
messenger/Mess.java:385:					if (fDump) {
messenger/Mess.java:386:						if (! s.equals(  )) {
messenger/Mess.java:387:							System.out.println(s);
messenger/Mess.java:392:					sleep(300);
messenger/Mess.java:394:				catch(InterruptedException e) {
messenger/Mess.java:406:	public static void main(String[] args) {
messenger/Mess.java:407:		Mess m = new Mess();
messenger/UnknownAccountException.java:41:	public UnknownAccountException() {
messenger/UnknownAccountException.java:42:		super();
messenger/UnknownAccountException.java:49:	public UnknownAccountException(String message) {
messenger/UnknownAccountException.java:50:		super(message);
messenger/UnknownAccountException.java:58:	public UnknownAccountException(String message, Throwable cause) {
messenger/UnknownAccountException.java:59:		super(message, cause);
messenger/UnknownAccountException.java:62:	public UnknownAccountException(Throwable cause) {
messenger/UnknownAccountException.java:63:		super(cause);
