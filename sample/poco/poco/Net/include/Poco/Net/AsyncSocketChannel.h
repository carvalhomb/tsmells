//
// AsyncSocketChannel.h
//
// $Id: //poco/svn/Net/include/Poco/Net/AsyncSocketChannel.h#2 $
//
// Library: Net
// Package: AsyncIO
// Module:  AsyncSocketChannel
//
// Definition of the AsyncSocketChannel class.
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Net_AsyncSocketChannel_INCLUDED
#define Net_AsyncSocketChannel_INCLUDED


#include "Poco/Net/Net.h"
#include "Poco/Net/StreamSocket.h"
#include "Poco/AsyncIOChannel.h"


namespace Poco {
namespace Net {


class Net_API AsyncSocketChannel: public Poco::AsyncIOChannel
	/// AsyncSocketChannel provides an AsyncIOChannel for a StreamSocket.
	///
	/// Usage Example:
	///     StreamSocket socket(...);
	///     AsyncSocketChannel channel(socket);
	///     channel.enqueue(new AsyncWriteCommand("Hello", 5));
	///     channel.enqueue(new AsyncWriteCommand(", ", 2));
	///     ActiveResult<int> result = channel.enqueue(new AsyncWriteCommand("world!", 6));
	///     result.wait();
{
public:
	AsyncSocketChannel(const StreamSocket& socket);
		/// Creates an AsyncSocketChannel using the given StreamSocket.
		
	~AsyncSocketChannel();
		/// Destroys the AsyncSocketChannel.
	
	// AsyncIOChannel
	int write(const void* buffer, int length);
	int read(void* buffer, int length);
			
private:
	AsyncSocketChannel();
	
	StreamSocket _socket;
};


} } // namespace Poco::Net


#endif // Net_AsyncSocketChannel_INCLUDED
