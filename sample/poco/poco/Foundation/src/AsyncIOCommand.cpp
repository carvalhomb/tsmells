//
// AsyncIOCommand.cpp
//
// $Id: //poco/svn/Foundation/src/AsyncIOCommand.cpp#2 $
//
// Library: Foundation
// Package: AsyncIO
// Module:  AsyncIOCommand
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/AsyncIOCommand.h"
#include "Poco/AsyncIOChannel.h"
#include "Poco/AsyncIOEvent.h"
#include <cstring>


namespace Poco {


//
// AsyncIOCommand
//


AsyncIOCommand::AsyncIOCommand():
	_state(CMD_PENDING),
	_result(0),
	_pException(0)
{
}

	
AsyncIOCommand::~AsyncIOCommand()
{
	delete _pException;
}


void AsyncIOCommand::wait()
{
	_completed.wait();
}


void AsyncIOCommand::wait(long milliseconds)
{
	_completed.wait(milliseconds);
}

	
bool AsyncIOCommand::tryWait(long milliseconds)
{
	return _completed.tryWait(milliseconds);
}


int AsyncIOCommand::execute(AsyncIOChannel& channel)
{
	delete _pException;
	_pException = 0;

	_state = CMD_IN_PROGRESS;
	try
	{
		_result = executeImpl(channel);
		_state = CMD_COMPLETED;
		_completed.set();
		AsyncIOEvent completedEvent(this, &channel, AsyncIOEvent::EV_COMMAND_COMPLETED);
		commandCompleted(this, completedEvent);
		channel.commandCompleted(this, completedEvent);
		return _result;
	}
	catch (Exception& exc)
	{
		_pException = exc.clone();
		_state = CMD_FAILED;
		_completed.set();
		AsyncIOEvent failedEvent(this, &channel, AsyncIOEvent::EV_COMMAND_FAILED);
		commandFailed(this, failedEvent);
		channel.commandFailed(this, failedEvent);
		throw;
	}
	catch (std::exception& exc)
	{
		_pException = new Exception(exc.what());
		_state = CMD_FAILED;
		_completed.set();
		AsyncIOEvent failedEvent(this, &channel, AsyncIOEvent::EV_COMMAND_FAILED);
		commandFailed(this, failedEvent);
		channel.commandFailed(this, failedEvent);
		throw;
	}
	catch (...)
	{
		_pException = new Exception("Unknown exception");
		_state = CMD_FAILED;
		_completed.set();
		AsyncIOEvent failedEvent(this, &channel, AsyncIOEvent::EV_COMMAND_FAILED);
		commandFailed(this, failedEvent);
		channel.commandFailed(this, failedEvent);
		throw;
	}
}


//
// AsyncWriteCommand
//


AsyncWriteCommand::AsyncWriteCommand(const void* buffer, int length):
	_buffer(buffer),
	_length(length)
{
}


AsyncWriteCommand::~AsyncWriteCommand()
{
}


int AsyncWriteCommand::executeImpl(AsyncIOChannel& channel)
{
	return channel.write(_buffer, _length);
}


//
// AsyncBufferedWriteCommand
//


AsyncBufferedWriteCommand::AsyncBufferedWriteCommand(const void* buf, int length):
	AsyncWriteCommand(new char[length], length)
{
	std::memcpy(const_cast<void*>(buffer()), buf, length);
}


AsyncBufferedWriteCommand::~AsyncBufferedWriteCommand()
{
	delete [] reinterpret_cast<const char*>(buffer());
}


//
// AsyncReadCommand
//


AsyncReadCommand::AsyncReadCommand(void* buffer, int length):
	_buffer(buffer),
	_length(length)
{
}


AsyncReadCommand::~AsyncReadCommand()
{
}


int AsyncReadCommand::executeImpl(AsyncIOChannel& channel)
{
	return channel.read(_buffer, _length);
}


//
// AsyncBufferedReadCommand
//


AsyncBufferedReadCommand::AsyncBufferedReadCommand(int length):
	AsyncReadCommand(new char[length], length)
{
}


AsyncBufferedReadCommand::~AsyncBufferedReadCommand()
{
	delete [] reinterpret_cast<char*>(buffer());
}


//
// AsyncSeekCommand
//


AsyncSeekCommand::AsyncSeekCommand(std::streamoff off, std::ios::seekdir dir):
	_off(off),
	_dir(dir)
{
}


AsyncSeekCommand::~AsyncSeekCommand()
{
}


int AsyncSeekCommand::executeImpl(AsyncIOChannel& channel)
{
	return channel.seek(_off, _dir);
}


} // namespace Poco
