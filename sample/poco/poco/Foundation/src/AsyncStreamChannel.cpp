//
// AsyncStreamChannel.cpp
//
// $Id: //poco/svn/Foundation/src/AsyncStreamChannel.cpp#2 $
//
// Library: Foundation
// Package: AsyncIO
// Module:  AsyncStreamChannel
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/AsyncStreamChannel.h"
#include "Poco/Exception.h"


namespace Poco {


AsyncStreamChannel::AsyncStreamChannel(std::istream& istr):
	_pIstr(&istr),
	_pOstr(0)
{
}


AsyncStreamChannel::AsyncStreamChannel(std::ostream& ostr):
	_pIstr(0),
	_pOstr(&ostr)
{
}


AsyncStreamChannel::AsyncStreamChannel(std::iostream& iostr):
	_pIstr(&iostr),
	_pOstr(&iostr)
{
}


AsyncStreamChannel::~AsyncStreamChannel()
{
}


int AsyncStreamChannel::write(const void* buffer, int length)
{
	if (_pOstr)
	{
		_pOstr->write(reinterpret_cast<const char*>(buffer), length);
		return length;
	}
	else throw IOException("Cannot write to an input stream");
}


int AsyncStreamChannel::read(void* buffer, int length)
{
	if (_pIstr)
		return static_cast<int>(_pIstr->read(reinterpret_cast<char*>(buffer), length).gcount());
	else
		throw IOException("Cannot read from an output stream");
}


int AsyncStreamChannel::seek(std::streamoff off, std::ios::seekdir dir)
{
	if (_pIstr)
		_pIstr->seekg(off, dir);
	if (_pOstr)
		_pOstr->seekp(off, dir);
	return 0;
}


} // namespace Poco
