//
// AsyncIOEvent.cpp
//
// $Id: //poco/svn/Foundation/src/AsyncIOEvent.cpp#2 $
//
// Library: Foundation
// Package: AsyncIO
// Module:  AsyncIOEvent
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/AsyncIOEvent.h"
#include "Poco/AsyncIOCommand.h"
#include <algorithm>


namespace Poco {


AsyncIOEvent::AsyncIOEvent(AsyncIOCommand* pCommand, AsyncIOChannel* pChannel, EventKind what):
	_pCommand(pCommand),
	_pChannel(pChannel),
	_what(what)
{
	poco_check_ptr (pCommand);
	poco_check_ptr (pChannel);
	
	_pCommand->duplicate();
}


AsyncIOEvent::AsyncIOEvent(const AsyncIOEvent& event):
	_pCommand(event._pCommand),
	_pChannel(event._pChannel),
	_what(event._what)
{
	_pCommand->duplicate();
}


AsyncIOEvent::~AsyncIOEvent()
{
	_pCommand->release();
}

	
AsyncIOEvent& AsyncIOEvent::operator = (const AsyncIOEvent& event)
{
	AsyncIOEvent tmp(event);
	swap(tmp);
	return *this;
}		


void AsyncIOEvent::swap(AsyncIOEvent& event)
{
	std::swap(_pCommand, event._pCommand);
	std::swap(_pChannel, event._pChannel);
	std::swap(_what, event._what);
}


} // namespace Poco
