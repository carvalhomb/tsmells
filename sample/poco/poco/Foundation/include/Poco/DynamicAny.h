//
// DynamicAny.h
//
// $Id: //poco/svn/Foundation/include/Poco/DynamicAny.h#2 $
//
// Library: Foundation
// Package: Core
// Module:  DynamicAny
//
// Definition of the DynamicAny class.
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Foundation_DynamicAny_INCLUDED
#define Foundation_DynamicAny_INCLUDED


#include "Poco/Foundation.h"
#include "Poco/DynamicAnyHolder.h"
#include <typeinfo>


namespace Poco {


class Foundation_API DynamicAny
	/// DynamicAny allows to store data of different types and to convert between these types transparently.
	/// DynamicAny puts forth the best effort to provide intuitive and reasonable conversion semantics and prevent 
	/// unexpected data loss, particularly when performing narrowing or signedness conversions of numeric data types.
	///
	/// Loss of signedness is not allowed for numeric values. This means that if an attempt is made to convert 
	/// the internal value which is a negative signed integer to an unsigned integer type storage, a RangeException is thrown. 
	/// Overflow is not allowed, so if the internal value is a larger number than the target numeric type size can accomodate, 
	/// a RangeException is thrown.
	///
	/// Precision loss, such as in conversion from floating-point types to integers or from double to float on platforms
	/// where they differ in size (provided internal actual value fits in float min/max range), is allowed.
	/// 
	/// String truncation is allowed -- it is possible to convert between string and character when string length is 
	/// greater than 1. An empty string gets converted to the char '\0', a non-empty string is truncated to the first character. 
	///
	/// Boolean conversion is performed as follows:
	///
	/// A string value "false" (not case sensitive) or "0" can be converted to a boolean value false, any other string 
	/// not being false by the above criteria evaluates to true (e.g: "hi" -> true).
	/// Integer 0 values are false, everything else is true.
	/// Floating point values equal to the minimal FP representation on a given platform are false, everything else is true.
	///
	/// Arithmetic operations with POD types as well as between DynamicAny's are supported, subject to following
	/// limitations:
	/// 
	/// 	- for std::string and const char* values, only '+' and '+=' operations are supported
	/// 
	/// 	- for integral and floating point numeric values, following operations are supported:
	/// 	  '+', '+=', '-', '-=', '*', '*=' , '/' and '/=' 
	///
	/// 	- for integral values, following operations are supported:
	///		  prefix and postfix increment (++) and decement (--)
	/// 
	/// 	- for all other types, InvalidArgumentException is thrown upon attempt of an arithmetic operation
	/// 
	/// A DynamicAny can be created from and converted to a value of any type for which a specialization of 
	/// DynamicAnyHolderImpl is available. For supported types, see DynamicAnyHolder documentation.
{
public:
	DynamicAny();
		/// Creates a DynamicAny holding an int with value 0.

	template <typename T> 
	DynamicAny(const T &val):
		_pHolder(new DynamicAnyHolderImpl<T>(val))
		/// Creates the DynamicAny from the given value.
	{
	}

	DynamicAny(const char* pVal);
		// Convenience constructor for const char* which gets mapped to a std::string internally, i.e. pVal is deep-copied.

	DynamicAny(const DynamicAny& other);
		/// Copy constructor.

	~DynamicAny();
		/// Destroys the DynamicAny.

	void swap(DynamicAny& other);
		/// Swaps the content of the this DynamicAny with the other DynamicAny.

	template <typename T> 
	void convert(T& val) const
		/// Invoke this method to perform a safe conversion.
		///
		/// Example usage:
		///     DynamicAny any("42");
		///     int i;
		///     any.convert(i);
		///
		/// Throws a RangeException if the value does not fit
		/// into the result variable.
		/// Throws a NotImplementedException if conversion is
		/// not available for the given type.
	{
		_pHolder->convert(val);
	}
	
	template <typename T> 
	T convert() const
		/// Invoke this method to perform a safe conversion.
		///
		/// Example usage:
		///     DynamicAny any("42");
		///     int i = any.convert<int>();
		///
		/// Throws a RangeException if the value does not fit
		/// into the result variable.
		/// Throws a NotImplementedException if conversion is
		/// not available for the given type.
	{
		T result;
		_pHolder->convert(result);
		return result;
	}
	
	template <typename T>
	operator T () const
		/// Safe conversion operator for implicit type
		/// conversions.
		///
		/// Throws a RangeException if the value does not fit
		/// into the result variable.
		/// Throws a NotImplementedException if conversion is
		/// not available for the given type.
	{
		T result;
		_pHolder->convert(result);
		return result;
	}

	template <typename T>
	const T& extract() const
		/// Returns a const reference to the actual value.
		///
		/// Must be instantiated with the exact type of
		/// the stored value, otherwise a BadCastException
		/// is thrown.
	{
		DynamicAnyHolderImpl<T>* pHolder = dynamic_cast<DynamicAnyHolderImpl<T>*>(_pHolder);
		if (pHolder)
			return pHolder->value();
		else
			throw BadCastException();
	}

	template <typename T> 
	DynamicAny& operator = (const T& other)
		/// Assignment operator for assigning POD to DynamicAny
	{
		DynamicAny tmp(other);
		swap(tmp);
		return *this;
	}

	DynamicAny& operator = (const DynamicAny& other);
		/// Assignment operator specialization for DynamicAny

	template <typename T> 
	const DynamicAny operator + (const T& other) const
		/// Addition operator for adding POD to DynamicAny
	{
		return convert<T>() + other;
	}

	const DynamicAny operator + (const DynamicAny& other) const;
		/// Addition operator specialization for DynamicAny

	const DynamicAny operator + (const char* other) const;
		/// Addition operator specialization for adding const char* to DynamicAny

	DynamicAny& operator ++ ();
		/// Pre-increment operator

	DynamicAny operator ++ (int);
		/// Post-increment operator

	DynamicAny& operator -- ();
		/// Pre-decrement operator

	DynamicAny operator -- (int);
		/// Post-decrement operator

	template <typename T> 
	DynamicAny& operator += (const T& other)
		/// Addition asignment operator for addition/assignment of POD to DynamicAny.
	{
		return *this = convert<T>() + other;
	}

	DynamicAny& operator += (const DynamicAny& other);
		/// Addition asignment operator specialization for DynamicAny

	DynamicAny& operator += (const char* other);
		/// Addition asignment operator specialization for const char*

	template <typename T> 
	const DynamicAny operator - (const T& other) const
		/// Subtraction operator for subtracting POD from DynamicAny
	{
		return convert<T>() - other;
	}

	const DynamicAny operator - (const DynamicAny& other) const;
		/// Subtraction operator specialization for DynamicAny

	template <typename T> 
	DynamicAny& operator -= (const T& other)
		/// Subtraction asignment operator
	{
		return *this = convert<T>() - other;
	}

	DynamicAny& operator -= (const DynamicAny& other);
		/// Subtraction asignment operator specialization for DynamicAny

	template <typename T> 
	const DynamicAny operator * (const T& other) const
		/// Multiplication operator for multiplying DynamicAny with POD
	{
		return convert<T>() * other;
	}

	const DynamicAny operator * (const DynamicAny& other) const;
		/// Multiplication operator specialization for DynamicAny

	template <typename T> 
	DynamicAny& operator *= (const T& other)
		/// Multiplication asignment operator
	{
		return *this = convert<T>() * other;
	}

	DynamicAny& operator *= (const DynamicAny& other);
		/// Multiplication asignment operator specialization for DynamicAny

	template <typename T> 
	const DynamicAny operator / (const T& other) const
		/// Division operator for dividing DynamicAny with POD
	{
		return convert<T>() / other;
	}

	const DynamicAny operator / (const DynamicAny& other) const;
		/// Division operator specialization for DynamicAny

	template <typename T> 
	DynamicAny& operator /= (const T& other)
		/// Division asignment operator
	{
		return *this = convert<T>() / other;
	}

	DynamicAny& operator /= (const DynamicAny& other);
		/// Division asignment operator specialization for DynamicAny

	template <typename T> 
	bool operator == (const T& other) const
		/// Equality operator
	{
		return convert<T>() == other;
	}

	bool operator == (const char* other) const;
		/// Equality operator specialization for const char*

	bool operator == (const DynamicAny& other) const;
		/// Equality operator specialization for DynamicAny

	template <typename T> 
	bool operator != (const T& other) const
		/// Inequality operator
	{
		return convert<T>() != other;
	}

	bool operator != (const DynamicAny& other) const;
		/// Inequality operator  specialization for DynamicAny

	bool operator != (const char* other) const;
		/// Inequality operator  specialization for const char*

	template <typename T> 
	bool operator < (const T& other) const
		/// Less than operator
	{
		return convert<T>() < other;
	}

	template <typename T> 
	bool operator <= (const T& other) const
		/// Less than or equal operator
	{
		return convert<T>() <= other;
	}

	template <typename T> 
	bool operator > (const T& other) const
		/// Greater than operator
	{
		return convert<T>() > other;
	}

	template <typename T> 
	bool operator >= (const T& other) const
		/// Greater than or equal operator
	{
		return convert<T>() >= other;
	}

	bool isArray() const;
		/// Returns true if DynamicAny represents a vector

	bool isStruct() const;
		/// Returns true if DynamicAny represents a struct

	template <typename T>
	DynamicAny& operator [] (T n)
		/// Index operator, only use on DynamicAnys where isArray
		/// returns true! In all other cases a BadCastException is thrown!
	{
		DynamicAnyHolderImpl<std::vector<DynamicAny> >* pHolder =
			dynamic_cast<DynamicAnyHolderImpl<std::vector<DynamicAny> > *>(_pHolder);
		if (pHolder)
			return pHolder->operator[](n);
		else
			throw BadCastException();
	}

	template <typename T>
	const DynamicAny& operator [] (T n) const
		/// const Index operator, only use on DynamicAnys where isArray
		/// returns true! In all other cases a BadCastException is thrown!
	{
		const DynamicAnyHolderImpl<std::vector<DynamicAny> >* pHolder =
			dynamic_cast<const DynamicAnyHolderImpl<std::vector<DynamicAny> > *>(_pHolder);
		if (pHolder)
			return pHolder->operator[](n);
		else
			throw BadCastException();
	}

	DynamicAny& operator [] (const std::string& name);
		/// Index operator by name, only use on DynamicAnys where isStruct
		/// returns true! In all other cases a BadCastException is thrown!

	const DynamicAny& operator [] (const std::string& name) const;
		/// Index operator by name, only use on DynamicAnys where isStruct
		/// returns true! In all other cases a BadCastException is thrown!

	DynamicAny& operator [] (const char* name);
		/// Index operator by name, only use on DynamicAnys where isStruct
		/// returns true! In all other cases a BadCastException is thrown!

	const DynamicAny& operator [] (const char* name) const;
		/// Index operator by name, only use on DynamicAnys where isStruct
		/// returns true! In all other cases a BadCastException is thrown!

	const std::type_info& type() const;
		/// Returns the type information of the stored content.

	bool isInteger() const;
		/// Returns true if stored value is integer.

	bool isSigned() const;
		/// Returns true if stored value is signed.

	bool isNumeric() const;
		/// Returns true if stored value is numeric.
		/// Returns false for numeric strings (e.g. "123" is string, not number)

	bool isString() const;
		/// Returns true if stored value is std::string.

	static DynamicAny parse(const std::string& val);
		/// Parses the string which must be in JSON format

	static std::string toString(const DynamicAny& any);
		/// Converts the DynamicAny to a string in JSON format. Note that toString will return
		/// a different result than any.convert<std::string>()!
	
private:
	static DynamicAny parse(const std::string& val, std::string::size_type& offset);
		/// Parses the string which must be in JSON format

	static DynamicAny parseObject(const std::string& val, std::string::size_type& pos);
	static DynamicAny parseArray(const std::string& val, std::string::size_type& pos);
	static std::string parseString(const std::string& val, std::string::size_type& pos);
	static void skipWhiteSpace(const std::string& val, std::string::size_type& pos);

	template <typename T>
	T add(const DynamicAny& other) const
	{
		return convert<T>() + other.convert<T>();
	}

	template <typename T>
	T subtract(const DynamicAny& other) const
	{
		return convert<T>() - other.convert<T>();
	}
	
	template <typename T>
	T multiply(const DynamicAny& other) const
	{
		return convert<T>() * other.convert<T>();
	}

	template <typename T>
	T divide(const DynamicAny& other) const
	{
		return convert<T>() / other.convert<T>();
	}

	DynamicAnyHolder* _pHolder;
};


///
/// inlines
///


///
/// DynamicAny members
///

inline void DynamicAny::swap(DynamicAny& ptr)
{
	std::swap(_pHolder, ptr._pHolder);
}


inline const std::type_info& DynamicAny::type() const
{
	return _pHolder->type();
}


inline DynamicAny& DynamicAny::operator [] (const char* name)
{
	return operator [] (std::string(name));
}


inline const DynamicAny& DynamicAny::operator [] (const char* name) const
{
	return operator [] (std::string(name));
}


inline const DynamicAny DynamicAny::operator + (const char* other) const
{
	return convert<std::string>() + other;
}


inline DynamicAny& DynamicAny::operator += (const char*other)
{
	return *this = convert<std::string>() + other;
}


inline bool DynamicAny::operator == (const DynamicAny& other) const
{
	return convert<std::string>() == other.convert<std::string>();
}


inline bool DynamicAny::operator == (const char* other) const
{
	return convert<std::string>() == other;
}


inline bool DynamicAny::operator != (const DynamicAny& other) const
{
	return convert<std::string>() != other.convert<std::string>();
}


inline bool DynamicAny::operator != (const char* other) const
{
	return convert<std::string>() != other;
}


inline bool DynamicAny::isArray() const
{
	return _pHolder->isArray();
}


inline bool DynamicAny::isStruct() const
{
	return _pHolder->isStruct();
}


inline bool DynamicAny::isInteger() const
{
	return _pHolder->isInteger();
}


inline bool DynamicAny::isSigned() const
{
	return _pHolder->isSigned();
}


inline bool DynamicAny::isNumeric() const
{
	return _pHolder->isNumeric();
}


inline bool DynamicAny::isString() const
{
	return _pHolder->isString();
}


///
/// DynamicAny non-member functions
///

inline const DynamicAny operator + (const char* other, const DynamicAny& da)
	/// Addition operator for adding DynamicAny to const char*
{
	std::string tmp = other;
	return tmp + da.convert<std::string>();
}


inline const char operator + (const char& other, const DynamicAny& da)
	/// Addition operator for adding DynamicAny to char
{
	return other + da.convert<char>();
}


inline const char operator - (const char& other, const DynamicAny& da)
	/// Subtraction operator for subtracting DynamicAny from char
{
	return other - da.convert<char>();
}


inline const char operator * (const char& other, const DynamicAny& da)
	/// Multiplication operator for multiplying DynamicAny with char
{
	return other * da.convert<char>();
}


inline const char operator / (const char& other, const DynamicAny& da)
	/// Division operator for dividing DynamicAny with char
{
	return other / da.convert<char>();
}


inline char operator += (char& other, const DynamicAny& da)
	/// Addition asignment operator for adding DynamicAny to char
{
	return other += da.convert<char>();
}


inline char operator -= (char& other, const DynamicAny& da)
	/// Subtraction asignment operator for subtracting DynamicAny from char
{
	return other -= da.convert<char>();
}


inline char operator *= (char& other, const DynamicAny& da)
	/// Multiplication asignment operator for multiplying DynamicAny with char
{
	return other *= da.convert<char>();
}


inline char operator /= (char& other, const DynamicAny& da)
	/// Division asignment operator for dividing DynamicAny with char
{
	return other /= da.convert<char>();
}


inline const bool operator == (const char& other, const DynamicAny& da)
	/// Equality operator for comparing DynamicAny with char
{
	return other == da.convert<char>();
}


inline const bool operator != (const char& other, const DynamicAny& da)
	/// Inequality operator for comparing DynamicAny with char
{
	return other != da.convert<char>();
}


inline const bool operator < (const char& other, const DynamicAny& da)
	/// Less than operator for comparing DynamicAny with char
{
	return other < da.convert<char>();
}


inline const bool operator <= (const char& other, const DynamicAny& da)
	/// Less than or equal operator for comparing DynamicAny with char
{
	return other <= da.convert<char>();
}


inline const bool operator > (const char& other, const DynamicAny& da)
	/// Greater than operator for comparing DynamicAny with char
{
	return other > da.convert<char>();
}


inline const bool operator >= (const char& other, const DynamicAny& da)
	/// Greater than or equal operator for comparing DynamicAny with char
{
	return other >= da.convert<char>();
}


inline const Poco::Int8 operator + (const Poco::Int8& other, const DynamicAny& da)
	/// Addition operator for adding DynamicAny to Poco::Int8
{
	return other + da.convert<Poco::Int8>();
}


inline const Poco::Int8 operator - (const Poco::Int8& other, const DynamicAny& da)
	/// Subtraction operator for subtracting DynamicAny from Poco::Int8
{
	return other - da.convert<Poco::Int8>();
}


inline const Poco::Int8 operator * (const Poco::Int8& other, const DynamicAny& da)
	/// Multiplication operator for multiplying DynamicAny with Poco::Int8
{
	return other * da.convert<Poco::Int8>();
}


inline const Poco::Int8 operator / (const Poco::Int8& other, const DynamicAny& da)
	/// Division operator for dividing DynamicAny with Poco::Int8
{
	return other / da.convert<Poco::Int8>();
}


inline Poco::Int8 operator += (Poco::Int8& other, const DynamicAny& da)
	/// Addition asignment operator for adding DynamicAny to Poco::Int8
{
	return other += da.convert<Poco::Int8>();
}


inline Poco::Int8 operator -= (Poco::Int8& other, const DynamicAny& da)
	/// Subtraction asignment operator for subtracting DynamicAny from Poco::Int8
{
	return other -= da.convert<Poco::Int8>();
}


inline Poco::Int8 operator *= (Poco::Int8& other, const DynamicAny& da)
	/// Multiplication asignment operator for multiplying DynamicAny with Poco::Int8
{
	return other *= da.convert<Poco::Int8>();
}


inline Poco::Int8 operator /= (Poco::Int8& other, const DynamicAny& da)
	/// Division asignment operator for dividing DynamicAny with Poco::Int8
{
	return other /= da.convert<Poco::Int8>();
}


inline const bool operator == (const Poco::Int8& other, const DynamicAny& da)
	/// Equality operator for comparing DynamicAny with Poco::Int8
{
	return other == da.convert<Poco::Int8>();
}


inline const bool operator != (const Poco::Int8& other, const DynamicAny& da)
	/// Inequality operator for comparing DynamicAny with Poco::Int8
{
	return other != da.convert<Poco::Int8>();
}


inline const bool operator < (const Poco::Int8& other, const DynamicAny& da)
	/// Less than operator for comparing DynamicAny with Poco::Int8
{
	return other < da.convert<Poco::Int8>();
}


inline const bool operator <= (const Poco::Int8& other, const DynamicAny& da)
	/// Less than or equal operator for comparing DynamicAny with Poco::Int8
{
	return other <= da.convert<Poco::Int8>();
}


inline const bool operator > (const Poco::Int8& other, const DynamicAny& da)
	/// Greater than operator for comparing DynamicAny with Poco::Int8
{
	return other > da.convert<Poco::Int8>();
}


inline const bool operator >= (const Poco::Int8& other, const DynamicAny& da)
	/// Greater than or equal operator for comparing DynamicAny with Poco::Int8
{
	return other >= da.convert<Poco::Int8>();
}


inline const Poco::UInt8 operator + (const Poco::UInt8& other, const DynamicAny& da)
	/// Addition operator for adding DynamicAny to Poco::UInt8
{
	return other + da.convert<Poco::UInt8>();
}


inline const Poco::UInt8 operator - (const Poco::UInt8& other, const DynamicAny& da)
	/// Subtraction operator for subtracting DynamicAny from Poco::UInt8
{
	return other - da.convert<Poco::UInt8>();
}


inline const Poco::UInt8 operator * (const Poco::UInt8& other, const DynamicAny& da)
	/// Multiplication operator for multiplying DynamicAny with Poco::UInt8
{
	return other * da.convert<Poco::UInt8>();
}


inline const Poco::UInt8 operator / (const Poco::UInt8& other, const DynamicAny& da)
	/// Division operator for dividing DynamicAny with Poco::UInt8
{
	return other / da.convert<Poco::UInt8>();
}


inline Poco::UInt8 operator += (Poco::UInt8& other, const DynamicAny& da)
	/// Addition asignment operator for adding DynamicAny to Poco::UInt8
{
	return other += da.convert<Poco::UInt8>();
}


inline Poco::UInt8 operator -= (Poco::UInt8& other, const DynamicAny& da)
	/// Subtraction asignment operator for subtracting DynamicAny from Poco::UInt8
{
	return other -= da.convert<Poco::UInt8>();
}


inline Poco::UInt8 operator *= (Poco::UInt8& other, const DynamicAny& da)
	/// Multiplication asignment operator for multiplying DynamicAny with Poco::UInt8
{
	return other *= da.convert<Poco::UInt8>();
}


inline Poco::UInt8 operator /= (Poco::UInt8& other, const DynamicAny& da)
	/// Division asignment operator for dividing DynamicAny with Poco::UInt8
{
	return other /= da.convert<Poco::UInt8>();
}


inline const bool operator == (const Poco::UInt8& other, const DynamicAny& da)
	/// Equality operator for comparing DynamicAny with Poco::UInt8
{
	return other == da.convert<Poco::UInt8>();
}


inline const bool operator != (const Poco::UInt8& other, const DynamicAny& da)
	/// Inequality operator for comparing DynamicAny with Poco::UInt8
{
	return other != da.convert<Poco::UInt8>();
}


inline const bool operator < (const Poco::UInt8& other, const DynamicAny& da)
	/// Less than operator for comparing DynamicAny with Poco::UInt8
{
	return other < da.convert<Poco::UInt8>();
}


inline const bool operator <= (const Poco::UInt8& other, const DynamicAny& da)
	/// Less than or equal operator for comparing DynamicAny with Poco::UInt8
{
	return other <= da.convert<Poco::UInt8>();
}


inline const bool operator > (const Poco::UInt8& other, const DynamicAny& da)
	/// Greater than operator for comparing DynamicAny with Poco::UInt8
{
	return other > da.convert<Poco::UInt8>();
}


inline const bool operator >= (const Poco::UInt8& other, const DynamicAny& da)
	/// Greater than or equal operator for comparing DynamicAny with Poco::UInt8
{
	return other >= da.convert<Poco::UInt8>();
}


inline const Poco::Int16 operator + (const Poco::Int16& other, const DynamicAny& da)
	/// Addition operator for adding DynamicAny to Poco::Int16
{
	return other + da.convert<Poco::Int16>();
}


inline const Poco::Int16 operator - (const Poco::Int16& other, const DynamicAny& da)
	/// Subtraction operator for subtracting DynamicAny from Poco::Int16
{
	return other - da.convert<Poco::Int16>();
}


inline const Poco::Int16 operator * (const Poco::Int16& other, const DynamicAny& da)
	/// Multiplication operator for multiplying DynamicAny with Poco::Int16
{
	return other * da.convert<Poco::Int16>();
}


inline const Poco::Int16 operator / (const Poco::Int16& other, const DynamicAny& da)
	/// Division operator for dividing DynamicAny with Poco::Int16
{
	return other / da.convert<Poco::Int16>();
}


inline Poco::Int16 operator += (Poco::Int16& other, const DynamicAny& da)
	/// Addition asignment operator for adding DynamicAny to Poco::Int16
{
	return other += da.convert<Poco::Int16>();
}


inline Poco::Int16 operator -= (Poco::Int16& other, const DynamicAny& da)
	/// Subtraction asignment operator for subtracting DynamicAny from Poco::Int16
{
	return other -= da.convert<Poco::Int16>();
}


inline Poco::Int16 operator *= (Poco::Int16& other, const DynamicAny& da)
	/// Multiplication asignment operator for multiplying DynamicAny with Poco::Int16
{
	return other *= da.convert<Poco::Int16>();
}


inline Poco::Int16 operator /= (Poco::Int16& other, const DynamicAny& da)
	/// Division asignment operator for dividing DynamicAny with Poco::Int16
{
	return other /= da.convert<Poco::Int16>();
}


inline const bool operator == (const Poco::Int16& other, const DynamicAny& da)
	/// Equality operator for comparing DynamicAny with Poco::Int16
{
	return other == da.convert<Poco::Int16>();
}


inline const bool operator != (const Poco::Int16& other, const DynamicAny& da)
	/// Inequality operator for comparing DynamicAny with Poco::Int16
{
	return other != da.convert<Poco::Int16>();
}


inline const bool operator < (const Poco::Int16& other, const DynamicAny& da)
	/// Less than operator for comparing DynamicAny with Poco::Int16
{
	return other < da.convert<Poco::Int16>();
}


inline const bool operator <= (const Poco::Int16& other, const DynamicAny& da)
	/// Less than or equal operator for comparing DynamicAny with Poco::Int16
{
	return other <= da.convert<Poco::Int16>();
}


inline const bool operator > (const Poco::Int16& other, const DynamicAny& da)
	/// Greater than operator for comparing DynamicAny with Poco::Int16
{
	return other > da.convert<Poco::Int16>();
}


inline const bool operator >= (const Poco::Int16& other, const DynamicAny& da)
	/// Greater than or equal operator for comparing DynamicAny with Poco::Int16
{
	return other >= da.convert<Poco::Int16>();
}


inline const Poco::UInt16 operator + (const Poco::UInt16& other, const DynamicAny& da)
	/// Addition operator for adding DynamicAny to Poco::UInt16
{
	return other + da.convert<Poco::UInt16>();
}


inline const Poco::UInt16 operator - (const Poco::UInt16& other, const DynamicAny& da)
	/// Subtraction operator for subtracting DynamicAny from Poco::UInt16
{
	return other - da.convert<Poco::UInt16>();
}


inline const Poco::UInt16 operator * (const Poco::UInt16& other, const DynamicAny& da)
	/// Multiplication operator for multiplying DynamicAny with Poco::UInt16
{
	return other * da.convert<Poco::UInt16>();
}


inline const Poco::UInt16 operator / (const Poco::UInt16& other, const DynamicAny& da)
	/// Division operator for dividing DynamicAny with Poco::UInt16
{
	return other / da.convert<Poco::UInt16>();
}


inline Poco::UInt16 operator += (Poco::UInt16& other, const DynamicAny& da)
	/// Addition asignment operator for adding DynamicAny to Poco::UInt16
{
	return other += da.convert<Poco::UInt16>();
}


inline Poco::UInt16 operator -= (Poco::UInt16& other, const DynamicAny& da)
	/// Subtraction asignment operator for subtracting DynamicAny from Poco::UInt16
{
	return other -= da.convert<Poco::UInt16>();
}


inline Poco::UInt16 operator *= (Poco::UInt16& other, const DynamicAny& da)
	/// Multiplication asignment operator for multiplying DynamicAny with Poco::UInt16
{
	return other *= da.convert<Poco::UInt16>();
}


inline Poco::UInt16 operator /= (Poco::UInt16& other, const DynamicAny& da)
	/// Division asignment operator for dividing DynamicAny with Poco::UInt16
{
	return other /= da.convert<Poco::UInt16>();
}


inline const bool operator == (const Poco::UInt16& other, const DynamicAny& da)
	/// Equality operator for comparing DynamicAny with Poco::UInt16
{
	return other == da.convert<Poco::UInt16>();
}


inline const bool operator != (const Poco::UInt16& other, const DynamicAny& da)
	/// Inequality operator for comparing DynamicAny with Poco::UInt16
{
	return other != da.convert<Poco::UInt16>();
}


inline const bool operator < (const Poco::UInt16& other, const DynamicAny& da)
	/// Less than operator for comparing DynamicAny with Poco::UInt16
{
	return other < da.convert<Poco::UInt16>();
}


inline const bool operator <= (const Poco::UInt16& other, const DynamicAny& da)
	/// Less than or equal operator for comparing DynamicAny with Poco::UInt16
{
	return other <= da.convert<Poco::UInt16>();
}


inline const bool operator > (const Poco::UInt16& other, const DynamicAny& da)
	/// Greater than operator for comparing DynamicAny with Poco::UInt16
{
	return other > da.convert<Poco::UInt16>();
}


inline const bool operator >= (const Poco::UInt16& other, const DynamicAny& da)
	/// Greater than or equal operator for comparing DynamicAny with Poco::UInt16
{
	return other >= da.convert<Poco::UInt16>();
}


inline const Poco::Int32 operator + (const Poco::Int32& other, const DynamicAny& da)
	/// Addition operator for adding DynamicAny to Poco::Int32
{
	return other + da.convert<Poco::Int32>();
}


inline const Poco::Int32 operator - (const Poco::Int32& other, const DynamicAny& da)
	/// Subtraction operator for subtracting DynamicAny from Poco::Int32
{
	return other - da.convert<Poco::Int32>();
}


inline const Poco::Int32 operator * (const Poco::Int32& other, const DynamicAny& da)
	/// Multiplication operator for multiplying DynamicAny with Poco::Int32
{
	return other * da.convert<Poco::Int32>();
}


inline const Poco::Int32 operator / (const Poco::Int32& other, const DynamicAny& da)
	/// Division operator for dividing DynamicAny with Poco::Int32
{
	return other / da.convert<Poco::Int32>();
}


inline Poco::Int32 operator += (Poco::Int32& other, const DynamicAny& da)
	/// Addition asignment operator for adding DynamicAny to Poco::Int32
{
	return other += da.convert<Poco::Int32>();
}


inline Poco::Int32 operator -= (Poco::Int32& other, const DynamicAny& da)
	/// Subtraction asignment operator for subtracting DynamicAny from Poco::Int32
{
	return other -= da.convert<Poco::Int32>();
}


inline Poco::Int32 operator *= (Poco::Int32& other, const DynamicAny& da)
	/// Multiplication asignment operator for multiplying DynamicAny with Poco::Int32
{
	return other *= da.convert<Poco::Int32>();
}


inline Poco::Int32 operator /= (Poco::Int32& other, const DynamicAny& da)
	/// Division asignment operator for dividing DynamicAny with Poco::Int32
{
	return other /= da.convert<Poco::Int32>();
}


inline const bool operator == (const Poco::Int32& other, const DynamicAny& da)
	/// Equality operator for comparing DynamicAny with Poco::Int32
{
	return other == da.convert<Poco::Int32>();
}


inline const bool operator != (const Poco::Int32& other, const DynamicAny& da)
	/// Inequality operator for comparing DynamicAny with Poco::Int32
{
	return other != da.convert<Poco::Int32>();
}


inline const bool operator < (const Poco::Int32& other, const DynamicAny& da)
	/// Less than operator for comparing DynamicAny with Poco::Int32
{
	return other < da.convert<Poco::Int32>();
}


inline const bool operator <= (const Poco::Int32& other, const DynamicAny& da)
	/// Less than or equal operator for comparing DynamicAny with Poco::Int32
{
	return other <= da.convert<Poco::Int32>();
}


inline const bool operator > (const Poco::Int32& other, const DynamicAny& da)
	/// Greater than operator for comparing DynamicAny with Poco::Int32
{
	return other > da.convert<Poco::Int32>();
}


inline const bool operator >= (const Poco::Int32& other, const DynamicAny& da)
	/// Greater than or equal operator for comparing DynamicAny with Poco::Int32
{
	return other >= da.convert<Poco::Int32>();
}


inline const Poco::UInt32 operator + (const Poco::UInt32& other, const DynamicAny& da)
	/// Addition operator for adding DynamicAny to Poco::UInt32
{
	return other + da.convert<Poco::UInt32>();
}


inline const Poco::UInt32 operator - (const Poco::UInt32& other, const DynamicAny& da)
	/// Subtraction operator for subtracting DynamicAny from Poco::UInt32
{
	return other - da.convert<Poco::UInt32>();
}


inline const Poco::UInt32 operator * (const Poco::UInt32& other, const DynamicAny& da)
	/// Multiplication operator for multiplying DynamicAny with Poco::UInt32
{
	return other * da.convert<Poco::UInt32>();
}


inline const Poco::UInt32 operator / (const Poco::UInt32& other, const DynamicAny& da)
	/// Division operator for dividing DynamicAny with Poco::UInt32
{
	return other / da.convert<Poco::UInt32>();
}


inline Poco::UInt32 operator += (Poco::UInt32& other, const DynamicAny& da)
	/// Addition asignment operator for adding DynamicAny to Poco::UInt32
{
	return other += da.convert<Poco::UInt32>();
}


inline Poco::UInt32 operator -= (Poco::UInt32& other, const DynamicAny& da)
	/// Subtraction asignment operator for subtracting DynamicAny from Poco::UInt32
{
	return other -= da.convert<Poco::UInt32>();
}


inline Poco::UInt32 operator *= (Poco::UInt32& other, const DynamicAny& da)
	/// Multiplication asignment operator for multiplying DynamicAny with Poco::UInt32
{
	return other *= da.convert<Poco::UInt32>();
}


inline Poco::UInt32 operator /= (Poco::UInt32& other, const DynamicAny& da)
	/// Division asignment operator for dividing DynamicAny with Poco::UInt32
{
	return other /= da.convert<Poco::UInt32>();
}


inline const bool operator == (const Poco::UInt32& other, const DynamicAny& da)
	/// Equality operator for comparing DynamicAny with Poco::UInt32
{
	return other == da.convert<Poco::UInt32>();
}


inline const bool operator != (const Poco::UInt32& other, const DynamicAny& da)
	/// Inequality operator for comparing DynamicAny with Poco::UInt32
{
	return other != da.convert<Poco::UInt32>();
}


inline const bool operator < (const Poco::UInt32& other, const DynamicAny& da)
	/// Less than operator for comparing DynamicAny with Poco::UInt32
{
	return other < da.convert<Poco::UInt32>();
}


inline const bool operator <= (const Poco::UInt32& other, const DynamicAny& da)
	/// Less than or equal operator for comparing DynamicAny with Poco::UInt32
{
	return other <= da.convert<Poco::UInt32>();
}


inline const bool operator > (const Poco::UInt32& other, const DynamicAny& da)
	/// Greater than operator for comparing DynamicAny with Poco::UInt32
{
	return other > da.convert<Poco::UInt32>();
}


inline const bool operator >= (const Poco::UInt32& other, const DynamicAny& da)
	/// Greater than or equal operator for comparing DynamicAny with Poco::UInt32
{
	return other >= da.convert<Poco::UInt32>();
}


inline const Poco::Int64 operator + (const Poco::Int64& other, const DynamicAny& da)
	/// Addition operator for adding DynamicAny to Poco::Int64
{
	return other + da.convert<Poco::Int64>();
}


inline const Poco::Int64 operator - (const Poco::Int64& other, const DynamicAny& da)
	/// Subtraction operator for subtracting DynamicAny from Poco::Int64
{
	return other - da.convert<Poco::Int64>();
}


inline const Poco::Int64 operator * (const Poco::Int64& other, const DynamicAny& da)
	/// Multiplication operator for multiplying DynamicAny with Poco::Int64
{
	return other * da.convert<Poco::Int64>();
}


inline const Poco::Int64 operator / (const Poco::Int64& other, const DynamicAny& da)
	/// Division operator for dividing DynamicAny with Poco::Int64
{
	return other / da.convert<Poco::Int64>();
}


inline Poco::Int64 operator += (Poco::Int64& other, const DynamicAny& da)
	/// Addition asignment operator for adding DynamicAny to Poco::Int64
{
	return other += da.convert<Poco::Int64>();
}


inline Poco::Int64 operator -= (Poco::Int64& other, const DynamicAny& da)
	/// Subtraction asignment operator for subtracting DynamicAny from Poco::Int64
{
	return other -= da.convert<Poco::Int64>();
}


inline Poco::Int64 operator *= (Poco::Int64& other, const DynamicAny& da)
	/// Multiplication asignment operator for multiplying DynamicAny with Poco::Int64
{
	return other *= da.convert<Poco::Int64>();
}


inline Poco::Int64 operator /= (Poco::Int64& other, const DynamicAny& da)
	/// Division asignment operator for dividing DynamicAny with Poco::Int64
{
	return other /= da.convert<Poco::Int64>();
}


inline const bool operator == (const Poco::Int64& other, const DynamicAny& da)
	/// Equality operator for comparing DynamicAny with Poco::Int64
{
	return other == da.convert<Poco::Int64>();
}


inline const bool operator != (const Poco::Int64& other, const DynamicAny& da)
	/// Inequality operator for comparing DynamicAny with Poco::Int64
{
	return other != da.convert<Poco::Int64>();
}


inline const bool operator < (const Poco::Int64& other, const DynamicAny& da)
	/// Less than operator for comparing DynamicAny with Poco::Int64
{
	return other < da.convert<Poco::Int64>();
}


inline const bool operator <= (const Poco::Int64& other, const DynamicAny& da)
	/// Less than or equal operator for comparing DynamicAny with Poco::Int64
{
	return other <= da.convert<Poco::Int64>();
}


inline const bool operator > (const Poco::Int64& other, const DynamicAny& da)
	/// Greater than operator for comparing DynamicAny with Poco::Int64
{
	return other > da.convert<Poco::Int64>();
}


inline const bool operator >= (const Poco::Int64& other, const DynamicAny& da)
	/// Greater than or equal operator for comparing DynamicAny with Poco::Int64
{
	return other >= da.convert<Poco::Int64>();
}


inline const Poco::UInt64 operator + (const Poco::UInt64& other, const DynamicAny& da)
	/// Addition operator for adding DynamicAny to Poco::UInt64
{
	return other + da.convert<Poco::UInt64>();
}


inline const Poco::UInt64 operator - (const Poco::UInt64& other, const DynamicAny& da)
	/// Subtraction operator for subtracting DynamicAny from Poco::UInt64
{
	return other - da.convert<Poco::UInt64>();
}


inline const Poco::UInt64 operator * (const Poco::UInt64& other, const DynamicAny& da)
	/// Multiplication operator for multiplying DynamicAny with Poco::UInt64
{
	return other * da.convert<Poco::UInt64>();
}


inline const Poco::UInt64 operator / (const Poco::UInt64& other, const DynamicAny& da)
	/// Division operator for dividing DynamicAny with Poco::UInt64
{
	return other / da.convert<Poco::UInt64>();
}


inline Poco::UInt64 operator += (Poco::UInt64& other, const DynamicAny& da)
	/// Addition asignment operator for adding DynamicAny to Poco::UInt64
{
	return other += da.convert<Poco::UInt64>();
}


inline Poco::UInt64 operator -= (Poco::UInt64& other, const DynamicAny& da)
	/// Subtraction asignment operator for subtracting DynamicAny from Poco::UInt64
{
	return other -= da.convert<Poco::UInt64>();
}


inline Poco::UInt64 operator *= (Poco::UInt64& other, const DynamicAny& da)
	/// Multiplication asignment operator for multiplying DynamicAny with Poco::UInt64
{
	return other *= da.convert<Poco::UInt64>();
}


inline Poco::UInt64 operator /= (Poco::UInt64& other, const DynamicAny& da)
	/// Division asignment operator for dividing DynamicAny with Poco::UInt64
{
	return other /= da.convert<Poco::UInt64>();
}


inline const bool operator == (const Poco::UInt64& other, const DynamicAny& da)
	/// Equality operator for comparing DynamicAny with Poco::UInt64
{
	return other == da.convert<Poco::UInt64>();
}


inline const bool operator != (const Poco::UInt64& other, const DynamicAny& da)
	/// Inequality operator for comparing DynamicAny with Poco::UInt64
{
	return other != da.convert<Poco::UInt64>();
}


inline const bool operator < (const Poco::UInt64& other, const DynamicAny& da)
	/// Less than operator for comparing DynamicAny with Poco::UInt64
{
	return other < da.convert<Poco::UInt64>();
}


inline const bool operator <= (const Poco::UInt64& other, const DynamicAny& da)
	/// Less than or equal operator for comparing DynamicAny with Poco::UInt64
{
	return other <= da.convert<Poco::UInt64>();
}


inline const bool operator > (const Poco::UInt64& other, const DynamicAny& da)
	/// Greater than operator for comparing DynamicAny with Poco::UInt64
{
	return other > da.convert<Poco::UInt64>();
}


inline const bool operator >= (const Poco::UInt64& other, const DynamicAny& da)
	/// Greater than or equal operator for comparing DynamicAny with Poco::UInt64
{
	return other >= da.convert<Poco::UInt64>();
}


inline const float operator + (const float& other, const DynamicAny& da)
	/// Addition operator for adding DynamicAny to float
{
	return other + da.convert<float>();
}


inline const float operator - (const float& other, const DynamicAny& da)
	/// Subtraction operator for subtracting DynamicAny from float
{
	return other - da.convert<float>();
}


inline const float operator * (const float& other, const DynamicAny& da)
	/// Multiplication operator for multiplying DynamicAny with float
{
	return other * da.convert<float>();
}


inline const float operator / (const float& other, const DynamicAny& da)
	/// Division operator for dividing DynamicAny with float
{
	return other / da.convert<float>();
}


inline float operator += (float& other, const DynamicAny& da)
	/// Addition asignment operator for adding DynamicAny to float
{
	return other += da.convert<float>();
}


inline float operator -= (float& other, const DynamicAny& da)
	/// Subtraction asignment operator for subtracting DynamicAny from float
{
	return other -= da.convert<float>();
}


inline float operator *= (float& other, const DynamicAny& da)
	/// Multiplication asignment operator for multiplying DynamicAny with float
{
	return other *= da.convert<float>();
}


inline float operator /= (float& other, const DynamicAny& da)
	/// Division asignment operator for dividing DynamicAny with float
{
	return other /= da.convert<float>();
}


inline const bool operator == (const float& other, const DynamicAny& da)
	/// Equality operator for comparing DynamicAny with float
{
	return other == da.convert<float>();
}


inline const bool operator != (const float& other, const DynamicAny& da)
	/// Inequality operator for comparing DynamicAny with float
{
	return other != da.convert<float>();
}


inline const bool operator < (const float& other, const DynamicAny& da)
	/// Less than operator for comparing DynamicAny with float
{
	return other < da.convert<float>();
}


inline const bool operator <= (const float& other, const DynamicAny& da)
	/// Less than or equal operator for comparing DynamicAny with float
{
	return other <= da.convert<float>();
}


inline const bool operator > (const float& other, const DynamicAny& da)
	/// Greater than operator for comparing DynamicAny with float
{
	return other > da.convert<float>();
}


inline const bool operator >= (const float& other, const DynamicAny& da)
	/// Greater than or equal operator for comparing DynamicAny with float
{
	return other >= da.convert<float>();
}


inline const double operator + (const double& other, const DynamicAny& da)
	/// Addition operator for adding DynamicAny to double
{
	return other + da.convert<double>();
}


inline const double operator - (const double& other, const DynamicAny& da)
	/// Subtraction operator for subtracting DynamicAny from double
{
	return other - da.convert<double>();
}


inline const double operator * (const double& other, const DynamicAny& da)
	/// Multiplication operator for multiplying DynamicAny with double
{
	return other * da.convert<double>();
}


inline const double operator / (const double& other, const DynamicAny& da)
	/// Division operator for dividing DynamicAny with double
{
	return other / da.convert<double>();
}


inline double operator += (double& other, const DynamicAny& da)
	/// Addition asignment operator for adding DynamicAny to double
{
	return other += da.convert<double>();
}


inline double operator -= (double& other, const DynamicAny& da)
	/// Subtraction asignment operator for subtracting DynamicAny from double
{
	return other -= da.convert<double>();
}


inline double operator *= (double& other, const DynamicAny& da)
	/// Multiplication asignment operator for multiplying DynamicAny with double
{
	return other *= da.convert<double>();
}


inline double operator /= (double& other, const DynamicAny& da)
	/// Division asignment operator for dividing DynamicAny with double
{
	return other /= da.convert<double>();
}


inline const bool operator == (const double& other, const DynamicAny& da)
	/// Equality operator for comparing DynamicAny with double
{
	return other == da.convert<double>();
}


inline const bool operator != (const double& other, const DynamicAny& da)
	/// Inequality operator for comparing DynamicAny with double
{
	return other != da.convert<double>();
}


inline const bool operator < (const double& other, const DynamicAny& da)
	/// Less than operator for comparing DynamicAny with double
{
	return other < da.convert<double>();
}


inline const bool operator <= (const double& other, const DynamicAny& da)
	/// Less than or equal operator for comparing DynamicAny with double
{
	return other <= da.convert<double>();
}


inline const bool operator > (const double& other, const DynamicAny& da)
	/// Greater than operator for comparing DynamicAny with double
{
	return other > da.convert<double>();
}


inline const bool operator >= (const double& other, const DynamicAny& da)
	/// Greater than or equal operator for comparing DynamicAny with double
{
	return other >= da.convert<double>();
}


inline const bool operator == (const bool& other, const DynamicAny& da)
	/// Equality operator for comparing DynamicAny with bool
{
	return other == da.convert<bool>();
}


inline const bool operator != (const bool& other, const DynamicAny& da)
	/// Inequality operator for comparing DynamicAny with bool
{
	return other != da.convert<bool>();
}


inline const bool operator == (const std::string& other, const DynamicAny& da)
	/// Equality operator for comparing DynamicAny with std::string
{
	return other == da.convert<std::string>();
}


inline const bool operator != (const std::string& other, const DynamicAny& da)
	/// Inequality operator for comparing DynamicAny with std::string
{
	return other != da.convert<std::string>();
}


inline const bool operator == (const char* other, const DynamicAny& da)
	/// Equality operator for comparing DynamicAny with const char*
{
	return da.convert<std::string>() == other;
}


inline const bool operator != (const char* other, const DynamicAny& da)
	/// Inequality operator for comparing DynamicAny with const char*
{
	return da.convert<std::string>() != other;
}


#ifndef POCO_LONG_IS_64_BIT


inline const long operator + (const long& other, const DynamicAny& da)
	/// Addition operator for adding DynamicAny to long
{
	return other + da.convert<long>();
}


inline const long operator - (const long& other, const DynamicAny& da)
	/// Subtraction operator for subtracting DynamicAny from long
{
	return other - da.convert<long>();
}


inline const long operator * (const long& other, const DynamicAny& da)
	/// Multiplication operator for multiplying DynamicAny with long
{
	return other * da.convert<long>();
}


inline const long operator / (const long& other, const DynamicAny& da)
	/// Division operator for dividing DynamicAny with long
{
	return other / da.convert<long>();
}


inline long operator += (long& other, const DynamicAny& da)
	/// Addition asignment operator for adding DynamicAny to long
{
	return other += da.convert<long>();
}


inline long operator -= (long& other, const DynamicAny& da)
	/// Subtraction asignment operator for subtracting DynamicAny from long
{
	return other -= da.convert<long>();
}


inline long operator *= (long& other, const DynamicAny& da)
	/// Multiplication asignment operator for multiplying DynamicAny with long
{
	return other *= da.convert<long>();
}


inline long operator /= (long& other, const DynamicAny& da)
	/// Division asignment operator for dividing DynamicAny with long
{
	return other /= da.convert<long>();
}


inline const bool operator == (const long& other, const DynamicAny& da)
	/// Equality operator for comparing DynamicAny with long
{
	return other == da.convert<long>();
}


inline const bool operator != (const long& other, const DynamicAny& da)
	/// Inequality operator for comparing DynamicAny with long
{
	return other != da.convert<long>();
}


inline const bool operator < (const long& other, const DynamicAny& da)
	/// Less than operator for comparing DynamicAny with long
{
	return other < da.convert<long>();
}


inline const bool operator <= (const long& other, const DynamicAny& da)
	/// Less than or equal operator for comparing DynamicAny with long
{
	return other <= da.convert<long>();
}


inline const bool operator > (const long& other, const DynamicAny& da)
	/// Greater than operator for comparing DynamicAny with long
{
	return other > da.convert<long>();
}


inline const bool operator >= (const long& other, const DynamicAny& da)
	/// Greater than or equal operator for comparing DynamicAny with long
{
	return other >= da.convert<long>();
}


#endif // POCO_LONG_IS_64_BIT


} // namespace Poco


#endif // Foundation_DynamicAny_INCLUDED
