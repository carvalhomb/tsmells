/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. C:/projects/guess/src/org/python/parser\python.jj */
/*@egen*/// -*- java -*-
// Copyright \u00a9 Corporation for National Research Initiatives

options 
{                                                                                         // call jjtree*NodeScope()
    STATIC = false;                          // multiple parsers
    COMMON_TOKEN_ACTION = true;              // CommonTokenAction(Token)
//    DEBUG_PARSER = true;
//    DEBUG_TOKEN_MANAGER = true;
    USER_CHAR_STREAM = true;
    UNICODE_INPUT = true;
}


PARSER_BEGIN(PythonGrammar)
package org.python.parser;

public class PythonGrammar/*@bgen(jjtree)*/implements PythonGrammarTreeConstants/*@egen*/ 
{/*@bgen(jjtree)*/
  protected JJTPythonGrammarState jjtree = new JJTPythonGrammarState();

/*@egen*/
    void jjtreeOpenNodeScope(Node n) {
        ((SimpleNode)n).beginLine = getToken(1).beginLine;
        ((SimpleNode)n).beginColumn = getToken(1).beginColumn;
    }

    void jjtreeCloseNodeScope(Node n) {
        ((SimpleNode)n).endLine = getToken(0).endLine;
        ((SimpleNode)n).endColumn = getToken(0).endColumn;
    }
}

PARSER_END(PythonGrammar)

TOKEN_MGR_DECLS:
{
    int indentation[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int level = 0;
    int dedents = 0;
    int parens = 0;
    int indent;
    boolean seen_eof = false;
    boolean single_input = false;
    boolean compound = false;
    public boolean forcedNewline = false;

    static Token addDedent(Token previous) {
        Token t = new Token();
        t.kind = DEDENT;
        t.beginLine = previous.beginLine;
        t.endLine = previous.endLine;
        t.beginColumn = previous.beginColumn;
        t.endColumn = previous.endColumn;
        t.image = "<DEDENT>";
        t.specialToken = null;
        t.next = null;
        previous.next = t;
        return t;
    }

    void CommonTokenAction(Token t) {
        if (t.kind == EOF) {
            //System.out.println("EOF: "+single_input+", "+curLexState);
            if (!single_input) {
                if (curLexState == DEFAULT) {
                    t.kind = NEWLINE;
                }
                else {
                    t.kind = DEDENT;
                    level -= 1;
                }
                while (level-- >= 0)
                    t = addDedent(t);
                //t = addDedent(t);
                t.kind = EOF;
                t.image = "<EOF>";
            }
        }
    }
}


SKIP :
{
    <SPACE: " ">
|   "\t"
|   "\014"
|   <CONTINUATION: ("\\") ("\r\n"|"\n"|"\r")>
|   <NEWLINE1: ("\r\n"|"\n"|"\r")>
        {
            if (parens == 0) {
                indent = 0;
                input_stream.backup(1);
                if (level == 0)
                    SwitchTo(FORCE_NEWLINE1);
                else
                    SwitchTo(FORCE_NEWLINE2);
            }
        }
}


<FORCE_NEWLINE1> TOKEN :
{ <NEWLINE: ("\n" | "\r")> : INDENTATION_UNCHANGED }


<FORCE_NEWLINE2> TOKEN :
{ <NEWLINE2: ("\n" | "\r")> { matchedToken.kind = NEWLINE; }: INDENTING }


<FORCE_NEWLINE> TOKEN :
{
    <NEWLINE3: ("\n" | "\r")>
        {
            Token t1 = matchedToken;
            //System.out.println("final_newline: "+level);
            t1.kind = DEDENT;
            while (level-- > 0) 
                t1 = addDedent(t1);
            t1.kind = NEWLINE;
        } : DEFAULT
}

<INDENTING, INDENTATION_UNCHANGED> SKIP :
{
    "\t"
        {
            indent = (indent/8+1)*8;
            if (indent == indentation[level])
                SwitchTo(INDENTATION_UNCHANGED);
            else
                SwitchTo(INDENTING);
        }
|   " "
        {
            indent += 1;
            if (indent == indentation[level])
                SwitchTo(INDENTATION_UNCHANGED);
            else
                SwitchTo(INDENTING);
        }
|   "\014"
        {
            indent = 0;
            if (indent == indentation[level])
                SwitchTo(INDENTATION_UNCHANGED);
            else
                SwitchTo(INDENTING);
        }
|   <CRLF1: ("\r\n" | "\n" | "\r")>
        {

            if (parens == 0 && single_input && indent==0) {
                //System.out.println("force newline");
                //backup a character!
                forcedNewline = true;
                input_stream.backup(1);
                SwitchTo(FORCE_NEWLINE);
            }
            else {
                //doPrompt();
                indent = 0;
                if (indent == indentation[level])
                    SwitchTo(INDENTATION_UNCHANGED);
                else
                    SwitchTo(INDENTING);
            }
        }
}



<INDENTATION_UNCHANGED> SKIP :
{
    <""> : DEFAULT
}


<INDENTING> TOKEN :
{
    <DEDENT: "">
        {
            if (indent > indentation[level]) {
                level++;
                indentation[level] = indent;
                matchedToken.kind=INDENT;
                matchedToken.image = "<INDENT>";
            }
            else {
                Token t = matchedToken;
                level -= 1;
                while (level > 0 && indent < indentation[level]) {
                    level--;
                    t = addDedent(t);
                }
                if (indent != indentation[level]) {
                    throw new TokenMgrError("inconsistent dedent",
                                            t.endLine, t.endColumn);
                }
                t.next = null;
            }
        } : DEFAULT
}


<UNREACHABLE> TOKEN :
{
    < INDENT:"<INDENT>">
//|     < DEDENT:"<DEDENT>">
}


<DEFAULT> SPECIAL_TOKEN: /* COMMENTS */
{
    <TRAILING_COMMENT: "#" (~["\n","\r"])* >
}

<INDENTING, INDENTATION_UNCHANGED> SPECIAL_TOKEN: /* COMMENTS */
{
    <SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\r\n" | "\n" | "\r")> {
        indent = 0;
        if (indent == indentation[level])
            SwitchTo(INDENTATION_UNCHANGED);
        else
            SwitchTo(INDENTING);
    }
}


TOKEN : /* SEPARATORS */
{
    < LPAREN: "(" > {parens++;}
|   < RPAREN: ")" > {parens--;}
|   < LBRACE: "{" > {parens++;}
|   < RBRACE: "}" > {parens--;}
|   < LBRACKET: "[" > {parens++;}
|   < RBRACKET: "]" > {parens--;}
|   < SEMICOLON: ";" >
|   < COMMA: "," >
|   < DOT: "." >
|   < COLON: ":" >
}


TOKEN : /* OPERATORS */
{
    < PLUS: "+" >
|   < MINUS: "-" >
|   < MULTIPLY: "*" >
|   < DIVIDE: "/" >
|   < POWER: "**" >
|   < LSHIFT: "<<" >
|   < RSHIFT: ">>" >
|   < MODULO: "%" >
|   < NOT: "~" >
|   < XOR: "^" >
|   < OR: "|" >
|   < AND: "&" >
|   < EQUAL: "=" >
|   < GREATER: ">" >
|   < LESS: "<" >
|   < EQEQUAL: "==" >
|   < EQLESS: "<=" >
|   < EQGREATER: ">=" >
|   < LESSGREATER: "<>" >
|   < NOTEQUAL: "!=" >
|   < LEFTDIREDGE: "<-" >
|   < RIGHTDIREDGE: "->" >
|   < BIDIREDGE: "<->" >
|   < QUESTIONM: "?" >
|   < LIKE: "like">
|   < ROVERLAPS: "roverlaps">
|   < RCONTAINS: "rcontains">
|   < REXACT: "rexact">
|   < RCONTAINED: "rcontained">
|   < PLUSEQ: "+=" >
|   < MINUSEQ: "-=" >
|   < MULTIPLYEQ: "*=" >
|   < DIVIDEEQ: "/=" >
|   < MODULOEQ: "%=" >
|   < ANDEQ: "&=" >
|   < OREQ: "|=" >
|   < XOREQ: "^=" >
|   < LSHIFTEQ: "<<=" >
|   < RSHIFTEQ: ">>=" >
|   < POWEREQ: "**=" >
}

TOKEN : /* KEYWORDS */
{
    < OR_BOOL: "or" >
|   < AND_BOOL: "and" >
|   < NOT_BOOL: "not" >
|   < IS: "is" >
|   < IN: "in" >
|   < LAMBDA: "lambda" >
|   < IF: "if" >
|   < ELSE: "else" >
|   < ELIF: "elif" >
|   < WHILE: "while" >
|   < FOR: "for" >
|   < TRY: "try" >
|   < EXCEPT: "except" >
|   < DEF: "def" >
|   < CLASS: "class" >
|   < FINALLY: "finally" >
|   < PRINT: "print" >
|   < PASS: "pass" >
|   < BREAK: "break" >
|   < CONTINUE: "continue" >
|   < RETURN: "return" >
|   < IMPORT: "import" >
|   < FROM: "from" >
|   < DEL: "del" >
|   < RAISE: "raise" >
|   < GLOBAL: "global" >
|   < EXEC: "exec" >
|   < ASSERT: "assert" >
|   < AS: "as" >
}


TOKEN : /* Python identifiers */
{
    < NAME: <LETTER> ( <LETTER> | <DIGIT>)* >
|   < #LETTER: ["_","a"-"z","A"-"Z"] >
}


TOKEN : /* Numeric literals */
{
    < DECNUMBER:
        ["1"-"9"] (["0"-"9"])* (["j", "J", "l", "L"])?
      | "0" ["j", "J"]
      >
|   < HEXNUMBER: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ (["l","L"])? >
|   < OCTNUMBER: "0" (["0"-"7"])* (["l","L"])? >
|
    < FLOAT:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["j", "J"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["j", "J"])?
      | (["0"-"9"])+ <EXPONENT> (["j", "J"])?
      >
|   < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|   < #DIGIT: ["0" - "9"] >
}

/*TOKEN : { <STRING: (["r", "R"])? ["'", "\"", "'''", "\"\"\""] >
    {
        int nquotes = matchedToken.image.length() > 2 ? 3 : 1;
        char quote = matchedToken.image.charAt(matchedToken.image.length()-1);

    }
}*/


MORE : /* Strings */
{
    < (["u", "U"])? (["r", "R"])? "'" > :  IN_STRING11
|   < (["u", "U"])? (["r", "R"])? "\"" > :  IN_STRING21
|   < (["u", "U"])? (["r", "R"])? "'''" > :  IN_STRING13
|   < (["u", "U"])? (["r", "R"])? "\"\"\"" > :  IN_STRING23
}

<IN_STRING11> TOKEN : { <SINGLE_STRING: "'"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING21> TOKEN : { <SINGLE_STRING2: "\""> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING13> TOKEN : { <TRIPLE_STRING: "'''"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING23> TOKEN : { <TRIPLE_STRING2: "\"\"\""> { 
    matchedToken.image = image.toString(); } : DEFAULT}

<IN_STRING11,IN_STRING21> MORE: 
{
    <"\\\r\n">           { image.setLength(image.length()-3); }
|   <("\\" ("\n"|"\r"))> { image.setLength(image.length()-2); }
}

<IN_STRING11> MORE: { <("\\" ("\\"|"'")) | ~["\n","\r"]> }
<IN_STRING21> MORE: { <("\\" ("\\"|"\"")) | ~["\n","\r"]> }

<IN_STRING13, IN_STRING23> MORE:
{
    <"\r\n"> {
        int l = image.length(); 
        image.setLength(l-1);
        image.setCharAt(l-2, '\n');
    } 
|   <"\n">
|   <"\r"> { image.setCharAt(image.length()-1, '\n'); }
|   <~["\n","\r"]> 
|   <"\\" ~["\n","\r"]>
}


//single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
SimpleNode single_input(): {/*@bgen(jjtree) single_input */
                            SimpleNode jjtn000 = new SimpleNode(JJTSINGLE_INPUT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
                            jjtreeOpenNodeScope(jjtn000);
/*@egen*/token_source.single_input=true;}
{/*@bgen(jjtree) single_input */
    try {
/*@egen*/
    (<NEWLINE> |  simple_stmt() |  compound_stmt() <NEWLINE>)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

//file_input: (NEWLINE | stmt)* ENDMARKER
SimpleNode file_input(): {/*@bgen(jjtree) file_input */
                          SimpleNode jjtn000 = new SimpleNode(JJTFILE_INPUT);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
                          jjtreeOpenNodeScope(jjtn000);
/*@egen*/token_source.single_input=false;}
{/*@bgen(jjtree) file_input */
    try {
/*@egen*/
    (<NEWLINE> | stmt())* <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

//eval_input: testlist NEWLINE* ENDMARKER
SimpleNode eval_input(): {/*@bgen(jjtree) eval_input */
                          SimpleNode jjtn000 = new SimpleNode(JJTEVAL_INPUT);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
                          jjtreeOpenNodeScope(jjtn000);
/*@egen*/token_source.single_input=false;}
{/*@bgen(jjtree) eval_input */
    try {
/*@egen*/
    SmartTestList() (<NEWLINE>)* <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

//funcdef: 'def' NAME parameters ':' suite
void funcdef(): {/*@bgen(jjtree) funcdef */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) funcdef */
  try {
/*@egen*/ <DEF> AnyName() parameters() <COLON> suite()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

//parameters: '(' [varargslist] ')'
void parameters()      : {}
{ <LPAREN> [varargslist()] <RPAREN> }

//varargslist: (fpdef ['=' test] ',')* ('*' NAME [',' ('**'|'*' '*') NAME] | ('**'|'*' '*') NAME) | fpdef ['=' test] (',' fpdef ['=' test])* [',']
void varargslist(): {/*@bgen(jjtree) varargslist */
  SimpleNode jjtn000 = new SimpleNode(JJTVARARGSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) varargslist */
    try {
/*@egen*/
    defaultarg() (LOOKAHEAD(2) <COMMA> defaultarg())*
        [LOOKAHEAD(3) <COMMA> ExtraArgList()]
        [LOOKAHEAD(2) <COMMA> ExtraKeywordList()]
        [<COMMA>]
|   ( LOOKAHEAD(2) ExtraArgList() [<COMMA> ExtraKeywordList()]
    | ExtraKeywordList()
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void ExtraArgList(): {/*@bgen(jjtree) ExtraArgList */
  SimpleNode jjtn000 = new SimpleNode(JJTEXTRAARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExtraArgList */
  try {
/*@egen*/ <MULTIPLY> Name()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

void ExtraKeywordList(): {/*@bgen(jjtree) ExtraKeywordList */
  SimpleNode jjtn000 = new SimpleNode(JJTEXTRAKEYWORDLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExtraKeywordList */
  try {
/*@egen*/ (<POWER>|<MULTIPLY> <MULTIPLY>) Name()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

void defaultarg(): {/*@bgen(jjtree) defaultarg */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFAULTARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) defaultarg */
  try {
/*@egen*/ fpdef() [<EQUAL> test()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

//fpdef: NAME | '(' fplist ')'
void fpdef()      : {}
{ Name() | <LPAREN> fplist() <RPAREN> }

//fplist: fpdef (',' fpdef)* [',']
void fplist(): {/*@bgen(jjtree) fplist */
  SimpleNode jjtn000 = new SimpleNode(JJTFPLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fplist */
  try {
/*@egen*/ fpdef() (LOOKAHEAD(2) <COMMA> fpdef())* [<COMMA>]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }


//stmt: simple_stmt | compound_stmt
void stmt()      : {}
{ simple_stmt() | compound_stmt() }

//simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
void simple_stmt()      : {}
{ small_stmt() (LOOKAHEAD(2) <SEMICOLON> small_stmt())* [<SEMICOLON>] <NEWLINE>
}

//small_stmt: expr_stmt | print_stmt  | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt
void small_stmt()      : {}
{
    expr_stmt()
|   print_stmt()
|   del_stmt()
|   pass_stmt()
|   flow_stmt()
|   import_stmt()
|   global_stmt()
|   exec_stmt()
|   assert_stmt()
}

//expr_stmt: testlist (augassign testlist | ('=' testlist)*)
void expr_stmt(): {/*@bgen(jjtree) expr_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) expr_stmt */
    try {
/*@egen*/
    SmartTestList() (
    <PLUSEQ>/*@bgen(jjtree) #aug_plus( 2) */
             {
               SimpleNode jjtn001 = new SimpleNode(JJTAUG_PLUS);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtreeOpenNodeScope(jjtn001);
             }
             try {
/*@egen*/ SmartTestList()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
                 jjtreeCloseNodeScope(jjtn001);
               }
             }
/*@egen*/
|   <MINUSEQ>/*@bgen(jjtree) #aug_minus( 2) */
              {
                SimpleNode jjtn002 = new SimpleNode(JJTAUG_MINUS);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtreeOpenNodeScope(jjtn002);
              }
              try {
/*@egen*/ SmartTestList()/*@bgen(jjtree)*/
              } catch (Throwable jjte002) {
                if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  throw (RuntimeException)jjte002;
                }
                if (jjte002 instanceof ParseException) {
                  throw (ParseException)jjte002;
                }
                throw (Error)jjte002;
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  2);
                  jjtreeCloseNodeScope(jjtn002);
                }
              }
/*@egen*/
|   <MULTIPLYEQ>/*@bgen(jjtree) #aug_multiply( 2) */
                 {
                   SimpleNode jjtn003 = new SimpleNode(JJTAUG_MULTIPLY);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                   jjtreeOpenNodeScope(jjtn003);
                 }
                 try {
/*@egen*/ SmartTestList()/*@bgen(jjtree)*/
                 } catch (Throwable jjte003) {
                   if (jjtc003) {
                     jjtree.clearNodeScope(jjtn003);
                     jjtc003 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte003 instanceof RuntimeException) {
                     throw (RuntimeException)jjte003;
                   }
                   if (jjte003 instanceof ParseException) {
                     throw (ParseException)jjte003;
                   }
                   throw (Error)jjte003;
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003,  2);
                     jjtreeCloseNodeScope(jjtn003);
                   }
                 }
/*@egen*/
|   <DIVIDEEQ>/*@bgen(jjtree) #aug_divide( 2) */
               {
                 SimpleNode jjtn004 = new SimpleNode(JJTAUG_DIVIDE);
                 boolean jjtc004 = true;
                 jjtree.openNodeScope(jjtn004);
                 jjtreeOpenNodeScope(jjtn004);
               }
               try {
/*@egen*/ SmartTestList()/*@bgen(jjtree)*/
               } catch (Throwable jjte004) {
                 if (jjtc004) {
                   jjtree.clearNodeScope(jjtn004);
                   jjtc004 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte004 instanceof RuntimeException) {
                   throw (RuntimeException)jjte004;
                 }
                 if (jjte004 instanceof ParseException) {
                   throw (ParseException)jjte004;
                 }
                 throw (Error)jjte004;
               } finally {
                 if (jjtc004) {
                   jjtree.closeNodeScope(jjtn004,  2);
                   jjtreeCloseNodeScope(jjtn004);
                 }
               }
/*@egen*/
|   <MODULOEQ>/*@bgen(jjtree) #aug_modulo( 2) */
               {
                 SimpleNode jjtn005 = new SimpleNode(JJTAUG_MODULO);
                 boolean jjtc005 = true;
                 jjtree.openNodeScope(jjtn005);
                 jjtreeOpenNodeScope(jjtn005);
               }
               try {
/*@egen*/ SmartTestList()/*@bgen(jjtree)*/
               } catch (Throwable jjte005) {
                 if (jjtc005) {
                   jjtree.clearNodeScope(jjtn005);
                   jjtc005 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte005 instanceof RuntimeException) {
                   throw (RuntimeException)jjte005;
                 }
                 if (jjte005 instanceof ParseException) {
                   throw (ParseException)jjte005;
                 }
                 throw (Error)jjte005;
               } finally {
                 if (jjtc005) {
                   jjtree.closeNodeScope(jjtn005,  2);
                   jjtreeCloseNodeScope(jjtn005);
                 }
               }
/*@egen*/
|   <ANDEQ>/*@bgen(jjtree) #aug_and( 2) */
            {
              SimpleNode jjtn006 = new SimpleNode(JJTAUG_AND);
              boolean jjtc006 = true;
              jjtree.openNodeScope(jjtn006);
              jjtreeOpenNodeScope(jjtn006);
            }
            try {
/*@egen*/ SmartTestList()/*@bgen(jjtree)*/
            } catch (Throwable jjte006) {
              if (jjtc006) {
                jjtree.clearNodeScope(jjtn006);
                jjtc006 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte006 instanceof RuntimeException) {
                throw (RuntimeException)jjte006;
              }
              if (jjte006 instanceof ParseException) {
                throw (ParseException)jjte006;
              }
              throw (Error)jjte006;
            } finally {
              if (jjtc006) {
                jjtree.closeNodeScope(jjtn006,  2);
                jjtreeCloseNodeScope(jjtn006);
              }
            }
/*@egen*/
|   <OREQ>/*@bgen(jjtree) #aug_or( 2) */
           {
             SimpleNode jjtn007 = new SimpleNode(JJTAUG_OR);
             boolean jjtc007 = true;
             jjtree.openNodeScope(jjtn007);
             jjtreeOpenNodeScope(jjtn007);
           }
           try {
/*@egen*/ SmartTestList()/*@bgen(jjtree)*/
           } catch (Throwable jjte007) {
             if (jjtc007) {
               jjtree.clearNodeScope(jjtn007);
               jjtc007 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte007 instanceof RuntimeException) {
               throw (RuntimeException)jjte007;
             }
             if (jjte007 instanceof ParseException) {
               throw (ParseException)jjte007;
             }
             throw (Error)jjte007;
           } finally {
             if (jjtc007) {
               jjtree.closeNodeScope(jjtn007,  2);
               jjtreeCloseNodeScope(jjtn007);
             }
           }
/*@egen*/
|   <XOREQ>/*@bgen(jjtree) #aug_xor( 2) */
            {
              SimpleNode jjtn008 = new SimpleNode(JJTAUG_XOR);
              boolean jjtc008 = true;
              jjtree.openNodeScope(jjtn008);
              jjtreeOpenNodeScope(jjtn008);
            }
            try {
/*@egen*/ SmartTestList()/*@bgen(jjtree)*/
            } catch (Throwable jjte008) {
              if (jjtc008) {
                jjtree.clearNodeScope(jjtn008);
                jjtc008 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte008 instanceof RuntimeException) {
                throw (RuntimeException)jjte008;
              }
              if (jjte008 instanceof ParseException) {
                throw (ParseException)jjte008;
              }
              throw (Error)jjte008;
            } finally {
              if (jjtc008) {
                jjtree.closeNodeScope(jjtn008,  2);
                jjtreeCloseNodeScope(jjtn008);
              }
            }
/*@egen*/
|   <LSHIFTEQ>/*@bgen(jjtree) #aug_lshift( 2) */
               {
                 SimpleNode jjtn009 = new SimpleNode(JJTAUG_LSHIFT);
                 boolean jjtc009 = true;
                 jjtree.openNodeScope(jjtn009);
                 jjtreeOpenNodeScope(jjtn009);
               }
               try {
/*@egen*/ SmartTestList()/*@bgen(jjtree)*/
               } catch (Throwable jjte009) {
                 if (jjtc009) {
                   jjtree.clearNodeScope(jjtn009);
                   jjtc009 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte009 instanceof RuntimeException) {
                   throw (RuntimeException)jjte009;
                 }
                 if (jjte009 instanceof ParseException) {
                   throw (ParseException)jjte009;
                 }
                 throw (Error)jjte009;
               } finally {
                 if (jjtc009) {
                   jjtree.closeNodeScope(jjtn009,  2);
                   jjtreeCloseNodeScope(jjtn009);
                 }
               }
/*@egen*/
|   <RSHIFTEQ>/*@bgen(jjtree) #aug_rshift( 2) */
               {
                 SimpleNode jjtn010 = new SimpleNode(JJTAUG_RSHIFT);
                 boolean jjtc010 = true;
                 jjtree.openNodeScope(jjtn010);
                 jjtreeOpenNodeScope(jjtn010);
               }
               try {
/*@egen*/ SmartTestList()/*@bgen(jjtree)*/
               } catch (Throwable jjte010) {
                 if (jjtc010) {
                   jjtree.clearNodeScope(jjtn010);
                   jjtc010 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte010 instanceof RuntimeException) {
                   throw (RuntimeException)jjte010;
                 }
                 if (jjte010 instanceof ParseException) {
                   throw (ParseException)jjte010;
                 }
                 throw (Error)jjte010;
               } finally {
                 if (jjtc010) {
                   jjtree.closeNodeScope(jjtn010,  2);
                   jjtreeCloseNodeScope(jjtn010);
                 }
               }
/*@egen*/
|   <POWEREQ>/*@bgen(jjtree) #aug_power( 2) */
              {
                SimpleNode jjtn011 = new SimpleNode(JJTAUG_POWER);
                boolean jjtc011 = true;
                jjtree.openNodeScope(jjtn011);
                jjtreeOpenNodeScope(jjtn011);
              }
              try {
/*@egen*/ SmartTestList()/*@bgen(jjtree)*/
              } catch (Throwable jjte011) {
                if (jjtc011) {
                  jjtree.clearNodeScope(jjtn011);
                  jjtc011 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte011 instanceof RuntimeException) {
                  throw (RuntimeException)jjte011;
                }
                if (jjte011 instanceof ParseException) {
                  throw (ParseException)jjte011;
                }
                throw (Error)jjte011;
              } finally {
                if (jjtc011) {
                  jjtree.closeNodeScope(jjtn011,  2);
                  jjtreeCloseNodeScope(jjtn011);
                }
              }
/*@egen*/
|   (<EQUAL> SmartTestList())*
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/  
}

//print_stmt: 'print' (test ',')* [test] | 'print' '>>' test (, test)+ [,]
void print_stmt()            : {/*@bgen(jjtree) print_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTPRINT_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) print_stmt */
    try {
/*@egen*/
    LOOKAHEAD(2) <PRINT> <RSHIFT>/*@bgen(jjtree) #print_ext( 1) */
                                  {
                                    SimpleNode jjtn001 = new SimpleNode(JJTPRINT_EXT);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                    jjtreeOpenNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*/ test()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte001;
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      throw (ParseException)jjte001;
                                    }
                                    throw (Error)jjte001;
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  1);
                                      jjtreeCloseNodeScope(jjtn001);
                                    }
                                  }
/*@egen*/
        [ (LOOKAHEAD(2) <COMMA> test())+ [Comma()] ]
|   LOOKAHEAD(2) <PRINT> test() (LOOKAHEAD(2) <COMMA> test())* [Comma()]
|   <PRINT>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

//del_stmt: 'del' exprlist
void del_stmt(): {/*@bgen(jjtree) del_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTDEL_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) del_stmt */
  try {
/*@egen*/ <DEL> exprlist()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

//pass_stmt: 'pass'
void pass_stmt(): {/*@bgen(jjtree) pass_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTPASS_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) pass_stmt */
  try {
/*@egen*/ <PASS>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

//flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt
void flow_stmt()      : {}
{/*@bgen(jjtree) #break_stmt( 0) */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTBREAK_STMT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    }
    try {
/*@egen*/
    <BREAK>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  0);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #continue_stmt( 0) */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTCONTINUE_STMT);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
    }
    try {
/*@egen*/   <CONTINUE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  0);
        jjtreeCloseNodeScope(jjtn002);
      }
    }
/*@egen*/
|   return_stmt()
|   raise_stmt()
}

//return_stmt: 'return' [testlist]
void return_stmt(): {/*@bgen(jjtree) return_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) return_stmt */
  try {
/*@egen*/ <RETURN> [SmartTestList()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

//raise_stmt: 'raise' [test [',' test [',' test]]]
void raise_stmt(): {/*@bgen(jjtree) raise_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTRAISE_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) raise_stmt */
  try {
/*@egen*/ <RAISE> [test() [<COMMA> test() [<COMMA> test()]]]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

//import_stmt: 'import' dotted_name (',' dotted_name)* | 'from' dotted_name 'import' ('*' | NAME (',' NAME)*)
void import_stmt()      : {}
{ <IMPORT> Import() | <FROM> ImportFrom() }

void Import(): {/*@bgen(jjtree) Import */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Import */
  try {
/*@egen*/ dotted_as_name() (<COMMA> dotted_as_name())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

void ImportFrom(): {/*@bgen(jjtree) ImportFrom */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTFROM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImportFrom */
    try {
/*@egen*/
    dotted_name() <IMPORT> (
        <MULTIPLY> | import_as_name() (<COMMA> import_as_name())*
        )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

//dotted_as_name: dotted_name [NAME NAME]
void dotted_as_name()      :{}
{ dotted_name() [<AS>/*@bgen(jjtree) #dotted_as_name( 2) */
                      {
                        SimpleNode jjtn001 = new SimpleNode(JJTDOTTED_AS_NAME);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtreeOpenNodeScope(jjtn001);
                      }
                      try {
/*@egen*/ Name()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                          jjtreeCloseNodeScope(jjtn001);
                        }
                      }
/*@egen*/] }

//dotted_name: NAME ('.' NAME)*
void dotted_name(): {/*@bgen(jjtree) dotted_name */
  SimpleNode jjtn000 = new SimpleNode(JJTDOTTED_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dotted_name */
  try {
/*@egen*/ AnyName() (<DOT> AnyName())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

//import_as_name: NAME [NAME NAME]
void import_as_name()      : {}
{ AnyName() [<AS>/*@bgen(jjtree) #import_as_name( 2) */
                  {
                    SimpleNode jjtn001 = new SimpleNode(JJTIMPORT_AS_NAME);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtreeOpenNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ Name()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                      jjtreeCloseNodeScope(jjtn001);
                    }
                  }
/*@egen*/] }

//global_stmt: 'global' NAME (',' NAME)*
void global_stmt(): {/*@bgen(jjtree) global_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTGLOBAL_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) global_stmt */
  try {
/*@egen*/ <GLOBAL> Name() (<COMMA> Name())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

//exec_stmt: 'exec' expr ['in' test [',' test]]
void exec_stmt(): {/*@bgen(jjtree) exec_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTEXEC_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) exec_stmt */
  try {
/*@egen*/ <EXEC> expr() [<IN> test() [<COMMA> test()]]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

//assert_stmt: 'assert' test [',' test]
void assert_stmt(): {/*@bgen(jjtree) assert_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTASSERT_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) assert_stmt */
  try {
/*@egen*/ <ASSERT> test() [<COMMA> test()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

//compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | funcdef | classdef
void compound_stmt()       : { token_source.compound = true; }
{if_stmt() | while_stmt() | for_stmt() | try_stmt()  | funcdef() | classdef()}

//if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
void if_stmt(): {/*@bgen(jjtree) if_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTIF_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) if_stmt */
    try {
/*@egen*/
    <IF> test() <COLON> suite()
         (<ELIF> test() <COLON> suite())* [ <ELSE> <COLON> suite()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

//while_stmt: 'while' test ':' suite ['else' ':' suite]
void while_stmt(): {/*@bgen(jjtree) while_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) while_stmt */
  try {
/*@egen*/ <WHILE> test() <COLON> suite() [<ELSE> <COLON> suite()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

//for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]
void for_stmt(): {/*@bgen(jjtree) for_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) for_stmt */
  try {
/*@egen*/ <FOR> exprlist() <IN> SmartTestList() <COLON> suite()
       [<ELSE> <COLON> suite()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

//try_stmt: ('try' ':' suite (except_clause ':' suite)+ #diagram:break
//           ['else' ':' suite] | 'try' ':' suite 'finally' ':' suite)
void try_stmt(): {/*@bgen(jjtree) try_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTTRY_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) try_stmt */
  try {
/*@egen*/ <TRY> <COLON> suite() (
    (<EXCEPT> except_clause() <COLON> suite())+ [<ELSE> <COLON> suite()]
    | <FINALLY> <COLON> suite())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ 
}

//except_clause: 'except' [test [',' test]]
void except_clause(): {/*@bgen(jjtree) except_clause */
  SimpleNode jjtn000 = new SimpleNode(JJTEXCEPT_CLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) except_clause */
  try {
/*@egen*/ [test() [<COMMA> test()]]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

//suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT
void suite(): {/*@bgen(jjtree) suite */
  SimpleNode jjtn000 = new SimpleNode(JJTSUITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) suite */
  try {
/*@egen*/ simple_stmt() |  <NEWLINE> <INDENT> (stmt())+ <DEDENT>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }


//test: and_test ('or' and_test)* | lambdef
void test()      : {}
{ lambdef() | and_test() (<OR_BOOL>/*@bgen(jjtree) #or_boolean( 2) */
                                    {
                                      SimpleNode jjtn001 = new SimpleNode(JJTOR_BOOLEAN);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                      jjtreeOpenNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*/ and_test()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte001;
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        throw (ParseException)jjte001;
                                      }
                                      throw (Error)jjte001;
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                        jjtreeCloseNodeScope(jjtn001);
                                      }
                                    }
/*@egen*/)* }

//and_test: not_test ('and' not_test)*
void and_test()      : {}
{ not_test() (<AND_BOOL>/*@bgen(jjtree) #and_boolean( 2) */
                         {
                           SimpleNode jjtn001 = new SimpleNode(JJTAND_BOOLEAN);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtreeOpenNodeScope(jjtn001);
                         }
                         try {
/*@egen*/ not_test()/*@bgen(jjtree)*/
                         } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             throw (RuntimeException)jjte001;
                           }
                           if (jjte001 instanceof ParseException) {
                             throw (ParseException)jjte001;
                           }
                           throw (Error)jjte001;
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                             jjtreeCloseNodeScope(jjtn001);
                           }
                         }
/*@egen*/)* }

//not_test: 'not' not_test | comparison
void not_test()      : {}
{ <NOT_BOOL>/*@bgen(jjtree) #not_1op( 1) */
             {
               SimpleNode jjtn001 = new SimpleNode(JJTNOT_1OP);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtreeOpenNodeScope(jjtn001);
             }
             try {
/*@egen*/ not_test()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  1);
                 jjtreeCloseNodeScope(jjtn001);
               }
             }
/*@egen*/ | comparison() }

//comparison: expr (comp_op expr)*
void comparison()      : {}
{/*@bgen(jjtree) #comparision(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTCOMPARISION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/ (expr() (comp_op() expr())*)/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*/ }


//comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'->'|'<->'|'<-'|'in'|'not' 'in'|'is'|'is' 'not'
void comp_op()      : {}
{/*@bgen(jjtree) #less_cmp( 0) */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTLESS_CMP);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    }
    try {
/*@egen*/
    <LESS>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  0);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #greater_cmp( 0) */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTGREATER_CMP);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
    }
    try {
/*@egen*/   <GREATER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  0);
        jjtreeCloseNodeScope(jjtn002);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #equal_cmp( 0) */
    {
      SimpleNode jjtn003 = new SimpleNode(JJTEQUAL_CMP);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtreeOpenNodeScope(jjtn003);
    }
    try {
/*@egen*/   <EQEQUAL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  0);
        jjtreeCloseNodeScope(jjtn003);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #greater_equal_cmp( 0) */
    {
      SimpleNode jjtn004 = new SimpleNode(JJTGREATER_EQUAL_CMP);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
      jjtreeOpenNodeScope(jjtn004);
    }
    try {
/*@egen*/   <EQGREATER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004,  0);
        jjtreeCloseNodeScope(jjtn004);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #less_equal_cmp( 0) */
    {
      SimpleNode jjtn005 = new SimpleNode(JJTLESS_EQUAL_CMP);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
      jjtreeOpenNodeScope(jjtn005);
    }
    try {
/*@egen*/   <EQLESS>/*@bgen(jjtree)*/
    } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005,  0);
        jjtreeCloseNodeScope(jjtn005);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #notequal_cmp( 0) */
    {
      SimpleNode jjtn006 = new SimpleNode(JJTNOTEQUAL_CMP);
      boolean jjtc006 = true;
      jjtree.openNodeScope(jjtn006);
      jjtreeOpenNodeScope(jjtn006);
    }
    try {
/*@egen*/   <LESSGREATER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc006) {
        jjtree.closeNodeScope(jjtn006,  0);
        jjtreeCloseNodeScope(jjtn006);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #notequal_cmp( 0) */
    {
      SimpleNode jjtn007 = new SimpleNode(JJTNOTEQUAL_CMP);
      boolean jjtc007 = true;
      jjtree.openNodeScope(jjtn007);
      jjtreeOpenNodeScope(jjtn007);
    }
    try {
/*@egen*/   <NOTEQUAL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc007) {
        jjtree.closeNodeScope(jjtn007,  0);
        jjtreeCloseNodeScope(jjtn007);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #leftdiredge( 0) */
    {
      SimpleNode jjtn008 = new SimpleNode(JJTLEFTDIREDGE);
      boolean jjtc008 = true;
      jjtree.openNodeScope(jjtn008);
      jjtreeOpenNodeScope(jjtn008);
    }
    try {
/*@egen*/   <LEFTDIREDGE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc008) {
        jjtree.closeNodeScope(jjtn008,  0);
        jjtreeCloseNodeScope(jjtn008);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #rightdiredge( 0) */
    {
      SimpleNode jjtn009 = new SimpleNode(JJTRIGHTDIREDGE);
      boolean jjtc009 = true;
      jjtree.openNodeScope(jjtn009);
      jjtreeOpenNodeScope(jjtn009);
    }
    try {
/*@egen*/   <RIGHTDIREDGE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc009) {
        jjtree.closeNodeScope(jjtn009,  0);
        jjtreeCloseNodeScope(jjtn009);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #bidiredge( 0) */
    {
      SimpleNode jjtn010 = new SimpleNode(JJTBIDIREDGE);
      boolean jjtc010 = true;
      jjtree.openNodeScope(jjtn010);
      jjtreeOpenNodeScope(jjtn010);
    }
    try {
/*@egen*/   <BIDIREDGE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc010) {
        jjtree.closeNodeScope(jjtn010,  0);
        jjtreeCloseNodeScope(jjtn010);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #questionm( 0) */
    {
      SimpleNode jjtn011 = new SimpleNode(JJTQUESTIONM);
      boolean jjtc011 = true;
      jjtree.openNodeScope(jjtn011);
      jjtreeOpenNodeScope(jjtn011);
    }
    try {
/*@egen*/   <QUESTIONM>/*@bgen(jjtree)*/
    } finally {
      if (jjtc011) {
        jjtree.closeNodeScope(jjtn011,  0);
        jjtreeCloseNodeScope(jjtn011);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #like( 0) */
    {
      SimpleNode jjtn012 = new SimpleNode(JJTLIKE);
      boolean jjtc012 = true;
      jjtree.openNodeScope(jjtn012);
      jjtreeOpenNodeScope(jjtn012);
    }
    try {
/*@egen*/   <LIKE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc012) {
        jjtree.closeNodeScope(jjtn012,  0);
        jjtreeCloseNodeScope(jjtn012);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #roverlaps( 0) */
    {
      SimpleNode jjtn013 = new SimpleNode(JJTROVERLAPS);
      boolean jjtc013 = true;
      jjtree.openNodeScope(jjtn013);
      jjtreeOpenNodeScope(jjtn013);
    }
    try {
/*@egen*/   <ROVERLAPS>/*@bgen(jjtree)*/
    } finally {
      if (jjtc013) {
        jjtree.closeNodeScope(jjtn013,  0);
        jjtreeCloseNodeScope(jjtn013);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #rcontains( 0) */
    {
      SimpleNode jjtn014 = new SimpleNode(JJTRCONTAINS);
      boolean jjtc014 = true;
      jjtree.openNodeScope(jjtn014);
      jjtreeOpenNodeScope(jjtn014);
    }
    try {
/*@egen*/   <RCONTAINS>/*@bgen(jjtree)*/
    } finally {
      if (jjtc014) {
        jjtree.closeNodeScope(jjtn014,  0);
        jjtreeCloseNodeScope(jjtn014);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #rexact( 0) */
    {
      SimpleNode jjtn015 = new SimpleNode(JJTREXACT);
      boolean jjtc015 = true;
      jjtree.openNodeScope(jjtn015);
      jjtreeOpenNodeScope(jjtn015);
    }
    try {
/*@egen*/   <REXACT>/*@bgen(jjtree)*/
    } finally {
      if (jjtc015) {
        jjtree.closeNodeScope(jjtn015,  0);
        jjtreeCloseNodeScope(jjtn015);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #rcontained( 0) */
    {
      SimpleNode jjtn016 = new SimpleNode(JJTRCONTAINED);
      boolean jjtc016 = true;
      jjtree.openNodeScope(jjtn016);
      jjtreeOpenNodeScope(jjtn016);
    }
    try {
/*@egen*/   <RCONTAINED>/*@bgen(jjtree)*/
    } finally {
      if (jjtc016) {
        jjtree.closeNodeScope(jjtn016,  0);
        jjtreeCloseNodeScope(jjtn016);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #in_cmp( 0) */
    {
      SimpleNode jjtn017 = new SimpleNode(JJTIN_CMP);
      boolean jjtc017 = true;
      jjtree.openNodeScope(jjtn017);
      jjtreeOpenNodeScope(jjtn017);
    }
    try {
/*@egen*/   <IN>/*@bgen(jjtree)*/
    } finally {
      if (jjtc017) {
        jjtree.closeNodeScope(jjtn017,  0);
        jjtreeCloseNodeScope(jjtn017);
      }
    }
/*@egen*/
|   <NOT_BOOL>/*@bgen(jjtree) #not_in_cmp( 0) */
               {
                 SimpleNode jjtn018 = new SimpleNode(JJTNOT_IN_CMP);
                 boolean jjtc018 = true;
                 jjtree.openNodeScope(jjtn018);
                 jjtreeOpenNodeScope(jjtn018);
               }
               try {
/*@egen*/ <IN>/*@bgen(jjtree)*/
               } finally {
                 if (jjtc018) {
                   jjtree.closeNodeScope(jjtn018,  0);
                   jjtreeCloseNodeScope(jjtn018);
                 }
               }
/*@egen*/
|   LOOKAHEAD(2) <IS>/*@bgen(jjtree) #is_not_cmp( 0) */
                      {
                        SimpleNode jjtn019 = new SimpleNode(JJTIS_NOT_CMP);
                        boolean jjtc019 = true;
                        jjtree.openNodeScope(jjtn019);
                        jjtreeOpenNodeScope(jjtn019);
                      }
                      try {
/*@egen*/ <NOT_BOOL>/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc019) {
                          jjtree.closeNodeScope(jjtn019,  0);
                          jjtreeCloseNodeScope(jjtn019);
                        }
                      }
/*@egen*/
|/*@bgen(jjtree) #is_cmp( 0) */
    {
      SimpleNode jjtn020 = new SimpleNode(JJTIS_CMP);
      boolean jjtc020 = true;
      jjtree.openNodeScope(jjtn020);
      jjtreeOpenNodeScope(jjtn020);
    }
    try {
/*@egen*/   <IS>/*@bgen(jjtree)*/
    } finally {
      if (jjtc020) {
        jjtree.closeNodeScope(jjtn020,  0);
        jjtreeCloseNodeScope(jjtn020);
      }
    }
/*@egen*/
}

//expr: xor_expr ('|' xor_expr)*
void expr()       : {}
{ xor_expr() (<OR>/*@bgen(jjtree) #or_2op( 2) */
                   {
                     SimpleNode jjtn001 = new SimpleNode(JJTOR_2OP);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtreeOpenNodeScope(jjtn001);
                   }
                   try {
/*@egen*/ xor_expr()/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtreeCloseNodeScope(jjtn001);
                     }
                   }
/*@egen*/)* }

//xor_expr: and_expr ('^' and_expr)*
void xor_expr()       : {}
{ and_expr() (<XOR>/*@bgen(jjtree) #xor_2op( 2) */
                    {
                      SimpleNode jjtn001 = new SimpleNode(JJTXOR_2OP);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                      jjtreeOpenNodeScope(jjtn001);
                    }
                    try {
/*@egen*/ and_expr()/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                        jjtreeCloseNodeScope(jjtn001);
                      }
                    }
/*@egen*/)* }

//and_expr: shift_expr ('&' shift_expr)*
void and_expr()       : {}
{ shift_expr() (<AND>/*@bgen(jjtree) #and_2op( 2) */
                      {
                        SimpleNode jjtn001 = new SimpleNode(JJTAND_2OP);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtreeOpenNodeScope(jjtn001);
                      }
                      try {
/*@egen*/ shift_expr()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                          jjtreeCloseNodeScope(jjtn001);
                        }
                      }
/*@egen*/)* }

//shift_expr: arith_expr (('<<'|'>>') arith_expr)*
void shift_expr()       : {}
{
    arith_expr() (<LSHIFT>/*@bgen(jjtree) #lshift_2op( 2) */
                           {
                             SimpleNode jjtn001 = new SimpleNode(JJTLSHIFT_2OP);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                             jjtreeOpenNodeScope(jjtn001);
                           }
                           try {
/*@egen*/ arith_expr()/*@bgen(jjtree)*/
                           } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               throw (RuntimeException)jjte001;
                             }
                             if (jjte001 instanceof ParseException) {
                               throw (ParseException)jjte001;
                             }
                             throw (Error)jjte001;
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                               jjtreeCloseNodeScope(jjtn001);
                             }
                           }
/*@egen*/
|   <RSHIFT>/*@bgen(jjtree) #rshift_2op( 2) */
             {
               SimpleNode jjtn002 = new SimpleNode(JJTRSHIFT_2OP);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtreeOpenNodeScope(jjtn002);
             }
             try {
/*@egen*/ arith_expr()/*@bgen(jjtree)*/
             } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 throw (RuntimeException)jjte002;
               }
               if (jjte002 instanceof ParseException) {
                 throw (ParseException)jjte002;
               }
               throw (Error)jjte002;
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
                 jjtreeCloseNodeScope(jjtn002);
               }
             }
/*@egen*/ )*
}

//arith_expr: term (('+'|'-') term)*
void arith_expr()       : {}
{
    term() (<PLUS>/*@bgen(jjtree) #add_2op( 2) */
                   {
                     SimpleNode jjtn001 = new SimpleNode(JJTADD_2OP);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtreeOpenNodeScope(jjtn001);
                   }
                   try {
/*@egen*/ term()/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtreeCloseNodeScope(jjtn001);
                     }
                   }
/*@egen*/
|   <MINUS>/*@bgen(jjtree) #sub_2op( 2) */
            {
              SimpleNode jjtn002 = new SimpleNode(JJTSUB_2OP);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtreeOpenNodeScope(jjtn002);
            }
            try {
/*@egen*/ term()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
                jjtreeCloseNodeScope(jjtn002);
              }
            }
/*@egen*/ )*
}

//term: factor (('*'|'/'|'%') factor)*
void term()       : {}
{
    factor()  ( <MULTIPLY>/*@bgen(jjtree) #mul_2op( 2) */
                           {
                             SimpleNode jjtn001 = new SimpleNode(JJTMUL_2OP);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                             jjtreeOpenNodeScope(jjtn001);
                           }
                           try {
/*@egen*/ factor()/*@bgen(jjtree)*/
                           } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               throw (RuntimeException)jjte001;
                             }
                             if (jjte001 instanceof ParseException) {
                               throw (ParseException)jjte001;
                             }
                             throw (Error)jjte001;
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                               jjtreeCloseNodeScope(jjtn001);
                             }
                           }
/*@egen*/
|   <DIVIDE>/*@bgen(jjtree) #div_2op( 2) */
             {
               SimpleNode jjtn002 = new SimpleNode(JJTDIV_2OP);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtreeOpenNodeScope(jjtn002);
             }
             try {
/*@egen*/ factor()/*@bgen(jjtree)*/
             } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 throw (RuntimeException)jjte002;
               }
               if (jjte002 instanceof ParseException) {
                 throw (ParseException)jjte002;
               }
               throw (Error)jjte002;
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
                 jjtreeCloseNodeScope(jjtn002);
               }
             }
/*@egen*/
|   <MODULO>/*@bgen(jjtree) #mod_2op( 2) */
             {
               SimpleNode jjtn003 = new SimpleNode(JJTMOD_2OP);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
               jjtreeOpenNodeScope(jjtn003);
             }
             try {
/*@egen*/ factor()/*@bgen(jjtree)*/
             } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 throw (RuntimeException)jjte003;
               }
               if (jjte003 instanceof ParseException) {
                 throw (ParseException)jjte003;
               }
               throw (Error)jjte003;
             } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003,  2);
                 jjtreeCloseNodeScope(jjtn003);
               }
             }
/*@egen*/ )*
}

//factor: ('+'|'-'|'~') factor | power
void factor()      : {}
{
    <PLUS>/*@bgen(jjtree) #pos_1op( 1) */
           {
             SimpleNode jjtn001 = new SimpleNode(JJTPOS_1OP);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);
           }
           try {
/*@egen*/ factor()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  1);
               jjtreeCloseNodeScope(jjtn001);
             }
           }
/*@egen*/
|   <MINUS>/*@bgen(jjtree) #neg_1op( 1) */
            {
              SimpleNode jjtn002 = new SimpleNode(JJTNEG_1OP);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtreeOpenNodeScope(jjtn002);
            }
            try {
/*@egen*/ factor()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  1);
                jjtreeCloseNodeScope(jjtn002);
              }
            }
/*@egen*/
|   <NOT>/*@bgen(jjtree) #invert_1op( 1) */
          {
            SimpleNode jjtn003 = new SimpleNode(JJTINVERT_1OP);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
            jjtreeOpenNodeScope(jjtn003);
          }
          try {
/*@egen*/ factor()/*@bgen(jjtree)*/
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              throw (RuntimeException)jjte003;
            }
            if (jjte003 instanceof ParseException) {
              throw (ParseException)jjte003;
            }
            throw (Error)jjte003;
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003,  1);
              jjtreeCloseNodeScope(jjtn003);
            }
          }
/*@egen*/
|   power()
} /*Modified, no recursion*/

//power: atom trailer* ('**' factor)*
void power()      : {}
{ atomtrailer() (LOOKAHEAD(2) <POWER>/*@bgen(jjtree) #pow_2op( 2) */
                                      {
                                        SimpleNode jjtn001 = new SimpleNode(JJTPOW_2OP);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
                                        jjtreeOpenNodeScope(jjtn001);
                                      }
                                      try {
/*@egen*/ factor()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte001) {
                                        if (jjtc001) {
                                          jjtree.clearNodeScope(jjtn001);
                                          jjtc001 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte001 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte001;
                                        }
                                        if (jjte001 instanceof ParseException) {
                                          throw (ParseException)jjte001;
                                        }
                                        throw (Error)jjte001;
                                      } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001,  2);
                                          jjtreeCloseNodeScope(jjtn001);
                                        }
                                      }
/*@egen*/)* }

//trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
void atomtrailer()      : {}
{
    atom() ( (LOOKAHEAD(2) <LPAREN>/*@bgen(jjtree) #Call_Op( 1) */
                                    {
                                      SimpleNode jjtn001 = new SimpleNode(JJTCALL_OP);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                      jjtreeOpenNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*/ <RPAREN>/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  1);
                                        jjtreeCloseNodeScope(jjtn001);
                                      }
                                    }
/*@egen*/
|   <LPAREN> arglist()/*@bgen(jjtree) #Call_Op( 2) */
                       {
                         SimpleNode jjtn002 = new SimpleNode(JJTCALL_OP);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                         jjtreeOpenNodeScope(jjtn002);
                       }
                       try {
/*@egen*/ <RPAREN>/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002,  2);
                           jjtreeCloseNodeScope(jjtn002);
                         }
                       }
/*@egen*/)
|   <LBRACKET> subscriptlist()/*@bgen(jjtree) #Index_Op( 2) */
                               {
                                 SimpleNode jjtn003 = new SimpleNode(JJTINDEX_OP);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
                                 jjtreeOpenNodeScope(jjtn003);
                               }
                               try {
/*@egen*/ <RBRACKET>/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003,  2);
                                   jjtreeCloseNodeScope(jjtn003);
                                 }
                               }
/*@egen*/
|   <DOT>/*@bgen(jjtree) #Dot_Op( 2) */
          {
            SimpleNode jjtn004 = new SimpleNode(JJTDOT_OP);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
            jjtreeOpenNodeScope(jjtn004);
          }
          try {
/*@egen*/ AnyName()/*@bgen(jjtree)*/
          } catch (Throwable jjte004) {
            if (jjtc004) {
              jjtree.clearNodeScope(jjtn004);
              jjtc004 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte004 instanceof RuntimeException) {
              throw (RuntimeException)jjte004;
            }
            if (jjte004 instanceof ParseException) {
              throw (ParseException)jjte004;
            }
            throw (Error)jjte004;
          } finally {
            if (jjtc004) {
              jjtree.closeNodeScope(jjtn004,  2);
              jjtreeCloseNodeScope(jjtn004);
            }
          }
/*@egen*/ )*
}


//atom: '(' [testlist] ')' | '[' [testlist] ']' | '{' [dictmaker] '}' | '`' testlist '`' | NAME | NUMBER | STRING+
void atom()      : {}
{
    LOOKAHEAD(2)/*@bgen(jjtree) tuple */
                 {
                   SimpleNode jjtn001 = new SimpleNode(JJTTUPLE);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtreeOpenNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ (  <LPAREN> <RPAREN> )/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtreeCloseNodeScope(jjtn001);
                   }
                 }
/*@egen*/
|   ( <LPAREN> [SmartTestList()] <RPAREN> )
|/*@bgen(jjtree) list */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTLIST);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
    }
    try {
/*@egen*/   ( <LBRACKET> [listmaker()] <RBRACKET> )/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtreeCloseNodeScope(jjtn002);
      }
    }
/*@egen*/
|/*@bgen(jjtree) dictionary */
    {
      SimpleNode jjtn003 = new SimpleNode(JJTDICTIONARY);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtreeOpenNodeScope(jjtn003);
    }
    try {
/*@egen*/   ( <LBRACE> [dictmaker()] <RBRACE> )/*@bgen(jjtree)*/
    } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        throw (RuntimeException)jjte003;
      }
      if (jjte003 instanceof ParseException) {
        throw (ParseException)jjte003;
      }
      throw (Error)jjte003;
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
        jjtreeCloseNodeScope(jjtn003);
      }
    }
/*@egen*/
|   "`" SmartTestList()/*@bgen(jjtree) #str_1op( 1) */
                        {
                          SimpleNode jjtn004 = new SimpleNode(JJTSTR_1OP);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
                          jjtreeOpenNodeScope(jjtn004);
                        }
                        try {
/*@egen*/ "`"/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004,  1);
                            jjtreeCloseNodeScope(jjtn004);
                          }
                        }
/*@egen*/
|   Name()
|   Number()
|   String() (/*@bgen(jjtree) #strjoin( 2) */
              {
                SimpleNode jjtn005 = new SimpleNode(JJTSTRJOIN);
                boolean jjtc005 = true;
                jjtree.openNodeScope(jjtn005);
                jjtreeOpenNodeScope(jjtn005);
              }
              try {
/*@egen*/String()/*@bgen(jjtree)*/
              } catch (Throwable jjte005) {
                if (jjtc005) {
                  jjtree.clearNodeScope(jjtn005);
                  jjtc005 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte005 instanceof RuntimeException) {
                  throw (RuntimeException)jjte005;
                }
                if (jjte005 instanceof ParseException) {
                  throw (ParseException)jjte005;
                }
                throw (Error)jjte005;
              } finally {
                if (jjtc005) {
                  jjtree.closeNodeScope(jjtn005,  2);
                  jjtreeCloseNodeScope(jjtn005);
                }
              }
/*@egen*/)* 
}


//lambdef: 'lambda' [varargslist] ':' test
void lambdef():{/*@bgen(jjtree) lambdef */
  SimpleNode jjtn000 = new SimpleNode(JJTLAMBDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) lambdef */
  try {
/*@egen*/ <LAMBDA> [varargslist()] <COLON> test()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

//subscriptlist: subscript (',' subscript)* [',']
void subscriptlist()      : {}
{/*@bgen(jjtree) #tuple(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTTUPLE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/ (subscript() (LOOKAHEAD(2) <COMMA> subscript())* [Comma()])/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*/ }

//subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]
void subscript()      : {}
{
    <DOT> <DOT>/*@bgen(jjtree) Ellipses */
                {
                  SimpleNode jjtn001 = new SimpleNode(JJTELLIPSES);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
                }
                try {
/*@egen*/ <DOT>/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtreeCloseNodeScope(jjtn001);
                  }
                }
/*@egen*/
|/*@bgen(jjtree) #Slice(> 1) */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTSLICE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
    }
    try {
/*@egen*/   (test() (slice())?)/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
        jjtreeCloseNodeScope(jjtn002);
      }
    }
/*@egen*/
|/*@bgen(jjtree) #Slice(> 0) */
    {
      SimpleNode jjtn003 = new SimpleNode(JJTSLICE);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtreeOpenNodeScope(jjtn003);
    }
    try {
/*@egen*/   slice()/*@bgen(jjtree)*/
    } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        throw (RuntimeException)jjte003;
      }
      if (jjte003 instanceof ParseException) {
        throw (ParseException)jjte003;
      }
      throw (Error)jjte003;
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 0);
        jjtreeCloseNodeScope(jjtn003);
      }
    }
/*@egen*/ 
}

//sliceop: ':' [test]
void slice()      : {}
{ Colon() [test()] (Colon() [test()])? }

void Colon(): {/*@bgen(jjtree) Colon */
  SimpleNode jjtn000 = new SimpleNode(JJTCOLON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Colon */
                  try {
/*@egen*/<COLON>/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtreeCloseNodeScope(jjtn000);
                    }
                  }
/*@egen*/}
void Comma(): {/*@bgen(jjtree) Comma */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Comma */
                  try {
/*@egen*/<COMMA>/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtreeCloseNodeScope(jjtn000);
                    }
                  }
/*@egen*/}

//exprlist: expr (',' expr)* [',']
void exprlist()      : {}
{/*@bgen(jjtree) #tuple(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTTUPLE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/ (expr() (LOOKAHEAD(2) <COMMA> expr())* [Comma()])/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*/ }

//testlist: test (',' test)* [',']
void SmartTestList()      : {}
{/*@bgen(jjtree) #tuple(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTTUPLE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/ (test() (LOOKAHEAD(2) <COMMA> test())* [Comma()])/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*/ }

//testlist: test (',' test)* [',']
void testlist()      : {}
{ test() (LOOKAHEAD(2) <COMMA> test())* [<COMMA>]}

//dictmaker: test ':' test (',' test ':' test)* [',']
void dictmaker()      : {}
{test() <COLON> test() (LOOKAHEAD(2) <COMMA> test() <COLON> test())* [<COMMA>]}

//listmaker: test ( list_for | (',' test)* [','] )
void listmaker()      : {}
{ test() ( list_for() | (LOOKAHEAD(2) <COMMA> test())*/*@bgen(jjtree) #tuple(> 1) */
                                                       {
                                                         SimpleNode jjtn001 = new SimpleNode(JJTTUPLE);
                                                         boolean jjtc001 = true;
                                                         jjtree.openNodeScope(jjtn001);
                                                         jjtreeOpenNodeScope(jjtn001);
                                                       }
                                                       try {
/*@egen*/ [Comma()]/*@bgen(jjtree)*/
                                                       } catch (Throwable jjte001) {
                                                         if (jjtc001) {
                                                           jjtree.clearNodeScope(jjtn001);
                                                           jjtc001 = false;
                                                         } else {
                                                           jjtree.popNode();
                                                         }
                                                         if (jjte001 instanceof RuntimeException) {
                                                           throw (RuntimeException)jjte001;
                                                         }
                                                         if (jjte001 instanceof ParseException) {
                                                           throw (ParseException)jjte001;
                                                         }
                                                         throw (Error)jjte001;
                                                       } finally {
                                                         if (jjtc001) {
                                                           jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                                           jjtreeCloseNodeScope(jjtn001);
                                                         }
                                                       }
/*@egen*/) }

//list_iter: [list_for | list_if]
void list_iter(): {/*@bgen(jjtree) list_iter */
  SimpleNode jjtn000 = new SimpleNode(JJTLIST_ITER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) list_iter */
  try {
/*@egen*/ [ (list_for() | list_if()) ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

//list_for: 'for' exprlist 'in' testlist list_iter
void list_for()          : {/*@bgen(jjtree) for_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) for_stmt */
  try {
/*@egen*/ <FOR> exprlist() <IN> SmartTestList() list_iter()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

//list_if: 'if' test list_iter
void list_if()         : {/*@bgen(jjtree) if_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTIF_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) if_stmt */
  try {
/*@egen*/ <IF> test() list_iter()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }


//classdef: 'class' NAME ['(' testlist ')'] ':' suite
void classdef(): {/*@bgen(jjtree) classdef */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) classdef */
 try {
/*@egen*/<CLASS> Name() [<LPAREN> testlist() <RPAREN>] <COLON> suite()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtreeCloseNodeScope(jjtn000);
   }
 }
/*@egen*/}

//arglist: (argument ',')* 
//              (argument [',']| '*' test [',' '**' test] | '**' test)
void arglist(): {/*@bgen(jjtree) arglist */
  SimpleNode jjtn000 = new SimpleNode(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) arglist */
    try {
/*@egen*/
    normalargs() [<COMMA> 
    [LOOKAHEAD(2) ExtraArgValueList() 
    [ <COMMA> ExtraKeywordValueList() ] | ExtraKeywordValueList()]]
|   [LOOKAHEAD(2) ExtraArgValueList() 
    [ <COMMA> ExtraKeywordValueList() ] | ExtraKeywordValueList()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/ 
}

void normalargs()      : {}
{ argument() (LOOKAHEAD(2) <COMMA> argument())* }

void ExtraArgValueList(): {/*@bgen(jjtree) ExtraArgValueList */
  SimpleNode jjtn000 = new SimpleNode(JJTEXTRAARGVALUELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExtraArgValueList */
  try {
/*@egen*/ <MULTIPLY> test()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }

void ExtraKeywordValueList(): {/*@bgen(jjtree) ExtraKeywordValueList */
  SimpleNode jjtn000 = new SimpleNode(JJTEXTRAKEYWORDVALUELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExtraKeywordValueList */
  try {
/*@egen*/ (<POWER>|<MULTIPLY> <MULTIPLY>) test()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }


//argument: [test '='] test     # Really [keyword '='] test
void argument()      : {}
{/*@bgen(jjtree) #Keyword(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTKEYWORD);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/ ([LOOKAHEAD(2) AnyName() <EQUAL>] test())/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*/ }


void Number()       :
{
    Token t;
}
{/*@bgen(jjtree) Int */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTINT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        t=<HEXNUMBER>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtreeCloseNodeScope(jjtn001);
                      }
/*@egen*/ {
            jjtn001.setInteger(t.image.substring(2,t.image.length()), 16);
        }
    )/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Int */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTINT);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
    }
    try {
/*@egen*/   (
        t=<OCTNUMBER>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtreeCloseNodeScope(jjtn002);
                      }
/*@egen*/ { jjtn002.setInteger(t.image, 8); }
    )/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtreeCloseNodeScope(jjtn002);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Int */
    {
      SimpleNode jjtn003 = new SimpleNode(JJTINT);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtreeOpenNodeScope(jjtn003);
    }
    try {
/*@egen*/   (
        t=<DECNUMBER>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                        jjtreeCloseNodeScope(jjtn003);
                      }
/*@egen*/ { jjtn003.setInteger(t.image, 10); }
    )/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
        jjtreeCloseNodeScope(jjtn003);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Float */
    {
      SimpleNode jjtn004 = new SimpleNode(JJTFLOAT);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
      jjtreeOpenNodeScope(jjtn004);
    }
    try {
/*@egen*/   (
        t=<FLOAT>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn004, true);
                    jjtc004 = false;
                    jjtreeCloseNodeScope(jjtn004);
                  }
/*@egen*/ { jjtn004.setFloat(t.image); }
    )/*@bgen(jjtree)*/
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
        jjtreeCloseNodeScope(jjtn004);
      }
    }
/*@egen*/
}

void Complex(): {/*@bgen(jjtree) Complex */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPLEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Complex */
  try {
/*@egen*/ <FLOAT>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/   }

void Name()      :
{/*@bgen(jjtree) Name */
    SimpleNode jjtn000 = new SimpleNode(JJTNAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Name */
    try {
/*@egen*/
    t = <NAME>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtreeCloseNodeScope(jjtn000);
               }
/*@egen*/ { jjtn000.setInfo(t.image); }
|   t = <AS>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtreeCloseNodeScope(jjtn000);
             }
/*@egen*/ { jjtn000.setInfo(t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void String()       :
{
    Token t;
}
{/*@bgen(jjtree) String */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTSTRING);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    }
    try {
/*@egen*/
    ( t=<SINGLE_STRING>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
                          jjtreeCloseNodeScope(jjtn001);
                        }
/*@egen*/ { jjtn001.setString(t.image, 1); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
/*@egen*/
|/*@bgen(jjtree) String */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTSTRING);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
    }
    try {
/*@egen*/   ( t=<SINGLE_STRING2>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtc002 = false;
                           jjtreeCloseNodeScope(jjtn002);
                         }
/*@egen*/ { jjtn002.setString(t.image, 1); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtreeCloseNodeScope(jjtn002);
      }
    }
/*@egen*/
|/*@bgen(jjtree) String */
    {
      SimpleNode jjtn003 = new SimpleNode(JJTSTRING);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtreeOpenNodeScope(jjtn003);
    }
    try {
/*@egen*/   ( t=<TRIPLE_STRING>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn003, true);
                          jjtc003 = false;
                          jjtreeCloseNodeScope(jjtn003);
                        }
/*@egen*/ { jjtn003.setString(t.image, 3); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
        jjtreeCloseNodeScope(jjtn003);
      }
    }
/*@egen*/
|/*@bgen(jjtree) String */
    {
      SimpleNode jjtn004 = new SimpleNode(JJTSTRING);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
      jjtreeOpenNodeScope(jjtn004);
    }
    try {
/*@egen*/   ( t=<TRIPLE_STRING2>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn004, true);
                           jjtc004 = false;
                           jjtreeCloseNodeScope(jjtn004);
                         }
/*@egen*/ { jjtn004.setString(t.image, 3); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
        jjtreeCloseNodeScope(jjtn004);
      }
    }
/*@egen*/
}

void AnyName()      :
{
    Token t;
}
{/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTNAME);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    }
    try {
/*@egen*/
    ( t= <NAME>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                  jjtreeCloseNodeScope(jjtn001);
                }
/*@egen*/ { jjtn001.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTNAME);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
    }
    try {
/*@egen*/   ( t = <OR_BOOL>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtc002 = false;
                      jjtreeCloseNodeScope(jjtn002);
                    }
/*@egen*/ { jjtn002.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtreeCloseNodeScope(jjtn002);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn003 = new SimpleNode(JJTNAME);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtreeOpenNodeScope(jjtn003);
    }
    try {
/*@egen*/   ( t = <AND_BOOL>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn003, true);
                       jjtc003 = false;
                       jjtreeCloseNodeScope(jjtn003);
                     }
/*@egen*/ { jjtn003.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
        jjtreeCloseNodeScope(jjtn003);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn004 = new SimpleNode(JJTNAME);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
      jjtreeOpenNodeScope(jjtn004);
    }
    try {
/*@egen*/   ( t = <NOT_BOOL>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn004, true);
                       jjtc004 = false;
                       jjtreeCloseNodeScope(jjtn004);
                     }
/*@egen*/ { jjtn004.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
        jjtreeCloseNodeScope(jjtn004);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn005 = new SimpleNode(JJTNAME);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
      jjtreeOpenNodeScope(jjtn005);
    }
    try {
/*@egen*/   ( t = <IS>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn005, true);
                 jjtc005 = false;
                 jjtreeCloseNodeScope(jjtn005);
               }
/*@egen*/ { jjtn005.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005, true);
        jjtreeCloseNodeScope(jjtn005);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn006 = new SimpleNode(JJTNAME);
      boolean jjtc006 = true;
      jjtree.openNodeScope(jjtn006);
      jjtreeOpenNodeScope(jjtn006);
    }
    try {
/*@egen*/   ( t = <IN>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn006, true);
                 jjtc006 = false;
                 jjtreeCloseNodeScope(jjtn006);
               }
/*@egen*/ { jjtn006.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc006) {
        jjtree.closeNodeScope(jjtn006, true);
        jjtreeCloseNodeScope(jjtn006);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn007 = new SimpleNode(JJTNAME);
      boolean jjtc007 = true;
      jjtree.openNodeScope(jjtn007);
      jjtreeOpenNodeScope(jjtn007);
    }
    try {
/*@egen*/   ( t = <LAMBDA>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn007, true);
                     jjtc007 = false;
                     jjtreeCloseNodeScope(jjtn007);
                   }
/*@egen*/ { jjtn007.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc007) {
        jjtree.closeNodeScope(jjtn007, true);
        jjtreeCloseNodeScope(jjtn007);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn008 = new SimpleNode(JJTNAME);
      boolean jjtc008 = true;
      jjtree.openNodeScope(jjtn008);
      jjtreeOpenNodeScope(jjtn008);
    }
    try {
/*@egen*/   ( t = <IF>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn008, true);
                 jjtc008 = false;
                 jjtreeCloseNodeScope(jjtn008);
               }
/*@egen*/ { jjtn008.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc008) {
        jjtree.closeNodeScope(jjtn008, true);
        jjtreeCloseNodeScope(jjtn008);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn009 = new SimpleNode(JJTNAME);
      boolean jjtc009 = true;
      jjtree.openNodeScope(jjtn009);
      jjtreeOpenNodeScope(jjtn009);
    }
    try {
/*@egen*/   ( t = <ELSE>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn009, true);
                   jjtc009 = false;
                   jjtreeCloseNodeScope(jjtn009);
                 }
/*@egen*/ { jjtn009.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc009) {
        jjtree.closeNodeScope(jjtn009, true);
        jjtreeCloseNodeScope(jjtn009);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn010 = new SimpleNode(JJTNAME);
      boolean jjtc010 = true;
      jjtree.openNodeScope(jjtn010);
      jjtreeOpenNodeScope(jjtn010);
    }
    try {
/*@egen*/   ( t = <ELIF>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn010, true);
                   jjtc010 = false;
                   jjtreeCloseNodeScope(jjtn010);
                 }
/*@egen*/ { jjtn010.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc010) {
        jjtree.closeNodeScope(jjtn010, true);
        jjtreeCloseNodeScope(jjtn010);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn011 = new SimpleNode(JJTNAME);
      boolean jjtc011 = true;
      jjtree.openNodeScope(jjtn011);
      jjtreeOpenNodeScope(jjtn011);
    }
    try {
/*@egen*/   ( t = <WHILE>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn011, true);
                    jjtc011 = false;
                    jjtreeCloseNodeScope(jjtn011);
                  }
/*@egen*/ { jjtn011.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc011) {
        jjtree.closeNodeScope(jjtn011, true);
        jjtreeCloseNodeScope(jjtn011);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn012 = new SimpleNode(JJTNAME);
      boolean jjtc012 = true;
      jjtree.openNodeScope(jjtn012);
      jjtreeOpenNodeScope(jjtn012);
    }
    try {
/*@egen*/   ( t = <FOR>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn012, true);
                  jjtc012 = false;
                  jjtreeCloseNodeScope(jjtn012);
                }
/*@egen*/ { jjtn012.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc012) {
        jjtree.closeNodeScope(jjtn012, true);
        jjtreeCloseNodeScope(jjtn012);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn013 = new SimpleNode(JJTNAME);
      boolean jjtc013 = true;
      jjtree.openNodeScope(jjtn013);
      jjtreeOpenNodeScope(jjtn013);
    }
    try {
/*@egen*/   ( t = <TRY>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn013, true);
                  jjtc013 = false;
                  jjtreeCloseNodeScope(jjtn013);
                }
/*@egen*/ { jjtn013.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc013) {
        jjtree.closeNodeScope(jjtn013, true);
        jjtreeCloseNodeScope(jjtn013);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn014 = new SimpleNode(JJTNAME);
      boolean jjtc014 = true;
      jjtree.openNodeScope(jjtn014);
      jjtreeOpenNodeScope(jjtn014);
    }
    try {
/*@egen*/   ( t = <EXCEPT>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn014, true);
                     jjtc014 = false;
                     jjtreeCloseNodeScope(jjtn014);
                   }
/*@egen*/ { jjtn014.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc014) {
        jjtree.closeNodeScope(jjtn014, true);
        jjtreeCloseNodeScope(jjtn014);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn015 = new SimpleNode(JJTNAME);
      boolean jjtc015 = true;
      jjtree.openNodeScope(jjtn015);
      jjtreeOpenNodeScope(jjtn015);
    }
    try {
/*@egen*/   ( t = <DEF>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn015, true);
                  jjtc015 = false;
                  jjtreeCloseNodeScope(jjtn015);
                }
/*@egen*/ { jjtn015.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc015) {
        jjtree.closeNodeScope(jjtn015, true);
        jjtreeCloseNodeScope(jjtn015);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn016 = new SimpleNode(JJTNAME);
      boolean jjtc016 = true;
      jjtree.openNodeScope(jjtn016);
      jjtreeOpenNodeScope(jjtn016);
    }
    try {
/*@egen*/   ( t = <CLASS>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn016, true);
                    jjtc016 = false;
                    jjtreeCloseNodeScope(jjtn016);
                  }
/*@egen*/ { jjtn016.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc016) {
        jjtree.closeNodeScope(jjtn016, true);
        jjtreeCloseNodeScope(jjtn016);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn017 = new SimpleNode(JJTNAME);
      boolean jjtc017 = true;
      jjtree.openNodeScope(jjtn017);
      jjtreeOpenNodeScope(jjtn017);
    }
    try {
/*@egen*/   ( t = <FINALLY>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn017, true);
                      jjtc017 = false;
                      jjtreeCloseNodeScope(jjtn017);
                    }
/*@egen*/ { jjtn017.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc017) {
        jjtree.closeNodeScope(jjtn017, true);
        jjtreeCloseNodeScope(jjtn017);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn018 = new SimpleNode(JJTNAME);
      boolean jjtc018 = true;
      jjtree.openNodeScope(jjtn018);
      jjtreeOpenNodeScope(jjtn018);
    }
    try {
/*@egen*/   ( t = <PRINT>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn018, true);
                    jjtc018 = false;
                    jjtreeCloseNodeScope(jjtn018);
                  }
/*@egen*/ { jjtn018.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc018) {
        jjtree.closeNodeScope(jjtn018, true);
        jjtreeCloseNodeScope(jjtn018);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn019 = new SimpleNode(JJTNAME);
      boolean jjtc019 = true;
      jjtree.openNodeScope(jjtn019);
      jjtreeOpenNodeScope(jjtn019);
    }
    try {
/*@egen*/   ( t = <PASS>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn019, true);
                   jjtc019 = false;
                   jjtreeCloseNodeScope(jjtn019);
                 }
/*@egen*/ { jjtn019.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc019) {
        jjtree.closeNodeScope(jjtn019, true);
        jjtreeCloseNodeScope(jjtn019);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn020 = new SimpleNode(JJTNAME);
      boolean jjtc020 = true;
      jjtree.openNodeScope(jjtn020);
      jjtreeOpenNodeScope(jjtn020);
    }
    try {
/*@egen*/   ( t = <BREAK>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn020, true);
                    jjtc020 = false;
                    jjtreeCloseNodeScope(jjtn020);
                  }
/*@egen*/ { jjtn020.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc020) {
        jjtree.closeNodeScope(jjtn020, true);
        jjtreeCloseNodeScope(jjtn020);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn021 = new SimpleNode(JJTNAME);
      boolean jjtc021 = true;
      jjtree.openNodeScope(jjtn021);
      jjtreeOpenNodeScope(jjtn021);
    }
    try {
/*@egen*/   ( t = <CONTINUE>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn021, true);
                       jjtc021 = false;
                       jjtreeCloseNodeScope(jjtn021);
                     }
/*@egen*/ { jjtn021.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc021) {
        jjtree.closeNodeScope(jjtn021, true);
        jjtreeCloseNodeScope(jjtn021);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn022 = new SimpleNode(JJTNAME);
      boolean jjtc022 = true;
      jjtree.openNodeScope(jjtn022);
      jjtreeOpenNodeScope(jjtn022);
    }
    try {
/*@egen*/   ( t = <RETURN>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn022, true);
                     jjtc022 = false;
                     jjtreeCloseNodeScope(jjtn022);
                   }
/*@egen*/ { jjtn022.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc022) {
        jjtree.closeNodeScope(jjtn022, true);
        jjtreeCloseNodeScope(jjtn022);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn023 = new SimpleNode(JJTNAME);
      boolean jjtc023 = true;
      jjtree.openNodeScope(jjtn023);
      jjtreeOpenNodeScope(jjtn023);
    }
    try {
/*@egen*/   ( t = <IMPORT>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn023, true);
                     jjtc023 = false;
                     jjtreeCloseNodeScope(jjtn023);
                   }
/*@egen*/ { jjtn023.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc023) {
        jjtree.closeNodeScope(jjtn023, true);
        jjtreeCloseNodeScope(jjtn023);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn024 = new SimpleNode(JJTNAME);
      boolean jjtc024 = true;
      jjtree.openNodeScope(jjtn024);
      jjtreeOpenNodeScope(jjtn024);
    }
    try {
/*@egen*/   ( t = <FROM>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn024, true);
                   jjtc024 = false;
                   jjtreeCloseNodeScope(jjtn024);
                 }
/*@egen*/ { jjtn024.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc024) {
        jjtree.closeNodeScope(jjtn024, true);
        jjtreeCloseNodeScope(jjtn024);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn025 = new SimpleNode(JJTNAME);
      boolean jjtc025 = true;
      jjtree.openNodeScope(jjtn025);
      jjtreeOpenNodeScope(jjtn025);
    }
    try {
/*@egen*/   ( t = <DEL>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn025, true);
                  jjtc025 = false;
                  jjtreeCloseNodeScope(jjtn025);
                }
/*@egen*/ { jjtn025.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc025) {
        jjtree.closeNodeScope(jjtn025, true);
        jjtreeCloseNodeScope(jjtn025);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn026 = new SimpleNode(JJTNAME);
      boolean jjtc026 = true;
      jjtree.openNodeScope(jjtn026);
      jjtreeOpenNodeScope(jjtn026);
    }
    try {
/*@egen*/   ( t = <RAISE>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn026, true);
                    jjtc026 = false;
                    jjtreeCloseNodeScope(jjtn026);
                  }
/*@egen*/ { jjtn026.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc026) {
        jjtree.closeNodeScope(jjtn026, true);
        jjtreeCloseNodeScope(jjtn026);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn027 = new SimpleNode(JJTNAME);
      boolean jjtc027 = true;
      jjtree.openNodeScope(jjtn027);
      jjtreeOpenNodeScope(jjtn027);
    }
    try {
/*@egen*/   ( t = <GLOBAL>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn027, true);
                     jjtc027 = false;
                     jjtreeCloseNodeScope(jjtn027);
                   }
/*@egen*/ { jjtn027.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc027) {
        jjtree.closeNodeScope(jjtn027, true);
        jjtreeCloseNodeScope(jjtn027);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn028 = new SimpleNode(JJTNAME);
      boolean jjtc028 = true;
      jjtree.openNodeScope(jjtn028);
      jjtreeOpenNodeScope(jjtn028);
    }
    try {
/*@egen*/   ( t = <EXEC>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn028, true);
                   jjtc028 = false;
                   jjtreeCloseNodeScope(jjtn028);
                 }
/*@egen*/ { jjtn028.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc028) {
        jjtree.closeNodeScope(jjtn028, true);
        jjtreeCloseNodeScope(jjtn028);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn029 = new SimpleNode(JJTNAME);
      boolean jjtc029 = true;
      jjtree.openNodeScope(jjtn029);
      jjtreeOpenNodeScope(jjtn029);
    }
    try {
/*@egen*/   ( t = <ASSERT>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn029, true);
                     jjtc029 = false;
                     jjtreeCloseNodeScope(jjtn029);
                   }
/*@egen*/ { jjtn029.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc029) {
        jjtree.closeNodeScope(jjtn029, true);
        jjtreeCloseNodeScope(jjtn029);
      }
    }
/*@egen*/
|/*@bgen(jjtree) Name */
    {
      SimpleNode jjtn030 = new SimpleNode(JJTNAME);
      boolean jjtc030 = true;
      jjtree.openNodeScope(jjtn030);
      jjtreeOpenNodeScope(jjtn030);
    }
    try {
/*@egen*/   ( t = <AS>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn030, true);
                 jjtc030 = false;
                 jjtreeCloseNodeScope(jjtn030);
               }
/*@egen*/ { jjtn030.setInfo(t.image); } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc030) {
        jjtree.closeNodeScope(jjtn030, true);
        jjtreeCloseNodeScope(jjtn030);
      }
    }
/*@egen*/
}
